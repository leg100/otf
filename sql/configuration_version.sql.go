// Code generated by pggen. DO NOT EDIT.

package sql

import (
	"context"
	"fmt"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgx/v4"
	"time"
)

const insertConfigurationVersionSQL = `INSERT INTO configuration_versions (
    configuration_version_id,
    created_at,
    updated_at,
    auto_queue_runs,
    source,
    speculative,
    status,
    workspace_id
) VALUES (
    $1,
    NOW(),
    NOW(),
    $2,
    $3,
    $4,
    $5,
    $6
)
RETURNING *;`

type InsertConfigurationVersionParams struct {
	ID            *string
	AutoQueueRuns *bool
	Source        *string
	Speculative   *bool
	Status        *string
	WorkspaceID   *string
}

type InsertConfigurationVersionRow struct {
	ConfigurationVersionID *string   `json:"configuration_version_id"`
	CreatedAt              time.Time `json:"created_at"`
	UpdatedAt              time.Time `json:"updated_at"`
	AutoQueueRuns          *bool     `json:"auto_queue_runs"`
	Source                 *string   `json:"source"`
	Speculative            *bool     `json:"speculative"`
	Status                 *string   `json:"status"`
	Config                 []byte    `json:"config"`
	WorkspaceID            *string   `json:"workspace_id"`
}

func (s InsertConfigurationVersionRow) GetConfigurationVersionID() *string { return s.ConfigurationVersionID }
func (s InsertConfigurationVersionRow) GetCreatedAt() time.Time { return s.CreatedAt }
func (s InsertConfigurationVersionRow) GetUpdatedAt() time.Time { return s.UpdatedAt }
func (s InsertConfigurationVersionRow) GetAutoQueueRuns() *bool { return s.AutoQueueRuns }
func (s InsertConfigurationVersionRow) GetSource() *string { return s.Source }
func (s InsertConfigurationVersionRow) GetSpeculative() *bool { return s.Speculative }
func (s InsertConfigurationVersionRow) GetStatus() *string { return s.Status }
func (s InsertConfigurationVersionRow) GetConfig() []byte { return s.Config }
func (s InsertConfigurationVersionRow) GetWorkspaceID() *string { return s.WorkspaceID }


// InsertConfigurationVersion implements Querier.InsertConfigurationVersion.
func (q *DBQuerier) InsertConfigurationVersion(ctx context.Context, params InsertConfigurationVersionParams) (InsertConfigurationVersionRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertConfigurationVersion")
	row := q.conn.QueryRow(ctx, insertConfigurationVersionSQL, params.ID, params.AutoQueueRuns, params.Source, params.Speculative, params.Status, params.WorkspaceID)
	var item InsertConfigurationVersionRow
	if err := row.Scan(&item.ConfigurationVersionID, &item.CreatedAt, &item.UpdatedAt, &item.AutoQueueRuns, &item.Source, &item.Speculative, &item.Status, &item.Config, &item.WorkspaceID); err != nil {
		return item, fmt.Errorf("query InsertConfigurationVersion: %w", err)
	}
	return item, nil
}

// InsertConfigurationVersionBatch implements Querier.InsertConfigurationVersionBatch.
func (q *DBQuerier) InsertConfigurationVersionBatch(batch genericBatch, params InsertConfigurationVersionParams) {
	batch.Queue(insertConfigurationVersionSQL, params.ID, params.AutoQueueRuns, params.Source, params.Speculative, params.Status, params.WorkspaceID)
}

// InsertConfigurationVersionScan implements Querier.InsertConfigurationVersionScan.
func (q *DBQuerier) InsertConfigurationVersionScan(results pgx.BatchResults) (InsertConfigurationVersionRow, error) {
	row := results.QueryRow()
	var item InsertConfigurationVersionRow
	if err := row.Scan(&item.ConfigurationVersionID, &item.CreatedAt, &item.UpdatedAt, &item.AutoQueueRuns, &item.Source, &item.Speculative, &item.Status, &item.Config, &item.WorkspaceID); err != nil {
		return item, fmt.Errorf("scan InsertConfigurationVersionBatch row: %w", err)
	}
	return item, nil
}

const insertConfigurationVersionStatusTimestampSQL = `INSERT INTO configuration_version_status_timestamps (
    configuration_version_id,
    status,
    timestamp
) VALUES (
    $1,
    $2,
    NOW()
)
RETURNING *;`

type InsertConfigurationVersionStatusTimestampRow struct {
	ConfigurationVersionID *string   `json:"configuration_version_id"`
	Status                 *string   `json:"status"`
	Timestamp              time.Time `json:"timestamp"`
}

func (s InsertConfigurationVersionStatusTimestampRow) GetConfigurationVersionID() *string { return s.ConfigurationVersionID }
func (s InsertConfigurationVersionStatusTimestampRow) GetStatus() *string { return s.Status }
func (s InsertConfigurationVersionStatusTimestampRow) GetTimestamp() time.Time { return s.Timestamp }


// InsertConfigurationVersionStatusTimestamp implements Querier.InsertConfigurationVersionStatusTimestamp.
func (q *DBQuerier) InsertConfigurationVersionStatusTimestamp(ctx context.Context, id *string, status *string) (InsertConfigurationVersionStatusTimestampRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertConfigurationVersionStatusTimestamp")
	row := q.conn.QueryRow(ctx, insertConfigurationVersionStatusTimestampSQL, id, status)
	var item InsertConfigurationVersionStatusTimestampRow
	if err := row.Scan(&item.ConfigurationVersionID, &item.Status, &item.Timestamp); err != nil {
		return item, fmt.Errorf("query InsertConfigurationVersionStatusTimestamp: %w", err)
	}
	return item, nil
}

// InsertConfigurationVersionStatusTimestampBatch implements Querier.InsertConfigurationVersionStatusTimestampBatch.
func (q *DBQuerier) InsertConfigurationVersionStatusTimestampBatch(batch genericBatch, id *string, status *string) {
	batch.Queue(insertConfigurationVersionStatusTimestampSQL, id, status)
}

// InsertConfigurationVersionStatusTimestampScan implements Querier.InsertConfigurationVersionStatusTimestampScan.
func (q *DBQuerier) InsertConfigurationVersionStatusTimestampScan(results pgx.BatchResults) (InsertConfigurationVersionStatusTimestampRow, error) {
	row := results.QueryRow()
	var item InsertConfigurationVersionStatusTimestampRow
	if err := row.Scan(&item.ConfigurationVersionID, &item.Status, &item.Timestamp); err != nil {
		return item, fmt.Errorf("scan InsertConfigurationVersionStatusTimestampBatch row: %w", err)
	}
	return item, nil
}

const findConfigurationVersionsByWorkspaceIDSQL = `SELECT
    configuration_versions.configuration_version_id,
    configuration_versions.created_at,
    configuration_versions.updated_at,
    configuration_versions.auto_queue_runs,
    configuration_versions.source,
    configuration_versions.speculative,
    configuration_versions.status,
    (workspaces.*)::"workspaces" AS workspace,
    (
        SELECT array_agg(t.*) AS configuration_version_status_timestamps
        FROM configuration_version_status_timestamps t
        WHERE t.configuration_version_id = configuration_versions.configuration_version_id
        GROUP BY configuration_version_id
    ) AS configuration_version_status_timestamps,
    count(*) OVER() AS full_count
FROM configuration_versions
JOIN workspaces USING (workspace_id)
WHERE workspaces.workspace_id = $1
LIMIT $2
OFFSET $3;`

type FindConfigurationVersionsByWorkspaceIDParams struct {
	WorkspaceID *string
	Limit       int
	Offset      int
}

type FindConfigurationVersionsByWorkspaceIDRow struct {
	ConfigurationVersionID               *string                                `json:"configuration_version_id"`
	CreatedAt                            time.Time                              `json:"created_at"`
	UpdatedAt                            time.Time                              `json:"updated_at"`
	AutoQueueRuns                        *bool                                  `json:"auto_queue_runs"`
	Source                               *string                                `json:"source"`
	Speculative                          *bool                                  `json:"speculative"`
	Status                               *string                                `json:"status"`
	Workspace                            Workspaces                             `json:"workspace"`
	ConfigurationVersionStatusTimestamps []ConfigurationVersionStatusTimestamps `json:"configuration_version_status_timestamps"`
	FullCount                            *int                                   `json:"full_count"`
}

func (s FindConfigurationVersionsByWorkspaceIDRow) GetConfigurationVersionID() *string { return s.ConfigurationVersionID }
func (s FindConfigurationVersionsByWorkspaceIDRow) GetCreatedAt() time.Time { return s.CreatedAt }
func (s FindConfigurationVersionsByWorkspaceIDRow) GetUpdatedAt() time.Time { return s.UpdatedAt }
func (s FindConfigurationVersionsByWorkspaceIDRow) GetAutoQueueRuns() *bool { return s.AutoQueueRuns }
func (s FindConfigurationVersionsByWorkspaceIDRow) GetSource() *string { return s.Source }
func (s FindConfigurationVersionsByWorkspaceIDRow) GetSpeculative() *bool { return s.Speculative }
func (s FindConfigurationVersionsByWorkspaceIDRow) GetStatus() *string { return s.Status }
func (s FindConfigurationVersionsByWorkspaceIDRow) GetWorkspace() Workspaces { return s.Workspace }
func (s FindConfigurationVersionsByWorkspaceIDRow) GetConfigurationVersionStatusTimestamps() []ConfigurationVersionStatusTimestamps { return s.ConfigurationVersionStatusTimestamps }
func (s FindConfigurationVersionsByWorkspaceIDRow) GetFullCount() *int { return s.FullCount }


// FindConfigurationVersionsByWorkspaceID implements Querier.FindConfigurationVersionsByWorkspaceID.
func (q *DBQuerier) FindConfigurationVersionsByWorkspaceID(ctx context.Context, params FindConfigurationVersionsByWorkspaceIDParams) ([]FindConfigurationVersionsByWorkspaceIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindConfigurationVersionsByWorkspaceID")
	rows, err := q.conn.Query(ctx, findConfigurationVersionsByWorkspaceIDSQL, params.WorkspaceID, params.Limit, params.Offset)
	if err != nil {
		return nil, fmt.Errorf("query FindConfigurationVersionsByWorkspaceID: %w", err)
	}
	defer rows.Close()
	items := []FindConfigurationVersionsByWorkspaceIDRow{}
	workspaceRow := q.types.newWorkspaces()
	configurationVersionStatusTimestampsArray := q.types.newConfigurationVersionStatusTimestampsArray()
	for rows.Next() {
		var item FindConfigurationVersionsByWorkspaceIDRow
		if err := rows.Scan(&item.ConfigurationVersionID, &item.CreatedAt, &item.UpdatedAt, &item.AutoQueueRuns, &item.Source, &item.Speculative, &item.Status, workspaceRow, configurationVersionStatusTimestampsArray, &item.FullCount); err != nil {
			return nil, fmt.Errorf("scan FindConfigurationVersionsByWorkspaceID row: %w", err)
		}
		if err := workspaceRow.AssignTo(&item.Workspace); err != nil {
			return nil, fmt.Errorf("assign FindConfigurationVersionsByWorkspaceID row: %w", err)
		}
		if err := configurationVersionStatusTimestampsArray.AssignTo(&item.ConfigurationVersionStatusTimestamps); err != nil {
			return nil, fmt.Errorf("assign FindConfigurationVersionsByWorkspaceID row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindConfigurationVersionsByWorkspaceID rows: %w", err)
	}
	return items, err
}

// FindConfigurationVersionsByWorkspaceIDBatch implements Querier.FindConfigurationVersionsByWorkspaceIDBatch.
func (q *DBQuerier) FindConfigurationVersionsByWorkspaceIDBatch(batch genericBatch, params FindConfigurationVersionsByWorkspaceIDParams) {
	batch.Queue(findConfigurationVersionsByWorkspaceIDSQL, params.WorkspaceID, params.Limit, params.Offset)
}

// FindConfigurationVersionsByWorkspaceIDScan implements Querier.FindConfigurationVersionsByWorkspaceIDScan.
func (q *DBQuerier) FindConfigurationVersionsByWorkspaceIDScan(results pgx.BatchResults) ([]FindConfigurationVersionsByWorkspaceIDRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query FindConfigurationVersionsByWorkspaceIDBatch: %w", err)
	}
	defer rows.Close()
	items := []FindConfigurationVersionsByWorkspaceIDRow{}
	workspaceRow := q.types.newWorkspaces()
	configurationVersionStatusTimestampsArray := q.types.newConfigurationVersionStatusTimestampsArray()
	for rows.Next() {
		var item FindConfigurationVersionsByWorkspaceIDRow
		if err := rows.Scan(&item.ConfigurationVersionID, &item.CreatedAt, &item.UpdatedAt, &item.AutoQueueRuns, &item.Source, &item.Speculative, &item.Status, workspaceRow, configurationVersionStatusTimestampsArray, &item.FullCount); err != nil {
			return nil, fmt.Errorf("scan FindConfigurationVersionsByWorkspaceIDBatch row: %w", err)
		}
		if err := workspaceRow.AssignTo(&item.Workspace); err != nil {
			return nil, fmt.Errorf("assign FindConfigurationVersionsByWorkspaceID row: %w", err)
		}
		if err := configurationVersionStatusTimestampsArray.AssignTo(&item.ConfigurationVersionStatusTimestamps); err != nil {
			return nil, fmt.Errorf("assign FindConfigurationVersionsByWorkspaceID row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindConfigurationVersionsByWorkspaceIDBatch rows: %w", err)
	}
	return items, err
}

const findConfigurationVersionByIDSQL = `SELECT
    configuration_versions.configuration_version_id,
    configuration_versions.created_at,
    configuration_versions.updated_at,
    configuration_versions.auto_queue_runs,
    configuration_versions.source,
    configuration_versions.speculative,
    configuration_versions.status,
    (workspaces.*)::"workspaces" AS workspace,
    (
        SELECT array_agg(t.*) AS configuration_version_status_timestamps
        FROM configuration_version_status_timestamps t
        WHERE t.configuration_version_id = configuration_versions.configuration_version_id
        GROUP BY configuration_version_id
    ) AS configuration_version_status_timestamps
FROM configuration_versions
JOIN workspaces USING (workspace_id)
WHERE configuration_version_id = $1;`

type FindConfigurationVersionByIDRow struct {
	ConfigurationVersionID               *string                                `json:"configuration_version_id"`
	CreatedAt                            time.Time                              `json:"created_at"`
	UpdatedAt                            time.Time                              `json:"updated_at"`
	AutoQueueRuns                        *bool                                  `json:"auto_queue_runs"`
	Source                               *string                                `json:"source"`
	Speculative                          *bool                                  `json:"speculative"`
	Status                               *string                                `json:"status"`
	Workspace                            Workspaces                             `json:"workspace"`
	ConfigurationVersionStatusTimestamps []ConfigurationVersionStatusTimestamps `json:"configuration_version_status_timestamps"`
}

func (s FindConfigurationVersionByIDRow) GetConfigurationVersionID() *string { return s.ConfigurationVersionID }
func (s FindConfigurationVersionByIDRow) GetCreatedAt() time.Time { return s.CreatedAt }
func (s FindConfigurationVersionByIDRow) GetUpdatedAt() time.Time { return s.UpdatedAt }
func (s FindConfigurationVersionByIDRow) GetAutoQueueRuns() *bool { return s.AutoQueueRuns }
func (s FindConfigurationVersionByIDRow) GetSource() *string { return s.Source }
func (s FindConfigurationVersionByIDRow) GetSpeculative() *bool { return s.Speculative }
func (s FindConfigurationVersionByIDRow) GetStatus() *string { return s.Status }
func (s FindConfigurationVersionByIDRow) GetWorkspace() Workspaces { return s.Workspace }
func (s FindConfigurationVersionByIDRow) GetConfigurationVersionStatusTimestamps() []ConfigurationVersionStatusTimestamps { return s.ConfigurationVersionStatusTimestamps }


// FindConfigurationVersionByID implements Querier.FindConfigurationVersionByID.
func (q *DBQuerier) FindConfigurationVersionByID(ctx context.Context, configurationVersionID *string) (FindConfigurationVersionByIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindConfigurationVersionByID")
	row := q.conn.QueryRow(ctx, findConfigurationVersionByIDSQL, configurationVersionID)
	var item FindConfigurationVersionByIDRow
	workspaceRow := q.types.newWorkspaces()
	configurationVersionStatusTimestampsArray := q.types.newConfigurationVersionStatusTimestampsArray()
	if err := row.Scan(&item.ConfigurationVersionID, &item.CreatedAt, &item.UpdatedAt, &item.AutoQueueRuns, &item.Source, &item.Speculative, &item.Status, workspaceRow, configurationVersionStatusTimestampsArray); err != nil {
		return item, fmt.Errorf("query FindConfigurationVersionByID: %w", err)
	}
	if err := workspaceRow.AssignTo(&item.Workspace); err != nil {
		return item, fmt.Errorf("assign FindConfigurationVersionByID row: %w", err)
	}
	if err := configurationVersionStatusTimestampsArray.AssignTo(&item.ConfigurationVersionStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindConfigurationVersionByID row: %w", err)
	}
	return item, nil
}

// FindConfigurationVersionByIDBatch implements Querier.FindConfigurationVersionByIDBatch.
func (q *DBQuerier) FindConfigurationVersionByIDBatch(batch genericBatch, configurationVersionID *string) {
	batch.Queue(findConfigurationVersionByIDSQL, configurationVersionID)
}

// FindConfigurationVersionByIDScan implements Querier.FindConfigurationVersionByIDScan.
func (q *DBQuerier) FindConfigurationVersionByIDScan(results pgx.BatchResults) (FindConfigurationVersionByIDRow, error) {
	row := results.QueryRow()
	var item FindConfigurationVersionByIDRow
	workspaceRow := q.types.newWorkspaces()
	configurationVersionStatusTimestampsArray := q.types.newConfigurationVersionStatusTimestampsArray()
	if err := row.Scan(&item.ConfigurationVersionID, &item.CreatedAt, &item.UpdatedAt, &item.AutoQueueRuns, &item.Source, &item.Speculative, &item.Status, workspaceRow, configurationVersionStatusTimestampsArray); err != nil {
		return item, fmt.Errorf("scan FindConfigurationVersionByIDBatch row: %w", err)
	}
	if err := workspaceRow.AssignTo(&item.Workspace); err != nil {
		return item, fmt.Errorf("assign FindConfigurationVersionByID row: %w", err)
	}
	if err := configurationVersionStatusTimestampsArray.AssignTo(&item.ConfigurationVersionStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindConfigurationVersionByID row: %w", err)
	}
	return item, nil
}

const findConfigurationVersionLatestByWorkspaceIDSQL = `SELECT
    configuration_versions.configuration_version_id,
    configuration_versions.created_at,
    configuration_versions.updated_at,
    configuration_versions.auto_queue_runs,
    configuration_versions.source,
    configuration_versions.speculative,
    configuration_versions.status,
    (workspaces.*)::"workspaces" AS workspace,
    (
        SELECT array_agg(t.*) AS configuration_version_status_timestamps
        FROM configuration_version_status_timestamps t
        WHERE t.configuration_version_id = configuration_versions.configuration_version_id
        GROUP BY configuration_version_id
    ) AS configuration_version_status_timestamps
FROM configuration_versions
JOIN workspaces USING (workspace_id)
WHERE workspace_id = $1
ORDER BY configuration_versions.created_at DESC;`

type FindConfigurationVersionLatestByWorkspaceIDRow struct {
	ConfigurationVersionID               *string                                `json:"configuration_version_id"`
	CreatedAt                            time.Time                              `json:"created_at"`
	UpdatedAt                            time.Time                              `json:"updated_at"`
	AutoQueueRuns                        *bool                                  `json:"auto_queue_runs"`
	Source                               *string                                `json:"source"`
	Speculative                          *bool                                  `json:"speculative"`
	Status                               *string                                `json:"status"`
	Workspace                            Workspaces                             `json:"workspace"`
	ConfigurationVersionStatusTimestamps []ConfigurationVersionStatusTimestamps `json:"configuration_version_status_timestamps"`
}

func (s FindConfigurationVersionLatestByWorkspaceIDRow) GetConfigurationVersionID() *string { return s.ConfigurationVersionID }
func (s FindConfigurationVersionLatestByWorkspaceIDRow) GetCreatedAt() time.Time { return s.CreatedAt }
func (s FindConfigurationVersionLatestByWorkspaceIDRow) GetUpdatedAt() time.Time { return s.UpdatedAt }
func (s FindConfigurationVersionLatestByWorkspaceIDRow) GetAutoQueueRuns() *bool { return s.AutoQueueRuns }
func (s FindConfigurationVersionLatestByWorkspaceIDRow) GetSource() *string { return s.Source }
func (s FindConfigurationVersionLatestByWorkspaceIDRow) GetSpeculative() *bool { return s.Speculative }
func (s FindConfigurationVersionLatestByWorkspaceIDRow) GetStatus() *string { return s.Status }
func (s FindConfigurationVersionLatestByWorkspaceIDRow) GetWorkspace() Workspaces { return s.Workspace }
func (s FindConfigurationVersionLatestByWorkspaceIDRow) GetConfigurationVersionStatusTimestamps() []ConfigurationVersionStatusTimestamps { return s.ConfigurationVersionStatusTimestamps }


// FindConfigurationVersionLatestByWorkspaceID implements Querier.FindConfigurationVersionLatestByWorkspaceID.
func (q *DBQuerier) FindConfigurationVersionLatestByWorkspaceID(ctx context.Context, workspaceID *string) (FindConfigurationVersionLatestByWorkspaceIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindConfigurationVersionLatestByWorkspaceID")
	row := q.conn.QueryRow(ctx, findConfigurationVersionLatestByWorkspaceIDSQL, workspaceID)
	var item FindConfigurationVersionLatestByWorkspaceIDRow
	workspaceRow := q.types.newWorkspaces()
	configurationVersionStatusTimestampsArray := q.types.newConfigurationVersionStatusTimestampsArray()
	if err := row.Scan(&item.ConfigurationVersionID, &item.CreatedAt, &item.UpdatedAt, &item.AutoQueueRuns, &item.Source, &item.Speculative, &item.Status, workspaceRow, configurationVersionStatusTimestampsArray); err != nil {
		return item, fmt.Errorf("query FindConfigurationVersionLatestByWorkspaceID: %w", err)
	}
	if err := workspaceRow.AssignTo(&item.Workspace); err != nil {
		return item, fmt.Errorf("assign FindConfigurationVersionLatestByWorkspaceID row: %w", err)
	}
	if err := configurationVersionStatusTimestampsArray.AssignTo(&item.ConfigurationVersionStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindConfigurationVersionLatestByWorkspaceID row: %w", err)
	}
	return item, nil
}

// FindConfigurationVersionLatestByWorkspaceIDBatch implements Querier.FindConfigurationVersionLatestByWorkspaceIDBatch.
func (q *DBQuerier) FindConfigurationVersionLatestByWorkspaceIDBatch(batch genericBatch, workspaceID *string) {
	batch.Queue(findConfigurationVersionLatestByWorkspaceIDSQL, workspaceID)
}

// FindConfigurationVersionLatestByWorkspaceIDScan implements Querier.FindConfigurationVersionLatestByWorkspaceIDScan.
func (q *DBQuerier) FindConfigurationVersionLatestByWorkspaceIDScan(results pgx.BatchResults) (FindConfigurationVersionLatestByWorkspaceIDRow, error) {
	row := results.QueryRow()
	var item FindConfigurationVersionLatestByWorkspaceIDRow
	workspaceRow := q.types.newWorkspaces()
	configurationVersionStatusTimestampsArray := q.types.newConfigurationVersionStatusTimestampsArray()
	if err := row.Scan(&item.ConfigurationVersionID, &item.CreatedAt, &item.UpdatedAt, &item.AutoQueueRuns, &item.Source, &item.Speculative, &item.Status, workspaceRow, configurationVersionStatusTimestampsArray); err != nil {
		return item, fmt.Errorf("scan FindConfigurationVersionLatestByWorkspaceIDBatch row: %w", err)
	}
	if err := workspaceRow.AssignTo(&item.Workspace); err != nil {
		return item, fmt.Errorf("assign FindConfigurationVersionLatestByWorkspaceID row: %w", err)
	}
	if err := configurationVersionStatusTimestampsArray.AssignTo(&item.ConfigurationVersionStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindConfigurationVersionLatestByWorkspaceID row: %w", err)
	}
	return item, nil
}

const findConfigurationVersionByIDForUpdateSQL = `SELECT
    configuration_versions.configuration_version_id,
    configuration_versions.created_at,
    configuration_versions.updated_at,
    configuration_versions.auto_queue_runs,
    configuration_versions.source,
    configuration_versions.speculative,
    configuration_versions.status,
    (workspaces.*)::"workspaces" AS workspace,
    (
        SELECT array_agg(t.*) AS configuration_version_status_timestamps
        FROM configuration_version_status_timestamps t
        WHERE t.configuration_version_id = configuration_versions.configuration_version_id
        GROUP BY configuration_version_id
    ) AS configuration_version_status_timestamps
FROM configuration_versions
JOIN workspaces USING (workspace_id)
WHERE configuration_version_id = $1
FOR UPDATE;`

type FindConfigurationVersionByIDForUpdateRow struct {
	ConfigurationVersionID               *string                                `json:"configuration_version_id"`
	CreatedAt                            time.Time                              `json:"created_at"`
	UpdatedAt                            time.Time                              `json:"updated_at"`
	AutoQueueRuns                        *bool                                  `json:"auto_queue_runs"`
	Source                               *string                                `json:"source"`
	Speculative                          *bool                                  `json:"speculative"`
	Status                               *string                                `json:"status"`
	Workspace                            Workspaces                             `json:"workspace"`
	ConfigurationVersionStatusTimestamps []ConfigurationVersionStatusTimestamps `json:"configuration_version_status_timestamps"`
}

func (s FindConfigurationVersionByIDForUpdateRow) GetConfigurationVersionID() *string { return s.ConfigurationVersionID }
func (s FindConfigurationVersionByIDForUpdateRow) GetCreatedAt() time.Time { return s.CreatedAt }
func (s FindConfigurationVersionByIDForUpdateRow) GetUpdatedAt() time.Time { return s.UpdatedAt }
func (s FindConfigurationVersionByIDForUpdateRow) GetAutoQueueRuns() *bool { return s.AutoQueueRuns }
func (s FindConfigurationVersionByIDForUpdateRow) GetSource() *string { return s.Source }
func (s FindConfigurationVersionByIDForUpdateRow) GetSpeculative() *bool { return s.Speculative }
func (s FindConfigurationVersionByIDForUpdateRow) GetStatus() *string { return s.Status }
func (s FindConfigurationVersionByIDForUpdateRow) GetWorkspace() Workspaces { return s.Workspace }
func (s FindConfigurationVersionByIDForUpdateRow) GetConfigurationVersionStatusTimestamps() []ConfigurationVersionStatusTimestamps { return s.ConfigurationVersionStatusTimestamps }


// FindConfigurationVersionByIDForUpdate implements Querier.FindConfigurationVersionByIDForUpdate.
func (q *DBQuerier) FindConfigurationVersionByIDForUpdate(ctx context.Context, configurationVersionID *string) (FindConfigurationVersionByIDForUpdateRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindConfigurationVersionByIDForUpdate")
	row := q.conn.QueryRow(ctx, findConfigurationVersionByIDForUpdateSQL, configurationVersionID)
	var item FindConfigurationVersionByIDForUpdateRow
	workspaceRow := q.types.newWorkspaces()
	configurationVersionStatusTimestampsArray := q.types.newConfigurationVersionStatusTimestampsArray()
	if err := row.Scan(&item.ConfigurationVersionID, &item.CreatedAt, &item.UpdatedAt, &item.AutoQueueRuns, &item.Source, &item.Speculative, &item.Status, workspaceRow, configurationVersionStatusTimestampsArray); err != nil {
		return item, fmt.Errorf("query FindConfigurationVersionByIDForUpdate: %w", err)
	}
	if err := workspaceRow.AssignTo(&item.Workspace); err != nil {
		return item, fmt.Errorf("assign FindConfigurationVersionByIDForUpdate row: %w", err)
	}
	if err := configurationVersionStatusTimestampsArray.AssignTo(&item.ConfigurationVersionStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindConfigurationVersionByIDForUpdate row: %w", err)
	}
	return item, nil
}

// FindConfigurationVersionByIDForUpdateBatch implements Querier.FindConfigurationVersionByIDForUpdateBatch.
func (q *DBQuerier) FindConfigurationVersionByIDForUpdateBatch(batch genericBatch, configurationVersionID *string) {
	batch.Queue(findConfigurationVersionByIDForUpdateSQL, configurationVersionID)
}

// FindConfigurationVersionByIDForUpdateScan implements Querier.FindConfigurationVersionByIDForUpdateScan.
func (q *DBQuerier) FindConfigurationVersionByIDForUpdateScan(results pgx.BatchResults) (FindConfigurationVersionByIDForUpdateRow, error) {
	row := results.QueryRow()
	var item FindConfigurationVersionByIDForUpdateRow
	workspaceRow := q.types.newWorkspaces()
	configurationVersionStatusTimestampsArray := q.types.newConfigurationVersionStatusTimestampsArray()
	if err := row.Scan(&item.ConfigurationVersionID, &item.CreatedAt, &item.UpdatedAt, &item.AutoQueueRuns, &item.Source, &item.Speculative, &item.Status, workspaceRow, configurationVersionStatusTimestampsArray); err != nil {
		return item, fmt.Errorf("scan FindConfigurationVersionByIDForUpdateBatch row: %w", err)
	}
	if err := workspaceRow.AssignTo(&item.Workspace); err != nil {
		return item, fmt.Errorf("assign FindConfigurationVersionByIDForUpdate row: %w", err)
	}
	if err := configurationVersionStatusTimestampsArray.AssignTo(&item.ConfigurationVersionStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindConfigurationVersionByIDForUpdate row: %w", err)
	}
	return item, nil
}

const downloadConfigurationVersionSQL = `SELECT config
FROM configuration_versions
WHERE configuration_version_id = $1;`

// DownloadConfigurationVersion implements Querier.DownloadConfigurationVersion.
func (q *DBQuerier) DownloadConfigurationVersion(ctx context.Context, configurationVersionID *string) ([]byte, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DownloadConfigurationVersion")
	row := q.conn.QueryRow(ctx, downloadConfigurationVersionSQL, configurationVersionID)
	item := []byte{}
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query DownloadConfigurationVersion: %w", err)
	}
	return item, nil
}

// DownloadConfigurationVersionBatch implements Querier.DownloadConfigurationVersionBatch.
func (q *DBQuerier) DownloadConfigurationVersionBatch(batch genericBatch, configurationVersionID *string) {
	batch.Queue(downloadConfigurationVersionSQL, configurationVersionID)
}

// DownloadConfigurationVersionScan implements Querier.DownloadConfigurationVersionScan.
func (q *DBQuerier) DownloadConfigurationVersionScan(results pgx.BatchResults) ([]byte, error) {
	row := results.QueryRow()
	item := []byte{}
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan DownloadConfigurationVersionBatch row: %w", err)
	}
	return item, nil
}

const updateConfigurationVersionStatusSQL = `UPDATE configuration_versions
SET
    status = $1,
    updated_at = NOW()
WHERE configuration_version_id = $2;`

// UpdateConfigurationVersionStatus implements Querier.UpdateConfigurationVersionStatus.
func (q *DBQuerier) UpdateConfigurationVersionStatus(ctx context.Context, status *string, id *string) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateConfigurationVersionStatus")
	cmdTag, err := q.conn.Exec(ctx, updateConfigurationVersionStatusSQL, status, id)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query UpdateConfigurationVersionStatus: %w", err)
	}
	return cmdTag, err
}

// UpdateConfigurationVersionStatusBatch implements Querier.UpdateConfigurationVersionStatusBatch.
func (q *DBQuerier) UpdateConfigurationVersionStatusBatch(batch genericBatch, status *string, id *string) {
	batch.Queue(updateConfigurationVersionStatusSQL, status, id)
}

// UpdateConfigurationVersionStatusScan implements Querier.UpdateConfigurationVersionStatusScan.
func (q *DBQuerier) UpdateConfigurationVersionStatusScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec UpdateConfigurationVersionStatusBatch: %w", err)
	}
	return cmdTag, err
}

const updateConfigurationVersionConfigSQL = `UPDATE configuration_versions
SET
    config = $1,
    updated_at = NOW()
WHERE configuration_version_id = $2;`

// UpdateConfigurationVersionConfig implements Querier.UpdateConfigurationVersionConfig.
func (q *DBQuerier) UpdateConfigurationVersionConfig(ctx context.Context, config []byte, id *string) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateConfigurationVersionConfig")
	cmdTag, err := q.conn.Exec(ctx, updateConfigurationVersionConfigSQL, config, id)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query UpdateConfigurationVersionConfig: %w", err)
	}
	return cmdTag, err
}

// UpdateConfigurationVersionConfigBatch implements Querier.UpdateConfigurationVersionConfigBatch.
func (q *DBQuerier) UpdateConfigurationVersionConfigBatch(batch genericBatch, config []byte, id *string) {
	batch.Queue(updateConfigurationVersionConfigSQL, config, id)
}

// UpdateConfigurationVersionConfigScan implements Querier.UpdateConfigurationVersionConfigScan.
func (q *DBQuerier) UpdateConfigurationVersionConfigScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec UpdateConfigurationVersionConfigBatch: %w", err)
	}
	return cmdTag, err
}

const deleteConfigurationVersionByIDSQL = `DELETE
FROM configuration_versions
WHERE configuration_version_id = $1;`

// DeleteConfigurationVersionByID implements Querier.DeleteConfigurationVersionByID.
func (q *DBQuerier) DeleteConfigurationVersionByID(ctx context.Context, id *string) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteConfigurationVersionByID")
	cmdTag, err := q.conn.Exec(ctx, deleteConfigurationVersionByIDSQL, id)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query DeleteConfigurationVersionByID: %w", err)
	}
	return cmdTag, err
}

// DeleteConfigurationVersionByIDBatch implements Querier.DeleteConfigurationVersionByIDBatch.
func (q *DBQuerier) DeleteConfigurationVersionByIDBatch(batch genericBatch, id *string) {
	batch.Queue(deleteConfigurationVersionByIDSQL, id)
}

// DeleteConfigurationVersionByIDScan implements Querier.DeleteConfigurationVersionByIDScan.
func (q *DBQuerier) DeleteConfigurationVersionByIDScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec DeleteConfigurationVersionByIDBatch: %w", err)
	}
	return cmdTag, err
}
