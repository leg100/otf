// Code generated by pggen. DO NOT EDIT.

package sql

import (
	"context"
	"fmt"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgx/v4"
	"time"
)

const insertWorkspaceSQL = `INSERT INTO workspaces (
    workspace_id,
    created_at,
    updated_at,
    allow_destroy_plan,
    auto_apply,
    can_queue_destroy_plan,
    description,
    environment,
    execution_mode,
    file_triggers_enabled,
    global_remote_state,
    locked,
    migration_environment,
    name,
    queue_all_runs,
    speculative_enabled,
    source_name,
    source_url,
    structured_run_output_enabled,
    terraform_version,
    trigger_prefixes,
    working_directory,
    organization_id
) VALUES (
    $1,
    NOW(),
    NOW(),
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
    $20,
    $21
)
RETURNING *;`

type InsertWorkspaceParams struct {
	ID                         *string
	AllowDestroyPlan           *bool
	AutoApply                  *bool
	CanQueueDestroyPlan        *bool
	Description                *string
	Environment                *string
	ExecutionMode              *string
	FileTriggersEnabled        *bool
	GlobalRemoteState          *bool
	Locked                     *bool
	MigrationEnvironment       *string
	Name                       *string
	QueueAllRuns               *bool
	SpeculativeEnabled         *bool
	SourceName                 *string
	SourceUrl                  *string
	StructuredRunOutputEnabled *bool
	TerraformVersion           *string
	TriggerPrefixes            []string
	WorkingDirectory           *string
	OrganizationID             *string
}

type InsertWorkspaceRow struct {
	WorkspaceID                *string   `json:"workspace_id"`
	CreatedAt                  time.Time `json:"created_at"`
	UpdatedAt                  time.Time `json:"updated_at"`
	AllowDestroyPlan           *bool     `json:"allow_destroy_plan"`
	AutoApply                  *bool     `json:"auto_apply"`
	CanQueueDestroyPlan        *bool     `json:"can_queue_destroy_plan"`
	Description                *string   `json:"description"`
	Environment                *string   `json:"environment"`
	ExecutionMode              *string   `json:"execution_mode"`
	FileTriggersEnabled        *bool     `json:"file_triggers_enabled"`
	GlobalRemoteState          *bool     `json:"global_remote_state"`
	Locked                     *bool     `json:"locked"`
	MigrationEnvironment       *string   `json:"migration_environment"`
	Name                       *string   `json:"name"`
	QueueAllRuns               *bool     `json:"queue_all_runs"`
	SpeculativeEnabled         *bool     `json:"speculative_enabled"`
	SourceName                 *string   `json:"source_name"`
	SourceUrl                  *string   `json:"source_url"`
	StructuredRunOutputEnabled *bool     `json:"structured_run_output_enabled"`
	TerraformVersion           *string   `json:"terraform_version"`
	TriggerPrefixes            []string  `json:"trigger_prefixes"`
	WorkingDirectory           *string   `json:"working_directory"`
	OrganizationID             *string   `json:"organization_id"`
}

func (s InsertWorkspaceRow) GetWorkspaceID() *string { return s.WorkspaceID }
func (s InsertWorkspaceRow) GetCreatedAt() time.Time { return s.CreatedAt }
func (s InsertWorkspaceRow) GetUpdatedAt() time.Time { return s.UpdatedAt }
func (s InsertWorkspaceRow) GetAllowDestroyPlan() *bool { return s.AllowDestroyPlan }
func (s InsertWorkspaceRow) GetAutoApply() *bool { return s.AutoApply }
func (s InsertWorkspaceRow) GetCanQueueDestroyPlan() *bool { return s.CanQueueDestroyPlan }
func (s InsertWorkspaceRow) GetDescription() *string { return s.Description }
func (s InsertWorkspaceRow) GetEnvironment() *string { return s.Environment }
func (s InsertWorkspaceRow) GetExecutionMode() *string { return s.ExecutionMode }
func (s InsertWorkspaceRow) GetFileTriggersEnabled() *bool { return s.FileTriggersEnabled }
func (s InsertWorkspaceRow) GetGlobalRemoteState() *bool { return s.GlobalRemoteState }
func (s InsertWorkspaceRow) GetLocked() *bool { return s.Locked }
func (s InsertWorkspaceRow) GetMigrationEnvironment() *string { return s.MigrationEnvironment }
func (s InsertWorkspaceRow) GetName() *string { return s.Name }
func (s InsertWorkspaceRow) GetQueueAllRuns() *bool { return s.QueueAllRuns }
func (s InsertWorkspaceRow) GetSpeculativeEnabled() *bool { return s.SpeculativeEnabled }
func (s InsertWorkspaceRow) GetSourceName() *string { return s.SourceName }
func (s InsertWorkspaceRow) GetSourceUrl() *string { return s.SourceUrl }
func (s InsertWorkspaceRow) GetStructuredRunOutputEnabled() *bool { return s.StructuredRunOutputEnabled }
func (s InsertWorkspaceRow) GetTerraformVersion() *string { return s.TerraformVersion }
func (s InsertWorkspaceRow) GetTriggerPrefixes() []string { return s.TriggerPrefixes }
func (s InsertWorkspaceRow) GetWorkingDirectory() *string { return s.WorkingDirectory }
func (s InsertWorkspaceRow) GetOrganizationID() *string { return s.OrganizationID }


// InsertWorkspace implements Querier.InsertWorkspace.
func (q *DBQuerier) InsertWorkspace(ctx context.Context, params InsertWorkspaceParams) (InsertWorkspaceRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertWorkspace")
	row := q.conn.QueryRow(ctx, insertWorkspaceSQL, params.ID, params.AllowDestroyPlan, params.AutoApply, params.CanQueueDestroyPlan, params.Description, params.Environment, params.ExecutionMode, params.FileTriggersEnabled, params.GlobalRemoteState, params.Locked, params.MigrationEnvironment, params.Name, params.QueueAllRuns, params.SpeculativeEnabled, params.SourceName, params.SourceUrl, params.StructuredRunOutputEnabled, params.TerraformVersion, params.TriggerPrefixes, params.WorkingDirectory, params.OrganizationID)
	var item InsertWorkspaceRow
	if err := row.Scan(&item.WorkspaceID, &item.CreatedAt, &item.UpdatedAt, &item.AllowDestroyPlan, &item.AutoApply, &item.CanQueueDestroyPlan, &item.Description, &item.Environment, &item.ExecutionMode, &item.FileTriggersEnabled, &item.GlobalRemoteState, &item.Locked, &item.MigrationEnvironment, &item.Name, &item.QueueAllRuns, &item.SpeculativeEnabled, &item.SourceName, &item.SourceUrl, &item.StructuredRunOutputEnabled, &item.TerraformVersion, &item.TriggerPrefixes, &item.WorkingDirectory, &item.OrganizationID); err != nil {
		return item, fmt.Errorf("query InsertWorkspace: %w", err)
	}
	return item, nil
}

// InsertWorkspaceBatch implements Querier.InsertWorkspaceBatch.
func (q *DBQuerier) InsertWorkspaceBatch(batch genericBatch, params InsertWorkspaceParams) {
	batch.Queue(insertWorkspaceSQL, params.ID, params.AllowDestroyPlan, params.AutoApply, params.CanQueueDestroyPlan, params.Description, params.Environment, params.ExecutionMode, params.FileTriggersEnabled, params.GlobalRemoteState, params.Locked, params.MigrationEnvironment, params.Name, params.QueueAllRuns, params.SpeculativeEnabled, params.SourceName, params.SourceUrl, params.StructuredRunOutputEnabled, params.TerraformVersion, params.TriggerPrefixes, params.WorkingDirectory, params.OrganizationID)
}

// InsertWorkspaceScan implements Querier.InsertWorkspaceScan.
func (q *DBQuerier) InsertWorkspaceScan(results pgx.BatchResults) (InsertWorkspaceRow, error) {
	row := results.QueryRow()
	var item InsertWorkspaceRow
	if err := row.Scan(&item.WorkspaceID, &item.CreatedAt, &item.UpdatedAt, &item.AllowDestroyPlan, &item.AutoApply, &item.CanQueueDestroyPlan, &item.Description, &item.Environment, &item.ExecutionMode, &item.FileTriggersEnabled, &item.GlobalRemoteState, &item.Locked, &item.MigrationEnvironment, &item.Name, &item.QueueAllRuns, &item.SpeculativeEnabled, &item.SourceName, &item.SourceUrl, &item.StructuredRunOutputEnabled, &item.TerraformVersion, &item.TriggerPrefixes, &item.WorkingDirectory, &item.OrganizationID); err != nil {
		return item, fmt.Errorf("scan InsertWorkspaceBatch row: %w", err)
	}
	return item, nil
}

const findWorkspacesSQL = `SELECT workspaces.*, (organizations.*)::"organizations" AS organization, count(*) OVER() AS full_count
FROM workspaces
JOIN organizations USING (organization_id)
WHERE workspaces.name LIKE $1 || '%'
AND organizations.name = $2
LIMIT $3
OFFSET $4
;`

type FindWorkspacesParams struct {
	Prefix           *string
	OrganizationName *string
	Limit            int
	Offset           int
}

type FindWorkspacesRow struct {
	WorkspaceID                *string       `json:"workspace_id"`
	CreatedAt                  time.Time     `json:"created_at"`
	UpdatedAt                  time.Time     `json:"updated_at"`
	AllowDestroyPlan           *bool         `json:"allow_destroy_plan"`
	AutoApply                  *bool         `json:"auto_apply"`
	CanQueueDestroyPlan        *bool         `json:"can_queue_destroy_plan"`
	Description                *string       `json:"description"`
	Environment                *string       `json:"environment"`
	ExecutionMode              *string       `json:"execution_mode"`
	FileTriggersEnabled        *bool         `json:"file_triggers_enabled"`
	GlobalRemoteState          *bool         `json:"global_remote_state"`
	Locked                     *bool         `json:"locked"`
	MigrationEnvironment       *string       `json:"migration_environment"`
	Name                       *string       `json:"name"`
	QueueAllRuns               *bool         `json:"queue_all_runs"`
	SpeculativeEnabled         *bool         `json:"speculative_enabled"`
	SourceName                 *string       `json:"source_name"`
	SourceUrl                  *string       `json:"source_url"`
	StructuredRunOutputEnabled *bool         `json:"structured_run_output_enabled"`
	TerraformVersion           *string       `json:"terraform_version"`
	TriggerPrefixes            []string      `json:"trigger_prefixes"`
	WorkingDirectory           *string       `json:"working_directory"`
	OrganizationID             *string       `json:"organization_id"`
	Organization               Organizations `json:"organization"`
	FullCount                  *int          `json:"full_count"`
}

func (s FindWorkspacesRow) GetWorkspaceID() *string { return s.WorkspaceID }
func (s FindWorkspacesRow) GetCreatedAt() time.Time { return s.CreatedAt }
func (s FindWorkspacesRow) GetUpdatedAt() time.Time { return s.UpdatedAt }
func (s FindWorkspacesRow) GetAllowDestroyPlan() *bool { return s.AllowDestroyPlan }
func (s FindWorkspacesRow) GetAutoApply() *bool { return s.AutoApply }
func (s FindWorkspacesRow) GetCanQueueDestroyPlan() *bool { return s.CanQueueDestroyPlan }
func (s FindWorkspacesRow) GetDescription() *string { return s.Description }
func (s FindWorkspacesRow) GetEnvironment() *string { return s.Environment }
func (s FindWorkspacesRow) GetExecutionMode() *string { return s.ExecutionMode }
func (s FindWorkspacesRow) GetFileTriggersEnabled() *bool { return s.FileTriggersEnabled }
func (s FindWorkspacesRow) GetGlobalRemoteState() *bool { return s.GlobalRemoteState }
func (s FindWorkspacesRow) GetLocked() *bool { return s.Locked }
func (s FindWorkspacesRow) GetMigrationEnvironment() *string { return s.MigrationEnvironment }
func (s FindWorkspacesRow) GetName() *string { return s.Name }
func (s FindWorkspacesRow) GetQueueAllRuns() *bool { return s.QueueAllRuns }
func (s FindWorkspacesRow) GetSpeculativeEnabled() *bool { return s.SpeculativeEnabled }
func (s FindWorkspacesRow) GetSourceName() *string { return s.SourceName }
func (s FindWorkspacesRow) GetSourceUrl() *string { return s.SourceUrl }
func (s FindWorkspacesRow) GetStructuredRunOutputEnabled() *bool { return s.StructuredRunOutputEnabled }
func (s FindWorkspacesRow) GetTerraformVersion() *string { return s.TerraformVersion }
func (s FindWorkspacesRow) GetTriggerPrefixes() []string { return s.TriggerPrefixes }
func (s FindWorkspacesRow) GetWorkingDirectory() *string { return s.WorkingDirectory }
func (s FindWorkspacesRow) GetOrganizationID() *string { return s.OrganizationID }
func (s FindWorkspacesRow) GetOrganization() Organizations { return s.Organization }
func (s FindWorkspacesRow) GetFullCount() *int { return s.FullCount }


// FindWorkspaces implements Querier.FindWorkspaces.
func (q *DBQuerier) FindWorkspaces(ctx context.Context, params FindWorkspacesParams) ([]FindWorkspacesRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindWorkspaces")
	rows, err := q.conn.Query(ctx, findWorkspacesSQL, params.Prefix, params.OrganizationName, params.Limit, params.Offset)
	if err != nil {
		return nil, fmt.Errorf("query FindWorkspaces: %w", err)
	}
	defer rows.Close()
	items := []FindWorkspacesRow{}
	organizationRow := q.types.newOrganizations()
	for rows.Next() {
		var item FindWorkspacesRow
		if err := rows.Scan(&item.WorkspaceID, &item.CreatedAt, &item.UpdatedAt, &item.AllowDestroyPlan, &item.AutoApply, &item.CanQueueDestroyPlan, &item.Description, &item.Environment, &item.ExecutionMode, &item.FileTriggersEnabled, &item.GlobalRemoteState, &item.Locked, &item.MigrationEnvironment, &item.Name, &item.QueueAllRuns, &item.SpeculativeEnabled, &item.SourceName, &item.SourceUrl, &item.StructuredRunOutputEnabled, &item.TerraformVersion, &item.TriggerPrefixes, &item.WorkingDirectory, &item.OrganizationID, organizationRow, &item.FullCount); err != nil {
			return nil, fmt.Errorf("scan FindWorkspaces row: %w", err)
		}
		if err := organizationRow.AssignTo(&item.Organization); err != nil {
			return nil, fmt.Errorf("assign FindWorkspaces row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindWorkspaces rows: %w", err)
	}
	return items, err
}

// FindWorkspacesBatch implements Querier.FindWorkspacesBatch.
func (q *DBQuerier) FindWorkspacesBatch(batch genericBatch, params FindWorkspacesParams) {
	batch.Queue(findWorkspacesSQL, params.Prefix, params.OrganizationName, params.Limit, params.Offset)
}

// FindWorkspacesScan implements Querier.FindWorkspacesScan.
func (q *DBQuerier) FindWorkspacesScan(results pgx.BatchResults) ([]FindWorkspacesRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query FindWorkspacesBatch: %w", err)
	}
	defer rows.Close()
	items := []FindWorkspacesRow{}
	organizationRow := q.types.newOrganizations()
	for rows.Next() {
		var item FindWorkspacesRow
		if err := rows.Scan(&item.WorkspaceID, &item.CreatedAt, &item.UpdatedAt, &item.AllowDestroyPlan, &item.AutoApply, &item.CanQueueDestroyPlan, &item.Description, &item.Environment, &item.ExecutionMode, &item.FileTriggersEnabled, &item.GlobalRemoteState, &item.Locked, &item.MigrationEnvironment, &item.Name, &item.QueueAllRuns, &item.SpeculativeEnabled, &item.SourceName, &item.SourceUrl, &item.StructuredRunOutputEnabled, &item.TerraformVersion, &item.TriggerPrefixes, &item.WorkingDirectory, &item.OrganizationID, organizationRow, &item.FullCount); err != nil {
			return nil, fmt.Errorf("scan FindWorkspacesBatch row: %w", err)
		}
		if err := organizationRow.AssignTo(&item.Organization); err != nil {
			return nil, fmt.Errorf("assign FindWorkspaces row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindWorkspacesBatch rows: %w", err)
	}
	return items, err
}

const findWorkspaceByNameSQL = `SELECT workspaces.*, (organizations.*)::"organizations" AS organization
FROM workspaces
JOIN organizations USING (organization_id)
WHERE workspaces.name = $1
AND organizations.name = $2;`

type FindWorkspaceByNameRow struct {
	WorkspaceID                *string       `json:"workspace_id"`
	CreatedAt                  time.Time     `json:"created_at"`
	UpdatedAt                  time.Time     `json:"updated_at"`
	AllowDestroyPlan           *bool         `json:"allow_destroy_plan"`
	AutoApply                  *bool         `json:"auto_apply"`
	CanQueueDestroyPlan        *bool         `json:"can_queue_destroy_plan"`
	Description                *string       `json:"description"`
	Environment                *string       `json:"environment"`
	ExecutionMode              *string       `json:"execution_mode"`
	FileTriggersEnabled        *bool         `json:"file_triggers_enabled"`
	GlobalRemoteState          *bool         `json:"global_remote_state"`
	Locked                     *bool         `json:"locked"`
	MigrationEnvironment       *string       `json:"migration_environment"`
	Name                       *string       `json:"name"`
	QueueAllRuns               *bool         `json:"queue_all_runs"`
	SpeculativeEnabled         *bool         `json:"speculative_enabled"`
	SourceName                 *string       `json:"source_name"`
	SourceUrl                  *string       `json:"source_url"`
	StructuredRunOutputEnabled *bool         `json:"structured_run_output_enabled"`
	TerraformVersion           *string       `json:"terraform_version"`
	TriggerPrefixes            []string      `json:"trigger_prefixes"`
	WorkingDirectory           *string       `json:"working_directory"`
	OrganizationID             *string       `json:"organization_id"`
	Organization               Organizations `json:"organization"`
}

func (s FindWorkspaceByNameRow) GetWorkspaceID() *string { return s.WorkspaceID }
func (s FindWorkspaceByNameRow) GetCreatedAt() time.Time { return s.CreatedAt }
func (s FindWorkspaceByNameRow) GetUpdatedAt() time.Time { return s.UpdatedAt }
func (s FindWorkspaceByNameRow) GetAllowDestroyPlan() *bool { return s.AllowDestroyPlan }
func (s FindWorkspaceByNameRow) GetAutoApply() *bool { return s.AutoApply }
func (s FindWorkspaceByNameRow) GetCanQueueDestroyPlan() *bool { return s.CanQueueDestroyPlan }
func (s FindWorkspaceByNameRow) GetDescription() *string { return s.Description }
func (s FindWorkspaceByNameRow) GetEnvironment() *string { return s.Environment }
func (s FindWorkspaceByNameRow) GetExecutionMode() *string { return s.ExecutionMode }
func (s FindWorkspaceByNameRow) GetFileTriggersEnabled() *bool { return s.FileTriggersEnabled }
func (s FindWorkspaceByNameRow) GetGlobalRemoteState() *bool { return s.GlobalRemoteState }
func (s FindWorkspaceByNameRow) GetLocked() *bool { return s.Locked }
func (s FindWorkspaceByNameRow) GetMigrationEnvironment() *string { return s.MigrationEnvironment }
func (s FindWorkspaceByNameRow) GetName() *string { return s.Name }
func (s FindWorkspaceByNameRow) GetQueueAllRuns() *bool { return s.QueueAllRuns }
func (s FindWorkspaceByNameRow) GetSpeculativeEnabled() *bool { return s.SpeculativeEnabled }
func (s FindWorkspaceByNameRow) GetSourceName() *string { return s.SourceName }
func (s FindWorkspaceByNameRow) GetSourceUrl() *string { return s.SourceUrl }
func (s FindWorkspaceByNameRow) GetStructuredRunOutputEnabled() *bool { return s.StructuredRunOutputEnabled }
func (s FindWorkspaceByNameRow) GetTerraformVersion() *string { return s.TerraformVersion }
func (s FindWorkspaceByNameRow) GetTriggerPrefixes() []string { return s.TriggerPrefixes }
func (s FindWorkspaceByNameRow) GetWorkingDirectory() *string { return s.WorkingDirectory }
func (s FindWorkspaceByNameRow) GetOrganizationID() *string { return s.OrganizationID }
func (s FindWorkspaceByNameRow) GetOrganization() Organizations { return s.Organization }


// FindWorkspaceByName implements Querier.FindWorkspaceByName.
func (q *DBQuerier) FindWorkspaceByName(ctx context.Context, name *string, organizationName *string) (FindWorkspaceByNameRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindWorkspaceByName")
	row := q.conn.QueryRow(ctx, findWorkspaceByNameSQL, name, organizationName)
	var item FindWorkspaceByNameRow
	organizationRow := q.types.newOrganizations()
	if err := row.Scan(&item.WorkspaceID, &item.CreatedAt, &item.UpdatedAt, &item.AllowDestroyPlan, &item.AutoApply, &item.CanQueueDestroyPlan, &item.Description, &item.Environment, &item.ExecutionMode, &item.FileTriggersEnabled, &item.GlobalRemoteState, &item.Locked, &item.MigrationEnvironment, &item.Name, &item.QueueAllRuns, &item.SpeculativeEnabled, &item.SourceName, &item.SourceUrl, &item.StructuredRunOutputEnabled, &item.TerraformVersion, &item.TriggerPrefixes, &item.WorkingDirectory, &item.OrganizationID, organizationRow); err != nil {
		return item, fmt.Errorf("query FindWorkspaceByName: %w", err)
	}
	if err := organizationRow.AssignTo(&item.Organization); err != nil {
		return item, fmt.Errorf("assign FindWorkspaceByName row: %w", err)
	}
	return item, nil
}

// FindWorkspaceByNameBatch implements Querier.FindWorkspaceByNameBatch.
func (q *DBQuerier) FindWorkspaceByNameBatch(batch genericBatch, name *string, organizationName *string) {
	batch.Queue(findWorkspaceByNameSQL, name, organizationName)
}

// FindWorkspaceByNameScan implements Querier.FindWorkspaceByNameScan.
func (q *DBQuerier) FindWorkspaceByNameScan(results pgx.BatchResults) (FindWorkspaceByNameRow, error) {
	row := results.QueryRow()
	var item FindWorkspaceByNameRow
	organizationRow := q.types.newOrganizations()
	if err := row.Scan(&item.WorkspaceID, &item.CreatedAt, &item.UpdatedAt, &item.AllowDestroyPlan, &item.AutoApply, &item.CanQueueDestroyPlan, &item.Description, &item.Environment, &item.ExecutionMode, &item.FileTriggersEnabled, &item.GlobalRemoteState, &item.Locked, &item.MigrationEnvironment, &item.Name, &item.QueueAllRuns, &item.SpeculativeEnabled, &item.SourceName, &item.SourceUrl, &item.StructuredRunOutputEnabled, &item.TerraformVersion, &item.TriggerPrefixes, &item.WorkingDirectory, &item.OrganizationID, organizationRow); err != nil {
		return item, fmt.Errorf("scan FindWorkspaceByNameBatch row: %w", err)
	}
	if err := organizationRow.AssignTo(&item.Organization); err != nil {
		return item, fmt.Errorf("assign FindWorkspaceByName row: %w", err)
	}
	return item, nil
}

const findWorkspaceByNameForUpdateSQL = `SELECT workspaces.*, (organizations.*)::"organizations" AS organization
FROM workspaces
JOIN organizations USING (organization_id)
WHERE workspaces.name = $1
AND organizations.name = $2
FOR UPDATE;`

type FindWorkspaceByNameForUpdateRow struct {
	WorkspaceID                *string       `json:"workspace_id"`
	CreatedAt                  time.Time     `json:"created_at"`
	UpdatedAt                  time.Time     `json:"updated_at"`
	AllowDestroyPlan           *bool         `json:"allow_destroy_plan"`
	AutoApply                  *bool         `json:"auto_apply"`
	CanQueueDestroyPlan        *bool         `json:"can_queue_destroy_plan"`
	Description                *string       `json:"description"`
	Environment                *string       `json:"environment"`
	ExecutionMode              *string       `json:"execution_mode"`
	FileTriggersEnabled        *bool         `json:"file_triggers_enabled"`
	GlobalRemoteState          *bool         `json:"global_remote_state"`
	Locked                     *bool         `json:"locked"`
	MigrationEnvironment       *string       `json:"migration_environment"`
	Name                       *string       `json:"name"`
	QueueAllRuns               *bool         `json:"queue_all_runs"`
	SpeculativeEnabled         *bool         `json:"speculative_enabled"`
	SourceName                 *string       `json:"source_name"`
	SourceUrl                  *string       `json:"source_url"`
	StructuredRunOutputEnabled *bool         `json:"structured_run_output_enabled"`
	TerraformVersion           *string       `json:"terraform_version"`
	TriggerPrefixes            []string      `json:"trigger_prefixes"`
	WorkingDirectory           *string       `json:"working_directory"`
	OrganizationID             *string       `json:"organization_id"`
	Organization               Organizations `json:"organization"`
}

func (s FindWorkspaceByNameForUpdateRow) GetWorkspaceID() *string { return s.WorkspaceID }
func (s FindWorkspaceByNameForUpdateRow) GetCreatedAt() time.Time { return s.CreatedAt }
func (s FindWorkspaceByNameForUpdateRow) GetUpdatedAt() time.Time { return s.UpdatedAt }
func (s FindWorkspaceByNameForUpdateRow) GetAllowDestroyPlan() *bool { return s.AllowDestroyPlan }
func (s FindWorkspaceByNameForUpdateRow) GetAutoApply() *bool { return s.AutoApply }
func (s FindWorkspaceByNameForUpdateRow) GetCanQueueDestroyPlan() *bool { return s.CanQueueDestroyPlan }
func (s FindWorkspaceByNameForUpdateRow) GetDescription() *string { return s.Description }
func (s FindWorkspaceByNameForUpdateRow) GetEnvironment() *string { return s.Environment }
func (s FindWorkspaceByNameForUpdateRow) GetExecutionMode() *string { return s.ExecutionMode }
func (s FindWorkspaceByNameForUpdateRow) GetFileTriggersEnabled() *bool { return s.FileTriggersEnabled }
func (s FindWorkspaceByNameForUpdateRow) GetGlobalRemoteState() *bool { return s.GlobalRemoteState }
func (s FindWorkspaceByNameForUpdateRow) GetLocked() *bool { return s.Locked }
func (s FindWorkspaceByNameForUpdateRow) GetMigrationEnvironment() *string { return s.MigrationEnvironment }
func (s FindWorkspaceByNameForUpdateRow) GetName() *string { return s.Name }
func (s FindWorkspaceByNameForUpdateRow) GetQueueAllRuns() *bool { return s.QueueAllRuns }
func (s FindWorkspaceByNameForUpdateRow) GetSpeculativeEnabled() *bool { return s.SpeculativeEnabled }
func (s FindWorkspaceByNameForUpdateRow) GetSourceName() *string { return s.SourceName }
func (s FindWorkspaceByNameForUpdateRow) GetSourceUrl() *string { return s.SourceUrl }
func (s FindWorkspaceByNameForUpdateRow) GetStructuredRunOutputEnabled() *bool { return s.StructuredRunOutputEnabled }
func (s FindWorkspaceByNameForUpdateRow) GetTerraformVersion() *string { return s.TerraformVersion }
func (s FindWorkspaceByNameForUpdateRow) GetTriggerPrefixes() []string { return s.TriggerPrefixes }
func (s FindWorkspaceByNameForUpdateRow) GetWorkingDirectory() *string { return s.WorkingDirectory }
func (s FindWorkspaceByNameForUpdateRow) GetOrganizationID() *string { return s.OrganizationID }
func (s FindWorkspaceByNameForUpdateRow) GetOrganization() Organizations { return s.Organization }


// FindWorkspaceByNameForUpdate implements Querier.FindWorkspaceByNameForUpdate.
func (q *DBQuerier) FindWorkspaceByNameForUpdate(ctx context.Context, name *string, organizationName *string) (FindWorkspaceByNameForUpdateRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindWorkspaceByNameForUpdate")
	row := q.conn.QueryRow(ctx, findWorkspaceByNameForUpdateSQL, name, organizationName)
	var item FindWorkspaceByNameForUpdateRow
	organizationRow := q.types.newOrganizations()
	if err := row.Scan(&item.WorkspaceID, &item.CreatedAt, &item.UpdatedAt, &item.AllowDestroyPlan, &item.AutoApply, &item.CanQueueDestroyPlan, &item.Description, &item.Environment, &item.ExecutionMode, &item.FileTriggersEnabled, &item.GlobalRemoteState, &item.Locked, &item.MigrationEnvironment, &item.Name, &item.QueueAllRuns, &item.SpeculativeEnabled, &item.SourceName, &item.SourceUrl, &item.StructuredRunOutputEnabled, &item.TerraformVersion, &item.TriggerPrefixes, &item.WorkingDirectory, &item.OrganizationID, organizationRow); err != nil {
		return item, fmt.Errorf("query FindWorkspaceByNameForUpdate: %w", err)
	}
	if err := organizationRow.AssignTo(&item.Organization); err != nil {
		return item, fmt.Errorf("assign FindWorkspaceByNameForUpdate row: %w", err)
	}
	return item, nil
}

// FindWorkspaceByNameForUpdateBatch implements Querier.FindWorkspaceByNameForUpdateBatch.
func (q *DBQuerier) FindWorkspaceByNameForUpdateBatch(batch genericBatch, name *string, organizationName *string) {
	batch.Queue(findWorkspaceByNameForUpdateSQL, name, organizationName)
}

// FindWorkspaceByNameForUpdateScan implements Querier.FindWorkspaceByNameForUpdateScan.
func (q *DBQuerier) FindWorkspaceByNameForUpdateScan(results pgx.BatchResults) (FindWorkspaceByNameForUpdateRow, error) {
	row := results.QueryRow()
	var item FindWorkspaceByNameForUpdateRow
	organizationRow := q.types.newOrganizations()
	if err := row.Scan(&item.WorkspaceID, &item.CreatedAt, &item.UpdatedAt, &item.AllowDestroyPlan, &item.AutoApply, &item.CanQueueDestroyPlan, &item.Description, &item.Environment, &item.ExecutionMode, &item.FileTriggersEnabled, &item.GlobalRemoteState, &item.Locked, &item.MigrationEnvironment, &item.Name, &item.QueueAllRuns, &item.SpeculativeEnabled, &item.SourceName, &item.SourceUrl, &item.StructuredRunOutputEnabled, &item.TerraformVersion, &item.TriggerPrefixes, &item.WorkingDirectory, &item.OrganizationID, organizationRow); err != nil {
		return item, fmt.Errorf("scan FindWorkspaceByNameForUpdateBatch row: %w", err)
	}
	if err := organizationRow.AssignTo(&item.Organization); err != nil {
		return item, fmt.Errorf("assign FindWorkspaceByNameForUpdate row: %w", err)
	}
	return item, nil
}

const findWorkspaceByIDSQL = `SELECT workspaces.*, (organizations.*)::"organizations" AS organization
FROM workspaces
JOIN organizations USING (organization_id)
WHERE workspaces.workspace_id = $1;`

type FindWorkspaceByIDRow struct {
	WorkspaceID                *string       `json:"workspace_id"`
	CreatedAt                  time.Time     `json:"created_at"`
	UpdatedAt                  time.Time     `json:"updated_at"`
	AllowDestroyPlan           *bool         `json:"allow_destroy_plan"`
	AutoApply                  *bool         `json:"auto_apply"`
	CanQueueDestroyPlan        *bool         `json:"can_queue_destroy_plan"`
	Description                *string       `json:"description"`
	Environment                *string       `json:"environment"`
	ExecutionMode              *string       `json:"execution_mode"`
	FileTriggersEnabled        *bool         `json:"file_triggers_enabled"`
	GlobalRemoteState          *bool         `json:"global_remote_state"`
	Locked                     *bool         `json:"locked"`
	MigrationEnvironment       *string       `json:"migration_environment"`
	Name                       *string       `json:"name"`
	QueueAllRuns               *bool         `json:"queue_all_runs"`
	SpeculativeEnabled         *bool         `json:"speculative_enabled"`
	SourceName                 *string       `json:"source_name"`
	SourceUrl                  *string       `json:"source_url"`
	StructuredRunOutputEnabled *bool         `json:"structured_run_output_enabled"`
	TerraformVersion           *string       `json:"terraform_version"`
	TriggerPrefixes            []string      `json:"trigger_prefixes"`
	WorkingDirectory           *string       `json:"working_directory"`
	OrganizationID             *string       `json:"organization_id"`
	Organization               Organizations `json:"organization"`
}

func (s FindWorkspaceByIDRow) GetWorkspaceID() *string { return s.WorkspaceID }
func (s FindWorkspaceByIDRow) GetCreatedAt() time.Time { return s.CreatedAt }
func (s FindWorkspaceByIDRow) GetUpdatedAt() time.Time { return s.UpdatedAt }
func (s FindWorkspaceByIDRow) GetAllowDestroyPlan() *bool { return s.AllowDestroyPlan }
func (s FindWorkspaceByIDRow) GetAutoApply() *bool { return s.AutoApply }
func (s FindWorkspaceByIDRow) GetCanQueueDestroyPlan() *bool { return s.CanQueueDestroyPlan }
func (s FindWorkspaceByIDRow) GetDescription() *string { return s.Description }
func (s FindWorkspaceByIDRow) GetEnvironment() *string { return s.Environment }
func (s FindWorkspaceByIDRow) GetExecutionMode() *string { return s.ExecutionMode }
func (s FindWorkspaceByIDRow) GetFileTriggersEnabled() *bool { return s.FileTriggersEnabled }
func (s FindWorkspaceByIDRow) GetGlobalRemoteState() *bool { return s.GlobalRemoteState }
func (s FindWorkspaceByIDRow) GetLocked() *bool { return s.Locked }
func (s FindWorkspaceByIDRow) GetMigrationEnvironment() *string { return s.MigrationEnvironment }
func (s FindWorkspaceByIDRow) GetName() *string { return s.Name }
func (s FindWorkspaceByIDRow) GetQueueAllRuns() *bool { return s.QueueAllRuns }
func (s FindWorkspaceByIDRow) GetSpeculativeEnabled() *bool { return s.SpeculativeEnabled }
func (s FindWorkspaceByIDRow) GetSourceName() *string { return s.SourceName }
func (s FindWorkspaceByIDRow) GetSourceUrl() *string { return s.SourceUrl }
func (s FindWorkspaceByIDRow) GetStructuredRunOutputEnabled() *bool { return s.StructuredRunOutputEnabled }
func (s FindWorkspaceByIDRow) GetTerraformVersion() *string { return s.TerraformVersion }
func (s FindWorkspaceByIDRow) GetTriggerPrefixes() []string { return s.TriggerPrefixes }
func (s FindWorkspaceByIDRow) GetWorkingDirectory() *string { return s.WorkingDirectory }
func (s FindWorkspaceByIDRow) GetOrganizationID() *string { return s.OrganizationID }
func (s FindWorkspaceByIDRow) GetOrganization() Organizations { return s.Organization }


// FindWorkspaceByID implements Querier.FindWorkspaceByID.
func (q *DBQuerier) FindWorkspaceByID(ctx context.Context, id *string) (FindWorkspaceByIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindWorkspaceByID")
	row := q.conn.QueryRow(ctx, findWorkspaceByIDSQL, id)
	var item FindWorkspaceByIDRow
	organizationRow := q.types.newOrganizations()
	if err := row.Scan(&item.WorkspaceID, &item.CreatedAt, &item.UpdatedAt, &item.AllowDestroyPlan, &item.AutoApply, &item.CanQueueDestroyPlan, &item.Description, &item.Environment, &item.ExecutionMode, &item.FileTriggersEnabled, &item.GlobalRemoteState, &item.Locked, &item.MigrationEnvironment, &item.Name, &item.QueueAllRuns, &item.SpeculativeEnabled, &item.SourceName, &item.SourceUrl, &item.StructuredRunOutputEnabled, &item.TerraformVersion, &item.TriggerPrefixes, &item.WorkingDirectory, &item.OrganizationID, organizationRow); err != nil {
		return item, fmt.Errorf("query FindWorkspaceByID: %w", err)
	}
	if err := organizationRow.AssignTo(&item.Organization); err != nil {
		return item, fmt.Errorf("assign FindWorkspaceByID row: %w", err)
	}
	return item, nil
}

// FindWorkspaceByIDBatch implements Querier.FindWorkspaceByIDBatch.
func (q *DBQuerier) FindWorkspaceByIDBatch(batch genericBatch, id *string) {
	batch.Queue(findWorkspaceByIDSQL, id)
}

// FindWorkspaceByIDScan implements Querier.FindWorkspaceByIDScan.
func (q *DBQuerier) FindWorkspaceByIDScan(results pgx.BatchResults) (FindWorkspaceByIDRow, error) {
	row := results.QueryRow()
	var item FindWorkspaceByIDRow
	organizationRow := q.types.newOrganizations()
	if err := row.Scan(&item.WorkspaceID, &item.CreatedAt, &item.UpdatedAt, &item.AllowDestroyPlan, &item.AutoApply, &item.CanQueueDestroyPlan, &item.Description, &item.Environment, &item.ExecutionMode, &item.FileTriggersEnabled, &item.GlobalRemoteState, &item.Locked, &item.MigrationEnvironment, &item.Name, &item.QueueAllRuns, &item.SpeculativeEnabled, &item.SourceName, &item.SourceUrl, &item.StructuredRunOutputEnabled, &item.TerraformVersion, &item.TriggerPrefixes, &item.WorkingDirectory, &item.OrganizationID, organizationRow); err != nil {
		return item, fmt.Errorf("scan FindWorkspaceByIDBatch row: %w", err)
	}
	if err := organizationRow.AssignTo(&item.Organization); err != nil {
		return item, fmt.Errorf("assign FindWorkspaceByID row: %w", err)
	}
	return item, nil
}

const findWorkspaceByIDForUpdateSQL = `SELECT workspaces.*, (organizations.*)::"organizations" AS organization
FROM workspaces
JOIN organizations USING (organization_id)
WHERE workspaces.workspace_id = $1
FOR UPDATE;`

type FindWorkspaceByIDForUpdateRow struct {
	WorkspaceID                *string       `json:"workspace_id"`
	CreatedAt                  time.Time     `json:"created_at"`
	UpdatedAt                  time.Time     `json:"updated_at"`
	AllowDestroyPlan           *bool         `json:"allow_destroy_plan"`
	AutoApply                  *bool         `json:"auto_apply"`
	CanQueueDestroyPlan        *bool         `json:"can_queue_destroy_plan"`
	Description                *string       `json:"description"`
	Environment                *string       `json:"environment"`
	ExecutionMode              *string       `json:"execution_mode"`
	FileTriggersEnabled        *bool         `json:"file_triggers_enabled"`
	GlobalRemoteState          *bool         `json:"global_remote_state"`
	Locked                     *bool         `json:"locked"`
	MigrationEnvironment       *string       `json:"migration_environment"`
	Name                       *string       `json:"name"`
	QueueAllRuns               *bool         `json:"queue_all_runs"`
	SpeculativeEnabled         *bool         `json:"speculative_enabled"`
	SourceName                 *string       `json:"source_name"`
	SourceUrl                  *string       `json:"source_url"`
	StructuredRunOutputEnabled *bool         `json:"structured_run_output_enabled"`
	TerraformVersion           *string       `json:"terraform_version"`
	TriggerPrefixes            []string      `json:"trigger_prefixes"`
	WorkingDirectory           *string       `json:"working_directory"`
	OrganizationID             *string       `json:"organization_id"`
	Organization               Organizations `json:"organization"`
}

func (s FindWorkspaceByIDForUpdateRow) GetWorkspaceID() *string { return s.WorkspaceID }
func (s FindWorkspaceByIDForUpdateRow) GetCreatedAt() time.Time { return s.CreatedAt }
func (s FindWorkspaceByIDForUpdateRow) GetUpdatedAt() time.Time { return s.UpdatedAt }
func (s FindWorkspaceByIDForUpdateRow) GetAllowDestroyPlan() *bool { return s.AllowDestroyPlan }
func (s FindWorkspaceByIDForUpdateRow) GetAutoApply() *bool { return s.AutoApply }
func (s FindWorkspaceByIDForUpdateRow) GetCanQueueDestroyPlan() *bool { return s.CanQueueDestroyPlan }
func (s FindWorkspaceByIDForUpdateRow) GetDescription() *string { return s.Description }
func (s FindWorkspaceByIDForUpdateRow) GetEnvironment() *string { return s.Environment }
func (s FindWorkspaceByIDForUpdateRow) GetExecutionMode() *string { return s.ExecutionMode }
func (s FindWorkspaceByIDForUpdateRow) GetFileTriggersEnabled() *bool { return s.FileTriggersEnabled }
func (s FindWorkspaceByIDForUpdateRow) GetGlobalRemoteState() *bool { return s.GlobalRemoteState }
func (s FindWorkspaceByIDForUpdateRow) GetLocked() *bool { return s.Locked }
func (s FindWorkspaceByIDForUpdateRow) GetMigrationEnvironment() *string { return s.MigrationEnvironment }
func (s FindWorkspaceByIDForUpdateRow) GetName() *string { return s.Name }
func (s FindWorkspaceByIDForUpdateRow) GetQueueAllRuns() *bool { return s.QueueAllRuns }
func (s FindWorkspaceByIDForUpdateRow) GetSpeculativeEnabled() *bool { return s.SpeculativeEnabled }
func (s FindWorkspaceByIDForUpdateRow) GetSourceName() *string { return s.SourceName }
func (s FindWorkspaceByIDForUpdateRow) GetSourceUrl() *string { return s.SourceUrl }
func (s FindWorkspaceByIDForUpdateRow) GetStructuredRunOutputEnabled() *bool { return s.StructuredRunOutputEnabled }
func (s FindWorkspaceByIDForUpdateRow) GetTerraformVersion() *string { return s.TerraformVersion }
func (s FindWorkspaceByIDForUpdateRow) GetTriggerPrefixes() []string { return s.TriggerPrefixes }
func (s FindWorkspaceByIDForUpdateRow) GetWorkingDirectory() *string { return s.WorkingDirectory }
func (s FindWorkspaceByIDForUpdateRow) GetOrganizationID() *string { return s.OrganizationID }
func (s FindWorkspaceByIDForUpdateRow) GetOrganization() Organizations { return s.Organization }


// FindWorkspaceByIDForUpdate implements Querier.FindWorkspaceByIDForUpdate.
func (q *DBQuerier) FindWorkspaceByIDForUpdate(ctx context.Context, id *string) (FindWorkspaceByIDForUpdateRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindWorkspaceByIDForUpdate")
	row := q.conn.QueryRow(ctx, findWorkspaceByIDForUpdateSQL, id)
	var item FindWorkspaceByIDForUpdateRow
	organizationRow := q.types.newOrganizations()
	if err := row.Scan(&item.WorkspaceID, &item.CreatedAt, &item.UpdatedAt, &item.AllowDestroyPlan, &item.AutoApply, &item.CanQueueDestroyPlan, &item.Description, &item.Environment, &item.ExecutionMode, &item.FileTriggersEnabled, &item.GlobalRemoteState, &item.Locked, &item.MigrationEnvironment, &item.Name, &item.QueueAllRuns, &item.SpeculativeEnabled, &item.SourceName, &item.SourceUrl, &item.StructuredRunOutputEnabled, &item.TerraformVersion, &item.TriggerPrefixes, &item.WorkingDirectory, &item.OrganizationID, organizationRow); err != nil {
		return item, fmt.Errorf("query FindWorkspaceByIDForUpdate: %w", err)
	}
	if err := organizationRow.AssignTo(&item.Organization); err != nil {
		return item, fmt.Errorf("assign FindWorkspaceByIDForUpdate row: %w", err)
	}
	return item, nil
}

// FindWorkspaceByIDForUpdateBatch implements Querier.FindWorkspaceByIDForUpdateBatch.
func (q *DBQuerier) FindWorkspaceByIDForUpdateBatch(batch genericBatch, id *string) {
	batch.Queue(findWorkspaceByIDForUpdateSQL, id)
}

// FindWorkspaceByIDForUpdateScan implements Querier.FindWorkspaceByIDForUpdateScan.
func (q *DBQuerier) FindWorkspaceByIDForUpdateScan(results pgx.BatchResults) (FindWorkspaceByIDForUpdateRow, error) {
	row := results.QueryRow()
	var item FindWorkspaceByIDForUpdateRow
	organizationRow := q.types.newOrganizations()
	if err := row.Scan(&item.WorkspaceID, &item.CreatedAt, &item.UpdatedAt, &item.AllowDestroyPlan, &item.AutoApply, &item.CanQueueDestroyPlan, &item.Description, &item.Environment, &item.ExecutionMode, &item.FileTriggersEnabled, &item.GlobalRemoteState, &item.Locked, &item.MigrationEnvironment, &item.Name, &item.QueueAllRuns, &item.SpeculativeEnabled, &item.SourceName, &item.SourceUrl, &item.StructuredRunOutputEnabled, &item.TerraformVersion, &item.TriggerPrefixes, &item.WorkingDirectory, &item.OrganizationID, organizationRow); err != nil {
		return item, fmt.Errorf("scan FindWorkspaceByIDForUpdateBatch row: %w", err)
	}
	if err := organizationRow.AssignTo(&item.Organization); err != nil {
		return item, fmt.Errorf("assign FindWorkspaceByIDForUpdate row: %w", err)
	}
	return item, nil
}

const updateWorkspaceNameByIDSQL = `UPDATE workspaces
SET
    name = $1,
    updated_at = NOW()
WHERE workspace_id = $2
RETURNING *;`

type UpdateWorkspaceNameByIDRow struct {
	WorkspaceID                *string   `json:"workspace_id"`
	CreatedAt                  time.Time `json:"created_at"`
	UpdatedAt                  time.Time `json:"updated_at"`
	AllowDestroyPlan           *bool     `json:"allow_destroy_plan"`
	AutoApply                  *bool     `json:"auto_apply"`
	CanQueueDestroyPlan        *bool     `json:"can_queue_destroy_plan"`
	Description                *string   `json:"description"`
	Environment                *string   `json:"environment"`
	ExecutionMode              *string   `json:"execution_mode"`
	FileTriggersEnabled        *bool     `json:"file_triggers_enabled"`
	GlobalRemoteState          *bool     `json:"global_remote_state"`
	Locked                     *bool     `json:"locked"`
	MigrationEnvironment       *string   `json:"migration_environment"`
	Name                       *string   `json:"name"`
	QueueAllRuns               *bool     `json:"queue_all_runs"`
	SpeculativeEnabled         *bool     `json:"speculative_enabled"`
	SourceName                 *string   `json:"source_name"`
	SourceUrl                  *string   `json:"source_url"`
	StructuredRunOutputEnabled *bool     `json:"structured_run_output_enabled"`
	TerraformVersion           *string   `json:"terraform_version"`
	TriggerPrefixes            []string  `json:"trigger_prefixes"`
	WorkingDirectory           *string   `json:"working_directory"`
	OrganizationID             *string   `json:"organization_id"`
}

func (s UpdateWorkspaceNameByIDRow) GetWorkspaceID() *string { return s.WorkspaceID }
func (s UpdateWorkspaceNameByIDRow) GetCreatedAt() time.Time { return s.CreatedAt }
func (s UpdateWorkspaceNameByIDRow) GetUpdatedAt() time.Time { return s.UpdatedAt }
func (s UpdateWorkspaceNameByIDRow) GetAllowDestroyPlan() *bool { return s.AllowDestroyPlan }
func (s UpdateWorkspaceNameByIDRow) GetAutoApply() *bool { return s.AutoApply }
func (s UpdateWorkspaceNameByIDRow) GetCanQueueDestroyPlan() *bool { return s.CanQueueDestroyPlan }
func (s UpdateWorkspaceNameByIDRow) GetDescription() *string { return s.Description }
func (s UpdateWorkspaceNameByIDRow) GetEnvironment() *string { return s.Environment }
func (s UpdateWorkspaceNameByIDRow) GetExecutionMode() *string { return s.ExecutionMode }
func (s UpdateWorkspaceNameByIDRow) GetFileTriggersEnabled() *bool { return s.FileTriggersEnabled }
func (s UpdateWorkspaceNameByIDRow) GetGlobalRemoteState() *bool { return s.GlobalRemoteState }
func (s UpdateWorkspaceNameByIDRow) GetLocked() *bool { return s.Locked }
func (s UpdateWorkspaceNameByIDRow) GetMigrationEnvironment() *string { return s.MigrationEnvironment }
func (s UpdateWorkspaceNameByIDRow) GetName() *string { return s.Name }
func (s UpdateWorkspaceNameByIDRow) GetQueueAllRuns() *bool { return s.QueueAllRuns }
func (s UpdateWorkspaceNameByIDRow) GetSpeculativeEnabled() *bool { return s.SpeculativeEnabled }
func (s UpdateWorkspaceNameByIDRow) GetSourceName() *string { return s.SourceName }
func (s UpdateWorkspaceNameByIDRow) GetSourceUrl() *string { return s.SourceUrl }
func (s UpdateWorkspaceNameByIDRow) GetStructuredRunOutputEnabled() *bool { return s.StructuredRunOutputEnabled }
func (s UpdateWorkspaceNameByIDRow) GetTerraformVersion() *string { return s.TerraformVersion }
func (s UpdateWorkspaceNameByIDRow) GetTriggerPrefixes() []string { return s.TriggerPrefixes }
func (s UpdateWorkspaceNameByIDRow) GetWorkingDirectory() *string { return s.WorkingDirectory }
func (s UpdateWorkspaceNameByIDRow) GetOrganizationID() *string { return s.OrganizationID }


// UpdateWorkspaceNameByID implements Querier.UpdateWorkspaceNameByID.
func (q *DBQuerier) UpdateWorkspaceNameByID(ctx context.Context, name *string, id *string) (UpdateWorkspaceNameByIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateWorkspaceNameByID")
	row := q.conn.QueryRow(ctx, updateWorkspaceNameByIDSQL, name, id)
	var item UpdateWorkspaceNameByIDRow
	if err := row.Scan(&item.WorkspaceID, &item.CreatedAt, &item.UpdatedAt, &item.AllowDestroyPlan, &item.AutoApply, &item.CanQueueDestroyPlan, &item.Description, &item.Environment, &item.ExecutionMode, &item.FileTriggersEnabled, &item.GlobalRemoteState, &item.Locked, &item.MigrationEnvironment, &item.Name, &item.QueueAllRuns, &item.SpeculativeEnabled, &item.SourceName, &item.SourceUrl, &item.StructuredRunOutputEnabled, &item.TerraformVersion, &item.TriggerPrefixes, &item.WorkingDirectory, &item.OrganizationID); err != nil {
		return item, fmt.Errorf("query UpdateWorkspaceNameByID: %w", err)
	}
	return item, nil
}

// UpdateWorkspaceNameByIDBatch implements Querier.UpdateWorkspaceNameByIDBatch.
func (q *DBQuerier) UpdateWorkspaceNameByIDBatch(batch genericBatch, name *string, id *string) {
	batch.Queue(updateWorkspaceNameByIDSQL, name, id)
}

// UpdateWorkspaceNameByIDScan implements Querier.UpdateWorkspaceNameByIDScan.
func (q *DBQuerier) UpdateWorkspaceNameByIDScan(results pgx.BatchResults) (UpdateWorkspaceNameByIDRow, error) {
	row := results.QueryRow()
	var item UpdateWorkspaceNameByIDRow
	if err := row.Scan(&item.WorkspaceID, &item.CreatedAt, &item.UpdatedAt, &item.AllowDestroyPlan, &item.AutoApply, &item.CanQueueDestroyPlan, &item.Description, &item.Environment, &item.ExecutionMode, &item.FileTriggersEnabled, &item.GlobalRemoteState, &item.Locked, &item.MigrationEnvironment, &item.Name, &item.QueueAllRuns, &item.SpeculativeEnabled, &item.SourceName, &item.SourceUrl, &item.StructuredRunOutputEnabled, &item.TerraformVersion, &item.TriggerPrefixes, &item.WorkingDirectory, &item.OrganizationID); err != nil {
		return item, fmt.Errorf("scan UpdateWorkspaceNameByIDBatch row: %w", err)
	}
	return item, nil
}

const updateWorkspaceAllowDestroyPlanByIDSQL = `UPDATE workspaces
SET
    allow_destroy_plan = $1,
    updated_at = NOW()
WHERE workspace_id = $2
RETURNING *;`

type UpdateWorkspaceAllowDestroyPlanByIDRow struct {
	WorkspaceID                *string   `json:"workspace_id"`
	CreatedAt                  time.Time `json:"created_at"`
	UpdatedAt                  time.Time `json:"updated_at"`
	AllowDestroyPlan           *bool     `json:"allow_destroy_plan"`
	AutoApply                  *bool     `json:"auto_apply"`
	CanQueueDestroyPlan        *bool     `json:"can_queue_destroy_plan"`
	Description                *string   `json:"description"`
	Environment                *string   `json:"environment"`
	ExecutionMode              *string   `json:"execution_mode"`
	FileTriggersEnabled        *bool     `json:"file_triggers_enabled"`
	GlobalRemoteState          *bool     `json:"global_remote_state"`
	Locked                     *bool     `json:"locked"`
	MigrationEnvironment       *string   `json:"migration_environment"`
	Name                       *string   `json:"name"`
	QueueAllRuns               *bool     `json:"queue_all_runs"`
	SpeculativeEnabled         *bool     `json:"speculative_enabled"`
	SourceName                 *string   `json:"source_name"`
	SourceUrl                  *string   `json:"source_url"`
	StructuredRunOutputEnabled *bool     `json:"structured_run_output_enabled"`
	TerraformVersion           *string   `json:"terraform_version"`
	TriggerPrefixes            []string  `json:"trigger_prefixes"`
	WorkingDirectory           *string   `json:"working_directory"`
	OrganizationID             *string   `json:"organization_id"`
}

func (s UpdateWorkspaceAllowDestroyPlanByIDRow) GetWorkspaceID() *string { return s.WorkspaceID }
func (s UpdateWorkspaceAllowDestroyPlanByIDRow) GetCreatedAt() time.Time { return s.CreatedAt }
func (s UpdateWorkspaceAllowDestroyPlanByIDRow) GetUpdatedAt() time.Time { return s.UpdatedAt }
func (s UpdateWorkspaceAllowDestroyPlanByIDRow) GetAllowDestroyPlan() *bool { return s.AllowDestroyPlan }
func (s UpdateWorkspaceAllowDestroyPlanByIDRow) GetAutoApply() *bool { return s.AutoApply }
func (s UpdateWorkspaceAllowDestroyPlanByIDRow) GetCanQueueDestroyPlan() *bool { return s.CanQueueDestroyPlan }
func (s UpdateWorkspaceAllowDestroyPlanByIDRow) GetDescription() *string { return s.Description }
func (s UpdateWorkspaceAllowDestroyPlanByIDRow) GetEnvironment() *string { return s.Environment }
func (s UpdateWorkspaceAllowDestroyPlanByIDRow) GetExecutionMode() *string { return s.ExecutionMode }
func (s UpdateWorkspaceAllowDestroyPlanByIDRow) GetFileTriggersEnabled() *bool { return s.FileTriggersEnabled }
func (s UpdateWorkspaceAllowDestroyPlanByIDRow) GetGlobalRemoteState() *bool { return s.GlobalRemoteState }
func (s UpdateWorkspaceAllowDestroyPlanByIDRow) GetLocked() *bool { return s.Locked }
func (s UpdateWorkspaceAllowDestroyPlanByIDRow) GetMigrationEnvironment() *string { return s.MigrationEnvironment }
func (s UpdateWorkspaceAllowDestroyPlanByIDRow) GetName() *string { return s.Name }
func (s UpdateWorkspaceAllowDestroyPlanByIDRow) GetQueueAllRuns() *bool { return s.QueueAllRuns }
func (s UpdateWorkspaceAllowDestroyPlanByIDRow) GetSpeculativeEnabled() *bool { return s.SpeculativeEnabled }
func (s UpdateWorkspaceAllowDestroyPlanByIDRow) GetSourceName() *string { return s.SourceName }
func (s UpdateWorkspaceAllowDestroyPlanByIDRow) GetSourceUrl() *string { return s.SourceUrl }
func (s UpdateWorkspaceAllowDestroyPlanByIDRow) GetStructuredRunOutputEnabled() *bool { return s.StructuredRunOutputEnabled }
func (s UpdateWorkspaceAllowDestroyPlanByIDRow) GetTerraformVersion() *string { return s.TerraformVersion }
func (s UpdateWorkspaceAllowDestroyPlanByIDRow) GetTriggerPrefixes() []string { return s.TriggerPrefixes }
func (s UpdateWorkspaceAllowDestroyPlanByIDRow) GetWorkingDirectory() *string { return s.WorkingDirectory }
func (s UpdateWorkspaceAllowDestroyPlanByIDRow) GetOrganizationID() *string { return s.OrganizationID }


// UpdateWorkspaceAllowDestroyPlanByID implements Querier.UpdateWorkspaceAllowDestroyPlanByID.
func (q *DBQuerier) UpdateWorkspaceAllowDestroyPlanByID(ctx context.Context, allowDestroyPlan *bool, id *string) (UpdateWorkspaceAllowDestroyPlanByIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateWorkspaceAllowDestroyPlanByID")
	row := q.conn.QueryRow(ctx, updateWorkspaceAllowDestroyPlanByIDSQL, allowDestroyPlan, id)
	var item UpdateWorkspaceAllowDestroyPlanByIDRow
	if err := row.Scan(&item.WorkspaceID, &item.CreatedAt, &item.UpdatedAt, &item.AllowDestroyPlan, &item.AutoApply, &item.CanQueueDestroyPlan, &item.Description, &item.Environment, &item.ExecutionMode, &item.FileTriggersEnabled, &item.GlobalRemoteState, &item.Locked, &item.MigrationEnvironment, &item.Name, &item.QueueAllRuns, &item.SpeculativeEnabled, &item.SourceName, &item.SourceUrl, &item.StructuredRunOutputEnabled, &item.TerraformVersion, &item.TriggerPrefixes, &item.WorkingDirectory, &item.OrganizationID); err != nil {
		return item, fmt.Errorf("query UpdateWorkspaceAllowDestroyPlanByID: %w", err)
	}
	return item, nil
}

// UpdateWorkspaceAllowDestroyPlanByIDBatch implements Querier.UpdateWorkspaceAllowDestroyPlanByIDBatch.
func (q *DBQuerier) UpdateWorkspaceAllowDestroyPlanByIDBatch(batch genericBatch, allowDestroyPlan *bool, id *string) {
	batch.Queue(updateWorkspaceAllowDestroyPlanByIDSQL, allowDestroyPlan, id)
}

// UpdateWorkspaceAllowDestroyPlanByIDScan implements Querier.UpdateWorkspaceAllowDestroyPlanByIDScan.
func (q *DBQuerier) UpdateWorkspaceAllowDestroyPlanByIDScan(results pgx.BatchResults) (UpdateWorkspaceAllowDestroyPlanByIDRow, error) {
	row := results.QueryRow()
	var item UpdateWorkspaceAllowDestroyPlanByIDRow
	if err := row.Scan(&item.WorkspaceID, &item.CreatedAt, &item.UpdatedAt, &item.AllowDestroyPlan, &item.AutoApply, &item.CanQueueDestroyPlan, &item.Description, &item.Environment, &item.ExecutionMode, &item.FileTriggersEnabled, &item.GlobalRemoteState, &item.Locked, &item.MigrationEnvironment, &item.Name, &item.QueueAllRuns, &item.SpeculativeEnabled, &item.SourceName, &item.SourceUrl, &item.StructuredRunOutputEnabled, &item.TerraformVersion, &item.TriggerPrefixes, &item.WorkingDirectory, &item.OrganizationID); err != nil {
		return item, fmt.Errorf("scan UpdateWorkspaceAllowDestroyPlanByIDBatch row: %w", err)
	}
	return item, nil
}

const updateWorkspaceLockByIDSQL = `UPDATE workspaces
SET
    locked = $1,
    updated_at = NOW()
WHERE workspace_id = $2
RETURNING *;`

type UpdateWorkspaceLockByIDRow struct {
	WorkspaceID                *string   `json:"workspace_id"`
	CreatedAt                  time.Time `json:"created_at"`
	UpdatedAt                  time.Time `json:"updated_at"`
	AllowDestroyPlan           *bool     `json:"allow_destroy_plan"`
	AutoApply                  *bool     `json:"auto_apply"`
	CanQueueDestroyPlan        *bool     `json:"can_queue_destroy_plan"`
	Description                *string   `json:"description"`
	Environment                *string   `json:"environment"`
	ExecutionMode              *string   `json:"execution_mode"`
	FileTriggersEnabled        *bool     `json:"file_triggers_enabled"`
	GlobalRemoteState          *bool     `json:"global_remote_state"`
	Locked                     *bool     `json:"locked"`
	MigrationEnvironment       *string   `json:"migration_environment"`
	Name                       *string   `json:"name"`
	QueueAllRuns               *bool     `json:"queue_all_runs"`
	SpeculativeEnabled         *bool     `json:"speculative_enabled"`
	SourceName                 *string   `json:"source_name"`
	SourceUrl                  *string   `json:"source_url"`
	StructuredRunOutputEnabled *bool     `json:"structured_run_output_enabled"`
	TerraformVersion           *string   `json:"terraform_version"`
	TriggerPrefixes            []string  `json:"trigger_prefixes"`
	WorkingDirectory           *string   `json:"working_directory"`
	OrganizationID             *string   `json:"organization_id"`
}

func (s UpdateWorkspaceLockByIDRow) GetWorkspaceID() *string { return s.WorkspaceID }
func (s UpdateWorkspaceLockByIDRow) GetCreatedAt() time.Time { return s.CreatedAt }
func (s UpdateWorkspaceLockByIDRow) GetUpdatedAt() time.Time { return s.UpdatedAt }
func (s UpdateWorkspaceLockByIDRow) GetAllowDestroyPlan() *bool { return s.AllowDestroyPlan }
func (s UpdateWorkspaceLockByIDRow) GetAutoApply() *bool { return s.AutoApply }
func (s UpdateWorkspaceLockByIDRow) GetCanQueueDestroyPlan() *bool { return s.CanQueueDestroyPlan }
func (s UpdateWorkspaceLockByIDRow) GetDescription() *string { return s.Description }
func (s UpdateWorkspaceLockByIDRow) GetEnvironment() *string { return s.Environment }
func (s UpdateWorkspaceLockByIDRow) GetExecutionMode() *string { return s.ExecutionMode }
func (s UpdateWorkspaceLockByIDRow) GetFileTriggersEnabled() *bool { return s.FileTriggersEnabled }
func (s UpdateWorkspaceLockByIDRow) GetGlobalRemoteState() *bool { return s.GlobalRemoteState }
func (s UpdateWorkspaceLockByIDRow) GetLocked() *bool { return s.Locked }
func (s UpdateWorkspaceLockByIDRow) GetMigrationEnvironment() *string { return s.MigrationEnvironment }
func (s UpdateWorkspaceLockByIDRow) GetName() *string { return s.Name }
func (s UpdateWorkspaceLockByIDRow) GetQueueAllRuns() *bool { return s.QueueAllRuns }
func (s UpdateWorkspaceLockByIDRow) GetSpeculativeEnabled() *bool { return s.SpeculativeEnabled }
func (s UpdateWorkspaceLockByIDRow) GetSourceName() *string { return s.SourceName }
func (s UpdateWorkspaceLockByIDRow) GetSourceUrl() *string { return s.SourceUrl }
func (s UpdateWorkspaceLockByIDRow) GetStructuredRunOutputEnabled() *bool { return s.StructuredRunOutputEnabled }
func (s UpdateWorkspaceLockByIDRow) GetTerraformVersion() *string { return s.TerraformVersion }
func (s UpdateWorkspaceLockByIDRow) GetTriggerPrefixes() []string { return s.TriggerPrefixes }
func (s UpdateWorkspaceLockByIDRow) GetWorkingDirectory() *string { return s.WorkingDirectory }
func (s UpdateWorkspaceLockByIDRow) GetOrganizationID() *string { return s.OrganizationID }


// UpdateWorkspaceLockByID implements Querier.UpdateWorkspaceLockByID.
func (q *DBQuerier) UpdateWorkspaceLockByID(ctx context.Context, lock *bool, id *string) (UpdateWorkspaceLockByIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateWorkspaceLockByID")
	row := q.conn.QueryRow(ctx, updateWorkspaceLockByIDSQL, lock, id)
	var item UpdateWorkspaceLockByIDRow
	if err := row.Scan(&item.WorkspaceID, &item.CreatedAt, &item.UpdatedAt, &item.AllowDestroyPlan, &item.AutoApply, &item.CanQueueDestroyPlan, &item.Description, &item.Environment, &item.ExecutionMode, &item.FileTriggersEnabled, &item.GlobalRemoteState, &item.Locked, &item.MigrationEnvironment, &item.Name, &item.QueueAllRuns, &item.SpeculativeEnabled, &item.SourceName, &item.SourceUrl, &item.StructuredRunOutputEnabled, &item.TerraformVersion, &item.TriggerPrefixes, &item.WorkingDirectory, &item.OrganizationID); err != nil {
		return item, fmt.Errorf("query UpdateWorkspaceLockByID: %w", err)
	}
	return item, nil
}

// UpdateWorkspaceLockByIDBatch implements Querier.UpdateWorkspaceLockByIDBatch.
func (q *DBQuerier) UpdateWorkspaceLockByIDBatch(batch genericBatch, lock *bool, id *string) {
	batch.Queue(updateWorkspaceLockByIDSQL, lock, id)
}

// UpdateWorkspaceLockByIDScan implements Querier.UpdateWorkspaceLockByIDScan.
func (q *DBQuerier) UpdateWorkspaceLockByIDScan(results pgx.BatchResults) (UpdateWorkspaceLockByIDRow, error) {
	row := results.QueryRow()
	var item UpdateWorkspaceLockByIDRow
	if err := row.Scan(&item.WorkspaceID, &item.CreatedAt, &item.UpdatedAt, &item.AllowDestroyPlan, &item.AutoApply, &item.CanQueueDestroyPlan, &item.Description, &item.Environment, &item.ExecutionMode, &item.FileTriggersEnabled, &item.GlobalRemoteState, &item.Locked, &item.MigrationEnvironment, &item.Name, &item.QueueAllRuns, &item.SpeculativeEnabled, &item.SourceName, &item.SourceUrl, &item.StructuredRunOutputEnabled, &item.TerraformVersion, &item.TriggerPrefixes, &item.WorkingDirectory, &item.OrganizationID); err != nil {
		return item, fmt.Errorf("scan UpdateWorkspaceLockByIDBatch row: %w", err)
	}
	return item, nil
}

const updateWorkspaceDescriptionByIDSQL = `UPDATE workspaces
SET
    description = $1,
    updated_at = NOW()
WHERE workspace_id = $2
RETURNING *;`

type UpdateWorkspaceDescriptionByIDRow struct {
	WorkspaceID                *string   `json:"workspace_id"`
	CreatedAt                  time.Time `json:"created_at"`
	UpdatedAt                  time.Time `json:"updated_at"`
	AllowDestroyPlan           *bool     `json:"allow_destroy_plan"`
	AutoApply                  *bool     `json:"auto_apply"`
	CanQueueDestroyPlan        *bool     `json:"can_queue_destroy_plan"`
	Description                *string   `json:"description"`
	Environment                *string   `json:"environment"`
	ExecutionMode              *string   `json:"execution_mode"`
	FileTriggersEnabled        *bool     `json:"file_triggers_enabled"`
	GlobalRemoteState          *bool     `json:"global_remote_state"`
	Locked                     *bool     `json:"locked"`
	MigrationEnvironment       *string   `json:"migration_environment"`
	Name                       *string   `json:"name"`
	QueueAllRuns               *bool     `json:"queue_all_runs"`
	SpeculativeEnabled         *bool     `json:"speculative_enabled"`
	SourceName                 *string   `json:"source_name"`
	SourceUrl                  *string   `json:"source_url"`
	StructuredRunOutputEnabled *bool     `json:"structured_run_output_enabled"`
	TerraformVersion           *string   `json:"terraform_version"`
	TriggerPrefixes            []string  `json:"trigger_prefixes"`
	WorkingDirectory           *string   `json:"working_directory"`
	OrganizationID             *string   `json:"organization_id"`
}

func (s UpdateWorkspaceDescriptionByIDRow) GetWorkspaceID() *string { return s.WorkspaceID }
func (s UpdateWorkspaceDescriptionByIDRow) GetCreatedAt() time.Time { return s.CreatedAt }
func (s UpdateWorkspaceDescriptionByIDRow) GetUpdatedAt() time.Time { return s.UpdatedAt }
func (s UpdateWorkspaceDescriptionByIDRow) GetAllowDestroyPlan() *bool { return s.AllowDestroyPlan }
func (s UpdateWorkspaceDescriptionByIDRow) GetAutoApply() *bool { return s.AutoApply }
func (s UpdateWorkspaceDescriptionByIDRow) GetCanQueueDestroyPlan() *bool { return s.CanQueueDestroyPlan }
func (s UpdateWorkspaceDescriptionByIDRow) GetDescription() *string { return s.Description }
func (s UpdateWorkspaceDescriptionByIDRow) GetEnvironment() *string { return s.Environment }
func (s UpdateWorkspaceDescriptionByIDRow) GetExecutionMode() *string { return s.ExecutionMode }
func (s UpdateWorkspaceDescriptionByIDRow) GetFileTriggersEnabled() *bool { return s.FileTriggersEnabled }
func (s UpdateWorkspaceDescriptionByIDRow) GetGlobalRemoteState() *bool { return s.GlobalRemoteState }
func (s UpdateWorkspaceDescriptionByIDRow) GetLocked() *bool { return s.Locked }
func (s UpdateWorkspaceDescriptionByIDRow) GetMigrationEnvironment() *string { return s.MigrationEnvironment }
func (s UpdateWorkspaceDescriptionByIDRow) GetName() *string { return s.Name }
func (s UpdateWorkspaceDescriptionByIDRow) GetQueueAllRuns() *bool { return s.QueueAllRuns }
func (s UpdateWorkspaceDescriptionByIDRow) GetSpeculativeEnabled() *bool { return s.SpeculativeEnabled }
func (s UpdateWorkspaceDescriptionByIDRow) GetSourceName() *string { return s.SourceName }
func (s UpdateWorkspaceDescriptionByIDRow) GetSourceUrl() *string { return s.SourceUrl }
func (s UpdateWorkspaceDescriptionByIDRow) GetStructuredRunOutputEnabled() *bool { return s.StructuredRunOutputEnabled }
func (s UpdateWorkspaceDescriptionByIDRow) GetTerraformVersion() *string { return s.TerraformVersion }
func (s UpdateWorkspaceDescriptionByIDRow) GetTriggerPrefixes() []string { return s.TriggerPrefixes }
func (s UpdateWorkspaceDescriptionByIDRow) GetWorkingDirectory() *string { return s.WorkingDirectory }
func (s UpdateWorkspaceDescriptionByIDRow) GetOrganizationID() *string { return s.OrganizationID }


// UpdateWorkspaceDescriptionByID implements Querier.UpdateWorkspaceDescriptionByID.
func (q *DBQuerier) UpdateWorkspaceDescriptionByID(ctx context.Context, description *string, id *string) (UpdateWorkspaceDescriptionByIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateWorkspaceDescriptionByID")
	row := q.conn.QueryRow(ctx, updateWorkspaceDescriptionByIDSQL, description, id)
	var item UpdateWorkspaceDescriptionByIDRow
	if err := row.Scan(&item.WorkspaceID, &item.CreatedAt, &item.UpdatedAt, &item.AllowDestroyPlan, &item.AutoApply, &item.CanQueueDestroyPlan, &item.Description, &item.Environment, &item.ExecutionMode, &item.FileTriggersEnabled, &item.GlobalRemoteState, &item.Locked, &item.MigrationEnvironment, &item.Name, &item.QueueAllRuns, &item.SpeculativeEnabled, &item.SourceName, &item.SourceUrl, &item.StructuredRunOutputEnabled, &item.TerraformVersion, &item.TriggerPrefixes, &item.WorkingDirectory, &item.OrganizationID); err != nil {
		return item, fmt.Errorf("query UpdateWorkspaceDescriptionByID: %w", err)
	}
	return item, nil
}

// UpdateWorkspaceDescriptionByIDBatch implements Querier.UpdateWorkspaceDescriptionByIDBatch.
func (q *DBQuerier) UpdateWorkspaceDescriptionByIDBatch(batch genericBatch, description *string, id *string) {
	batch.Queue(updateWorkspaceDescriptionByIDSQL, description, id)
}

// UpdateWorkspaceDescriptionByIDScan implements Querier.UpdateWorkspaceDescriptionByIDScan.
func (q *DBQuerier) UpdateWorkspaceDescriptionByIDScan(results pgx.BatchResults) (UpdateWorkspaceDescriptionByIDRow, error) {
	row := results.QueryRow()
	var item UpdateWorkspaceDescriptionByIDRow
	if err := row.Scan(&item.WorkspaceID, &item.CreatedAt, &item.UpdatedAt, &item.AllowDestroyPlan, &item.AutoApply, &item.CanQueueDestroyPlan, &item.Description, &item.Environment, &item.ExecutionMode, &item.FileTriggersEnabled, &item.GlobalRemoteState, &item.Locked, &item.MigrationEnvironment, &item.Name, &item.QueueAllRuns, &item.SpeculativeEnabled, &item.SourceName, &item.SourceUrl, &item.StructuredRunOutputEnabled, &item.TerraformVersion, &item.TriggerPrefixes, &item.WorkingDirectory, &item.OrganizationID); err != nil {
		return item, fmt.Errorf("scan UpdateWorkspaceDescriptionByIDBatch row: %w", err)
	}
	return item, nil
}

const deleteWorkspaceByIDSQL = `DELETE
FROM workspaces
WHERE workspace_id = $1;`

// DeleteWorkspaceByID implements Querier.DeleteWorkspaceByID.
func (q *DBQuerier) DeleteWorkspaceByID(ctx context.Context, workspaceID *string) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteWorkspaceByID")
	cmdTag, err := q.conn.Exec(ctx, deleteWorkspaceByIDSQL, workspaceID)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query DeleteWorkspaceByID: %w", err)
	}
	return cmdTag, err
}

// DeleteWorkspaceByIDBatch implements Querier.DeleteWorkspaceByIDBatch.
func (q *DBQuerier) DeleteWorkspaceByIDBatch(batch genericBatch, workspaceID *string) {
	batch.Queue(deleteWorkspaceByIDSQL, workspaceID)
}

// DeleteWorkspaceByIDScan implements Querier.DeleteWorkspaceByIDScan.
func (q *DBQuerier) DeleteWorkspaceByIDScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec DeleteWorkspaceByIDBatch: %w", err)
	}
	return cmdTag, err
}

const deleteWorkspaceByNameSQL = `DELETE
FROM workspaces
USING organizations
WHERE workspaces.organization_id = organizations.organization_id
AND workspaces.name = $1
AND organizations.name = $2;`

// DeleteWorkspaceByName implements Querier.DeleteWorkspaceByName.
func (q *DBQuerier) DeleteWorkspaceByName(ctx context.Context, name *string, organizationName *string) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteWorkspaceByName")
	cmdTag, err := q.conn.Exec(ctx, deleteWorkspaceByNameSQL, name, organizationName)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query DeleteWorkspaceByName: %w", err)
	}
	return cmdTag, err
}

// DeleteWorkspaceByNameBatch implements Querier.DeleteWorkspaceByNameBatch.
func (q *DBQuerier) DeleteWorkspaceByNameBatch(batch genericBatch, name *string, organizationName *string) {
	batch.Queue(deleteWorkspaceByNameSQL, name, organizationName)
}

// DeleteWorkspaceByNameScan implements Querier.DeleteWorkspaceByNameScan.
func (q *DBQuerier) DeleteWorkspaceByNameScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec DeleteWorkspaceByNameBatch: %w", err)
	}
	return cmdTag, err
}
