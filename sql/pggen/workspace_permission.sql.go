// Code generated by pggen. DO NOT EDIT.

package pggen

import (
	"context"
	"fmt"

	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

const upsertWorkspacePermissionSQL = `INSERT INTO workspace_permissions (
    workspace_id,
    team_id,
    role
) SELECT w.workspace_id, t.team_id, $1
    FROM teams t
    JOIN organizations o ON t.organization_id = o.organization_id
    JOIN workspaces w ON w.organization_id = o.organization_id
    WHERE t.name = $2
    AND w.workspace_id = $3
ON CONFLICT (workspace_id, team_id) DO UPDATE SET role = $1
;`

type UpsertWorkspacePermissionParams struct {
	Role        pgtype.Text
	TeamName    pgtype.Text
	WorkspaceID pgtype.Text
}

// UpsertWorkspacePermission implements Querier.UpsertWorkspacePermission.
func (q *DBQuerier) UpsertWorkspacePermission(ctx context.Context, params UpsertWorkspacePermissionParams) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpsertWorkspacePermission")
	cmdTag, err := q.conn.Exec(ctx, upsertWorkspacePermissionSQL, params.Role, params.TeamName, params.WorkspaceID)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query UpsertWorkspacePermission: %w", err)
	}
	return cmdTag, err
}

// UpsertWorkspacePermissionBatch implements Querier.UpsertWorkspacePermissionBatch.
func (q *DBQuerier) UpsertWorkspacePermissionBatch(batch genericBatch, params UpsertWorkspacePermissionParams) {
	batch.Queue(upsertWorkspacePermissionSQL, params.Role, params.TeamName, params.WorkspaceID)
}

// UpsertWorkspacePermissionScan implements Querier.UpsertWorkspacePermissionScan.
func (q *DBQuerier) UpsertWorkspacePermissionScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec UpsertWorkspacePermissionBatch: %w", err)
	}
	return cmdTag, err
}

const findWorkspacePermissionsByIDSQL = `SELECT
    p.role,
    (t.*)::"teams" AS team,
    (o.*)::"organizations" AS organization
FROM workspace_permissions p
JOIN teams t USING (team_id)
JOIN organizations o USING (organization_id)
WHERE p.workspace_id = $1
;`

type FindWorkspacePermissionsByIDRow struct {
	Role         pgtype.Text    `json:"role"`
	Team         *Teams         `json:"team"`
	Organization *Organizations `json:"organization"`
}

// FindWorkspacePermissionsByID implements Querier.FindWorkspacePermissionsByID.
func (q *DBQuerier) FindWorkspacePermissionsByID(ctx context.Context, workspaceID pgtype.Text) ([]FindWorkspacePermissionsByIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindWorkspacePermissionsByID")
	rows, err := q.conn.Query(ctx, findWorkspacePermissionsByIDSQL, workspaceID)
	if err != nil {
		return nil, fmt.Errorf("query FindWorkspacePermissionsByID: %w", err)
	}
	defer rows.Close()
	items := []FindWorkspacePermissionsByIDRow{}
	teamRow := q.types.newTeams()
	organizationRow := q.types.newOrganizations()
	for rows.Next() {
		var item FindWorkspacePermissionsByIDRow
		if err := rows.Scan(&item.Role, teamRow, organizationRow); err != nil {
			return nil, fmt.Errorf("scan FindWorkspacePermissionsByID row: %w", err)
		}
		if err := teamRow.AssignTo(&item.Team); err != nil {
			return nil, fmt.Errorf("assign FindWorkspacePermissionsByID row: %w", err)
		}
		if err := organizationRow.AssignTo(&item.Organization); err != nil {
			return nil, fmt.Errorf("assign FindWorkspacePermissionsByID row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindWorkspacePermissionsByID rows: %w", err)
	}
	return items, err
}

// FindWorkspacePermissionsByIDBatch implements Querier.FindWorkspacePermissionsByIDBatch.
func (q *DBQuerier) FindWorkspacePermissionsByIDBatch(batch genericBatch, workspaceID pgtype.Text) {
	batch.Queue(findWorkspacePermissionsByIDSQL, workspaceID)
}

// FindWorkspacePermissionsByIDScan implements Querier.FindWorkspacePermissionsByIDScan.
func (q *DBQuerier) FindWorkspacePermissionsByIDScan(results pgx.BatchResults) ([]FindWorkspacePermissionsByIDRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query FindWorkspacePermissionsByIDBatch: %w", err)
	}
	defer rows.Close()
	items := []FindWorkspacePermissionsByIDRow{}
	teamRow := q.types.newTeams()
	organizationRow := q.types.newOrganizations()
	for rows.Next() {
		var item FindWorkspacePermissionsByIDRow
		if err := rows.Scan(&item.Role, teamRow, organizationRow); err != nil {
			return nil, fmt.Errorf("scan FindWorkspacePermissionsByIDBatch row: %w", err)
		}
		if err := teamRow.AssignTo(&item.Team); err != nil {
			return nil, fmt.Errorf("assign FindWorkspacePermissionsByID row: %w", err)
		}
		if err := organizationRow.AssignTo(&item.Organization); err != nil {
			return nil, fmt.Errorf("assign FindWorkspacePermissionsByID row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindWorkspacePermissionsByIDBatch rows: %w", err)
	}
	return items, err
}

const findWorkspacePermissionsByNameSQL = `SELECT
    p.role,
    (t.*)::"teams" AS team,
    (o.*)::"organizations" AS organization
FROM workspace_permissions p
JOIN teams t USING (team_id)
JOIN workspaces w USING (workspace_id)
JOIN organizations o ON o.organization_id = w.organization_id
WHERE w.name = $1
AND o.name = $2
;`

type FindWorkspacePermissionsByNameRow struct {
	Role         pgtype.Text    `json:"role"`
	Team         *Teams         `json:"team"`
	Organization *Organizations `json:"organization"`
}

// FindWorkspacePermissionsByName implements Querier.FindWorkspacePermissionsByName.
func (q *DBQuerier) FindWorkspacePermissionsByName(ctx context.Context, workspaceName pgtype.Text, organizationName pgtype.Text) ([]FindWorkspacePermissionsByNameRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindWorkspacePermissionsByName")
	rows, err := q.conn.Query(ctx, findWorkspacePermissionsByNameSQL, workspaceName, organizationName)
	if err != nil {
		return nil, fmt.Errorf("query FindWorkspacePermissionsByName: %w", err)
	}
	defer rows.Close()
	items := []FindWorkspacePermissionsByNameRow{}
	teamRow := q.types.newTeams()
	organizationRow := q.types.newOrganizations()
	for rows.Next() {
		var item FindWorkspacePermissionsByNameRow
		if err := rows.Scan(&item.Role, teamRow, organizationRow); err != nil {
			return nil, fmt.Errorf("scan FindWorkspacePermissionsByName row: %w", err)
		}
		if err := teamRow.AssignTo(&item.Team); err != nil {
			return nil, fmt.Errorf("assign FindWorkspacePermissionsByName row: %w", err)
		}
		if err := organizationRow.AssignTo(&item.Organization); err != nil {
			return nil, fmt.Errorf("assign FindWorkspacePermissionsByName row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindWorkspacePermissionsByName rows: %w", err)
	}
	return items, err
}

// FindWorkspacePermissionsByNameBatch implements Querier.FindWorkspacePermissionsByNameBatch.
func (q *DBQuerier) FindWorkspacePermissionsByNameBatch(batch genericBatch, workspaceName pgtype.Text, organizationName pgtype.Text) {
	batch.Queue(findWorkspacePermissionsByNameSQL, workspaceName, organizationName)
}

// FindWorkspacePermissionsByNameScan implements Querier.FindWorkspacePermissionsByNameScan.
func (q *DBQuerier) FindWorkspacePermissionsByNameScan(results pgx.BatchResults) ([]FindWorkspacePermissionsByNameRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query FindWorkspacePermissionsByNameBatch: %w", err)
	}
	defer rows.Close()
	items := []FindWorkspacePermissionsByNameRow{}
	teamRow := q.types.newTeams()
	organizationRow := q.types.newOrganizations()
	for rows.Next() {
		var item FindWorkspacePermissionsByNameRow
		if err := rows.Scan(&item.Role, teamRow, organizationRow); err != nil {
			return nil, fmt.Errorf("scan FindWorkspacePermissionsByNameBatch row: %w", err)
		}
		if err := teamRow.AssignTo(&item.Team); err != nil {
			return nil, fmt.Errorf("assign FindWorkspacePermissionsByName row: %w", err)
		}
		if err := organizationRow.AssignTo(&item.Organization); err != nil {
			return nil, fmt.Errorf("assign FindWorkspacePermissionsByName row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindWorkspacePermissionsByNameBatch rows: %w", err)
	}
	return items, err
}

const deleteWorkspacePermissionByIDSQL = `DELETE
FROM workspace_permissions p
USING workspaces w, teams t
WHERE p.team_id = t.team_id
AND w.workspace_id = $1
AND t.organization_id = w.organization_id
AND t.name = $2
;`

// DeleteWorkspacePermissionByID implements Querier.DeleteWorkspacePermissionByID.
func (q *DBQuerier) DeleteWorkspacePermissionByID(ctx context.Context, workspaceID pgtype.Text, teamName pgtype.Text) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteWorkspacePermissionByID")
	cmdTag, err := q.conn.Exec(ctx, deleteWorkspacePermissionByIDSQL, workspaceID, teamName)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query DeleteWorkspacePermissionByID: %w", err)
	}
	return cmdTag, err
}

// DeleteWorkspacePermissionByIDBatch implements Querier.DeleteWorkspacePermissionByIDBatch.
func (q *DBQuerier) DeleteWorkspacePermissionByIDBatch(batch genericBatch, workspaceID pgtype.Text, teamName pgtype.Text) {
	batch.Queue(deleteWorkspacePermissionByIDSQL, workspaceID, teamName)
}

// DeleteWorkspacePermissionByIDScan implements Querier.DeleteWorkspacePermissionByIDScan.
func (q *DBQuerier) DeleteWorkspacePermissionByIDScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec DeleteWorkspacePermissionByIDBatch: %w", err)
	}
	return cmdTag, err
}

const deleteWorkspacePermissionByNameSQL = `DELETE
FROM workspace_permissions p
USING organizations o, workspaces w, teams t
WHERE p.team_id = t.team_id
AND p.workspace_id = w.workspace_id
AND w.name = $1
AND o.name = $2
AND t.name = $3
;`

type DeleteWorkspacePermissionByNameParams struct {
	WorkspaceName    pgtype.Text
	OrganizationName pgtype.Text
	TeamName         pgtype.Text
}

// DeleteWorkspacePermissionByName implements Querier.DeleteWorkspacePermissionByName.
func (q *DBQuerier) DeleteWorkspacePermissionByName(ctx context.Context, params DeleteWorkspacePermissionByNameParams) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteWorkspacePermissionByName")
	cmdTag, err := q.conn.Exec(ctx, deleteWorkspacePermissionByNameSQL, params.WorkspaceName, params.OrganizationName, params.TeamName)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query DeleteWorkspacePermissionByName: %w", err)
	}
	return cmdTag, err
}

// DeleteWorkspacePermissionByNameBatch implements Querier.DeleteWorkspacePermissionByNameBatch.
func (q *DBQuerier) DeleteWorkspacePermissionByNameBatch(batch genericBatch, params DeleteWorkspacePermissionByNameParams) {
	batch.Queue(deleteWorkspacePermissionByNameSQL, params.WorkspaceName, params.OrganizationName, params.TeamName)
}

// DeleteWorkspacePermissionByNameScan implements Querier.DeleteWorkspacePermissionByNameScan.
func (q *DBQuerier) DeleteWorkspacePermissionByNameScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec DeleteWorkspacePermissionByNameBatch: %w", err)
	}
	return cmdTag, err
}
