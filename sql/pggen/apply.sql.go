// Code generated by pggen. DO NOT EDIT.

package pggen

import (
	"context"
	"fmt"
	"time"

	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

// Querier is a typesafe Go interface backed by SQL queries.
//
// Methods ending with Batch enqueue a query to run later in a pgx.Batch. After
// calling SendBatch on pgx.Conn, pgxpool.Pool, or pgx.Tx, use the Scan methods
// to parse the results.
type Querier interface {
	InsertApply(ctx context.Context, params InsertApplyParams) (pgconn.CommandTag, error)
	// InsertApplyBatch enqueues a InsertApply query into batch to be executed
	// later by the batch.
	InsertApplyBatch(batch genericBatch, params InsertApplyParams)
	// InsertApplyScan scans the result of an executed InsertApplyBatch query.
	InsertApplyScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindRunIDByApplyID(ctx context.Context, applyID pgtype.Text) (pgtype.Text, error)
	// FindRunIDByApplyIDBatch enqueues a FindRunIDByApplyID query into batch to be executed
	// later by the batch.
	FindRunIDByApplyIDBatch(batch genericBatch, applyID pgtype.Text)
	// FindRunIDByApplyIDScan scans the result of an executed FindRunIDByApplyIDBatch query.
	FindRunIDByApplyIDScan(results pgx.BatchResults) (pgtype.Text, error)

	UpdateAppliedChangesByID(ctx context.Context, params UpdateAppliedChangesByIDParams) (pgtype.Text, error)
	// UpdateAppliedChangesByIDBatch enqueues a UpdateAppliedChangesByID query into batch to be executed
	// later by the batch.
	UpdateAppliedChangesByIDBatch(batch genericBatch, params UpdateAppliedChangesByIDParams)
	// UpdateAppliedChangesByIDScan scans the result of an executed UpdateAppliedChangesByIDBatch query.
	UpdateAppliedChangesByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertConfigurationVersion(ctx context.Context, params InsertConfigurationVersionParams) (pgconn.CommandTag, error)
	// InsertConfigurationVersionBatch enqueues a InsertConfigurationVersion query into batch to be executed
	// later by the batch.
	InsertConfigurationVersionBatch(batch genericBatch, params InsertConfigurationVersionParams)
	// InsertConfigurationVersionScan scans the result of an executed InsertConfigurationVersionBatch query.
	InsertConfigurationVersionScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	InsertConfigurationVersionStatusTimestamp(ctx context.Context, id pgtype.Text, status pgtype.Text) (InsertConfigurationVersionStatusTimestampRow, error)
	// InsertConfigurationVersionStatusTimestampBatch enqueues a InsertConfigurationVersionStatusTimestamp query into batch to be executed
	// later by the batch.
	InsertConfigurationVersionStatusTimestampBatch(batch genericBatch, id pgtype.Text, status pgtype.Text)
	// InsertConfigurationVersionStatusTimestampScan scans the result of an executed InsertConfigurationVersionStatusTimestampBatch query.
	InsertConfigurationVersionStatusTimestampScan(results pgx.BatchResults) (InsertConfigurationVersionStatusTimestampRow, error)

	// FindConfigurationVersions finds configuration_versions for a given workspace.
	// Results are paginated with limit and offset, and total count is returned.
	//
	FindConfigurationVersionsByWorkspaceID(ctx context.Context, params FindConfigurationVersionsByWorkspaceIDParams) ([]FindConfigurationVersionsByWorkspaceIDRow, error)
	// FindConfigurationVersionsByWorkspaceIDBatch enqueues a FindConfigurationVersionsByWorkspaceID query into batch to be executed
	// later by the batch.
	FindConfigurationVersionsByWorkspaceIDBatch(batch genericBatch, params FindConfigurationVersionsByWorkspaceIDParams)
	// FindConfigurationVersionsByWorkspaceIDScan scans the result of an executed FindConfigurationVersionsByWorkspaceIDBatch query.
	FindConfigurationVersionsByWorkspaceIDScan(results pgx.BatchResults) ([]FindConfigurationVersionsByWorkspaceIDRow, error)

	CountConfigurationVersionsByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) (*int, error)
	// CountConfigurationVersionsByWorkspaceIDBatch enqueues a CountConfigurationVersionsByWorkspaceID query into batch to be executed
	// later by the batch.
	CountConfigurationVersionsByWorkspaceIDBatch(batch genericBatch, workspaceID pgtype.Text)
	// CountConfigurationVersionsByWorkspaceIDScan scans the result of an executed CountConfigurationVersionsByWorkspaceIDBatch query.
	CountConfigurationVersionsByWorkspaceIDScan(results pgx.BatchResults) (*int, error)

	// FindConfigurationVersionByID finds a configuration_version by its id.
	//
	FindConfigurationVersionByID(ctx context.Context, configurationVersionID pgtype.Text) (FindConfigurationVersionByIDRow, error)
	// FindConfigurationVersionByIDBatch enqueues a FindConfigurationVersionByID query into batch to be executed
	// later by the batch.
	FindConfigurationVersionByIDBatch(batch genericBatch, configurationVersionID pgtype.Text)
	// FindConfigurationVersionByIDScan scans the result of an executed FindConfigurationVersionByIDBatch query.
	FindConfigurationVersionByIDScan(results pgx.BatchResults) (FindConfigurationVersionByIDRow, error)

	FindConfigurationVersionLatestByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) (FindConfigurationVersionLatestByWorkspaceIDRow, error)
	// FindConfigurationVersionLatestByWorkspaceIDBatch enqueues a FindConfigurationVersionLatestByWorkspaceID query into batch to be executed
	// later by the batch.
	FindConfigurationVersionLatestByWorkspaceIDBatch(batch genericBatch, workspaceID pgtype.Text)
	// FindConfigurationVersionLatestByWorkspaceIDScan scans the result of an executed FindConfigurationVersionLatestByWorkspaceIDBatch query.
	FindConfigurationVersionLatestByWorkspaceIDScan(results pgx.BatchResults) (FindConfigurationVersionLatestByWorkspaceIDRow, error)

	FindConfigurationVersionByIDForUpdate(ctx context.Context, configurationVersionID pgtype.Text) (FindConfigurationVersionByIDForUpdateRow, error)
	// FindConfigurationVersionByIDForUpdateBatch enqueues a FindConfigurationVersionByIDForUpdate query into batch to be executed
	// later by the batch.
	FindConfigurationVersionByIDForUpdateBatch(batch genericBatch, configurationVersionID pgtype.Text)
	// FindConfigurationVersionByIDForUpdateScan scans the result of an executed FindConfigurationVersionByIDForUpdateBatch query.
	FindConfigurationVersionByIDForUpdateScan(results pgx.BatchResults) (FindConfigurationVersionByIDForUpdateRow, error)

	// DownloadConfigurationVersion gets a configuration_version config
	// tarball.
	//
	DownloadConfigurationVersion(ctx context.Context, configurationVersionID pgtype.Text) ([]byte, error)
	// DownloadConfigurationVersionBatch enqueues a DownloadConfigurationVersion query into batch to be executed
	// later by the batch.
	DownloadConfigurationVersionBatch(batch genericBatch, configurationVersionID pgtype.Text)
	// DownloadConfigurationVersionScan scans the result of an executed DownloadConfigurationVersionBatch query.
	DownloadConfigurationVersionScan(results pgx.BatchResults) ([]byte, error)

	UpdateConfigurationVersionErroredByID(ctx context.Context, id pgtype.Text) (pgtype.Text, error)
	// UpdateConfigurationVersionErroredByIDBatch enqueues a UpdateConfigurationVersionErroredByID query into batch to be executed
	// later by the batch.
	UpdateConfigurationVersionErroredByIDBatch(batch genericBatch, id pgtype.Text)
	// UpdateConfigurationVersionErroredByIDScan scans the result of an executed UpdateConfigurationVersionErroredByIDBatch query.
	UpdateConfigurationVersionErroredByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	UpdateConfigurationVersionConfigByID(ctx context.Context, config []byte, id pgtype.Text) (pgtype.Text, error)
	// UpdateConfigurationVersionConfigByIDBatch enqueues a UpdateConfigurationVersionConfigByID query into batch to be executed
	// later by the batch.
	UpdateConfigurationVersionConfigByIDBatch(batch genericBatch, config []byte, id pgtype.Text)
	// UpdateConfigurationVersionConfigByIDScan scans the result of an executed UpdateConfigurationVersionConfigByIDBatch query.
	UpdateConfigurationVersionConfigByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	DeleteConfigurationVersionByID(ctx context.Context, id pgtype.Text) (pgtype.Text, error)
	// DeleteConfigurationVersionByIDBatch enqueues a DeleteConfigurationVersionByID query into batch to be executed
	// later by the batch.
	DeleteConfigurationVersionByIDBatch(batch genericBatch, id pgtype.Text)
	// DeleteConfigurationVersionByIDScan scans the result of an executed DeleteConfigurationVersionByIDBatch query.
	DeleteConfigurationVersionByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertJob(ctx context.Context, params InsertJobParams) (pgconn.CommandTag, error)
	// InsertJobBatch enqueues a InsertJob query into batch to be executed
	// later by the batch.
	InsertJobBatch(batch genericBatch, params InsertJobParams)
	// InsertJobScan scans the result of an executed InsertJobBatch query.
	InsertJobScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	InsertJobStatusTimestamp(ctx context.Context, params InsertJobStatusTimestampParams) (pgconn.CommandTag, error)
	// InsertJobStatusTimestampBatch enqueues a InsertJobStatusTimestamp query into batch to be executed
	// later by the batch.
	InsertJobStatusTimestampBatch(batch genericBatch, params InsertJobStatusTimestampParams)
	// InsertJobStatusTimestampScan scans the result of an executed InsertJobStatusTimestampBatch query.
	InsertJobStatusTimestampScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	UpdateJobStatus(ctx context.Context, status pgtype.Text, jobID pgtype.Text) (pgtype.Text, error)
	// UpdateJobStatusBatch enqueues a UpdateJobStatus query into batch to be executed
	// later by the batch.
	UpdateJobStatusBatch(batch genericBatch, status pgtype.Text, jobID pgtype.Text)
	// UpdateJobStatusScan scans the result of an executed UpdateJobStatusBatch query.
	UpdateJobStatusScan(results pgx.BatchResults) (pgtype.Text, error)

	FindJobIDByApplyID(ctx context.Context, applyID pgtype.Text) (pgtype.Text, error)
	// FindJobIDByApplyIDBatch enqueues a FindJobIDByApplyID query into batch to be executed
	// later by the batch.
	FindJobIDByApplyIDBatch(batch genericBatch, applyID pgtype.Text)
	// FindJobIDByApplyIDScan scans the result of an executed FindJobIDByApplyIDBatch query.
	FindJobIDByApplyIDScan(results pgx.BatchResults) (pgtype.Text, error)

	FindRunIDByJobID(ctx context.Context, jobID pgtype.Text) (pgtype.Text, error)
	// FindRunIDByJobIDBatch enqueues a FindRunIDByJobID query into batch to be executed
	// later by the batch.
	FindRunIDByJobIDBatch(batch genericBatch, jobID pgtype.Text)
	// FindRunIDByJobIDScan scans the result of an executed FindRunIDByJobIDBatch query.
	FindRunIDByJobIDScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertLogChunk(ctx context.Context, jobID pgtype.Text, chunk []byte) (pgconn.CommandTag, error)
	// InsertLogChunkBatch enqueues a InsertLogChunk query into batch to be executed
	// later by the batch.
	InsertLogChunkBatch(batch genericBatch, jobID pgtype.Text, chunk []byte)
	// InsertLogChunkScan scans the result of an executed InsertLogChunkBatch query.
	InsertLogChunkScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindLogChunks(ctx context.Context, params FindLogChunksParams) ([]byte, error)
	// FindLogChunksBatch enqueues a FindLogChunks query into batch to be executed
	// later by the batch.
	FindLogChunksBatch(batch genericBatch, params FindLogChunksParams)
	// FindLogChunksScan scans the result of an executed FindLogChunksBatch query.
	FindLogChunksScan(results pgx.BatchResults) ([]byte, error)

	FindAllLogChunksUsingApplyID(ctx context.Context, applyID pgtype.Text) ([]byte, error)
	// FindAllLogChunksUsingApplyIDBatch enqueues a FindAllLogChunksUsingApplyID query into batch to be executed
	// later by the batch.
	FindAllLogChunksUsingApplyIDBatch(batch genericBatch, applyID pgtype.Text)
	// FindAllLogChunksUsingApplyIDScan scans the result of an executed FindAllLogChunksUsingApplyIDBatch query.
	FindAllLogChunksUsingApplyIDScan(results pgx.BatchResults) ([]byte, error)

	// FindOrganizationByName finds an organization by name.
	//
	FindOrganizationByName(ctx context.Context, name pgtype.Text) (FindOrganizationByNameRow, error)
	// FindOrganizationByNameBatch enqueues a FindOrganizationByName query into batch to be executed
	// later by the batch.
	FindOrganizationByNameBatch(batch genericBatch, name pgtype.Text)
	// FindOrganizationByNameScan scans the result of an executed FindOrganizationByNameBatch query.
	FindOrganizationByNameScan(results pgx.BatchResults) (FindOrganizationByNameRow, error)

	FindOrganizationByNameForUpdate(ctx context.Context, name pgtype.Text) (FindOrganizationByNameForUpdateRow, error)
	// FindOrganizationByNameForUpdateBatch enqueues a FindOrganizationByNameForUpdate query into batch to be executed
	// later by the batch.
	FindOrganizationByNameForUpdateBatch(batch genericBatch, name pgtype.Text)
	// FindOrganizationByNameForUpdateScan scans the result of an executed FindOrganizationByNameForUpdateBatch query.
	FindOrganizationByNameForUpdateScan(results pgx.BatchResults) (FindOrganizationByNameForUpdateRow, error)

	FindOrganizations(ctx context.Context, limit int, offset int) ([]FindOrganizationsRow, error)
	// FindOrganizationsBatch enqueues a FindOrganizations query into batch to be executed
	// later by the batch.
	FindOrganizationsBatch(batch genericBatch, limit int, offset int)
	// FindOrganizationsScan scans the result of an executed FindOrganizationsBatch query.
	FindOrganizationsScan(results pgx.BatchResults) ([]FindOrganizationsRow, error)

	CountOrganizations(ctx context.Context) (*int, error)
	// CountOrganizationsBatch enqueues a CountOrganizations query into batch to be executed
	// later by the batch.
	CountOrganizationsBatch(batch genericBatch)
	// CountOrganizationsScan scans the result of an executed CountOrganizationsBatch query.
	CountOrganizationsScan(results pgx.BatchResults) (*int, error)

	InsertOrganization(ctx context.Context, params InsertOrganizationParams) (pgconn.CommandTag, error)
	// InsertOrganizationBatch enqueues a InsertOrganization query into batch to be executed
	// later by the batch.
	InsertOrganizationBatch(batch genericBatch, params InsertOrganizationParams)
	// InsertOrganizationScan scans the result of an executed InsertOrganizationBatch query.
	InsertOrganizationScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	UpdateOrganizationByName(ctx context.Context, params UpdateOrganizationByNameParams) (pgtype.Text, error)
	// UpdateOrganizationByNameBatch enqueues a UpdateOrganizationByName query into batch to be executed
	// later by the batch.
	UpdateOrganizationByNameBatch(batch genericBatch, params UpdateOrganizationByNameParams)
	// UpdateOrganizationByNameScan scans the result of an executed UpdateOrganizationByNameBatch query.
	UpdateOrganizationByNameScan(results pgx.BatchResults) (pgtype.Text, error)

	DeleteOrganization(ctx context.Context, name pgtype.Text) (pgtype.Text, error)
	// DeleteOrganizationBatch enqueues a DeleteOrganization query into batch to be executed
	// later by the batch.
	DeleteOrganizationBatch(batch genericBatch, name pgtype.Text)
	// DeleteOrganizationScan scans the result of an executed DeleteOrganizationBatch query.
	DeleteOrganizationScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertOrganizationMembership(ctx context.Context, userID pgtype.Text, organizationID pgtype.Text) (pgconn.CommandTag, error)
	// InsertOrganizationMembershipBatch enqueues a InsertOrganizationMembership query into batch to be executed
	// later by the batch.
	InsertOrganizationMembershipBatch(batch genericBatch, userID pgtype.Text, organizationID pgtype.Text)
	// InsertOrganizationMembershipScan scans the result of an executed InsertOrganizationMembershipBatch query.
	InsertOrganizationMembershipScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	DeleteOrganizationMembership(ctx context.Context, userID pgtype.Text, organizationID pgtype.Text) (pgtype.Text, error)
	// DeleteOrganizationMembershipBatch enqueues a DeleteOrganizationMembership query into batch to be executed
	// later by the batch.
	DeleteOrganizationMembershipBatch(batch genericBatch, userID pgtype.Text, organizationID pgtype.Text)
	// DeleteOrganizationMembershipScan scans the result of an executed DeleteOrganizationMembershipBatch query.
	DeleteOrganizationMembershipScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertPlan(ctx context.Context, params InsertPlanParams) (pgconn.CommandTag, error)
	// InsertPlanBatch enqueues a InsertPlan query into batch to be executed
	// later by the batch.
	InsertPlanBatch(batch genericBatch, params InsertPlanParams)
	// InsertPlanScan scans the result of an executed InsertPlanBatch query.
	InsertPlanScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	UpdatePlannedChangesByID(ctx context.Context, params UpdatePlannedChangesByIDParams) (pgtype.Text, error)
	// UpdatePlannedChangesByIDBatch enqueues a UpdatePlannedChangesByID query into batch to be executed
	// later by the batch.
	UpdatePlannedChangesByIDBatch(batch genericBatch, params UpdatePlannedChangesByIDParams)
	// UpdatePlannedChangesByIDScan scans the result of an executed UpdatePlannedChangesByIDBatch query.
	UpdatePlannedChangesByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	FindRunIDByPlanID(ctx context.Context, planID pgtype.Text) (pgtype.Text, error)
	// FindRunIDByPlanIDBatch enqueues a FindRunIDByPlanID query into batch to be executed
	// later by the batch.
	FindRunIDByPlanIDBatch(batch genericBatch, planID pgtype.Text)
	// FindRunIDByPlanIDScan scans the result of an executed FindRunIDByPlanIDBatch query.
	FindRunIDByPlanIDScan(results pgx.BatchResults) (pgtype.Text, error)

	GetPlanBinByID(ctx context.Context, planID pgtype.Text) ([]byte, error)
	// GetPlanBinByIDBatch enqueues a GetPlanBinByID query into batch to be executed
	// later by the batch.
	GetPlanBinByIDBatch(batch genericBatch, planID pgtype.Text)
	// GetPlanBinByIDScan scans the result of an executed GetPlanBinByIDBatch query.
	GetPlanBinByIDScan(results pgx.BatchResults) ([]byte, error)

	GetPlanJSONByID(ctx context.Context, planID pgtype.Text) ([]byte, error)
	// GetPlanJSONByIDBatch enqueues a GetPlanJSONByID query into batch to be executed
	// later by the batch.
	GetPlanJSONByIDBatch(batch genericBatch, planID pgtype.Text)
	// GetPlanJSONByIDScan scans the result of an executed GetPlanJSONByIDBatch query.
	GetPlanJSONByIDScan(results pgx.BatchResults) ([]byte, error)

	UpdatePlanBinByID(ctx context.Context, planBin []byte, planID pgtype.Text) (pgtype.Text, error)
	// UpdatePlanBinByIDBatch enqueues a UpdatePlanBinByID query into batch to be executed
	// later by the batch.
	UpdatePlanBinByIDBatch(batch genericBatch, planBin []byte, planID pgtype.Text)
	// UpdatePlanBinByIDScan scans the result of an executed UpdatePlanBinByIDBatch query.
	UpdatePlanBinByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	UpdatePlanJSONByID(ctx context.Context, planJSON []byte, planID pgtype.Text) (pgtype.Text, error)
	// UpdatePlanJSONByIDBatch enqueues a UpdatePlanJSONByID query into batch to be executed
	// later by the batch.
	UpdatePlanJSONByIDBatch(batch genericBatch, planJSON []byte, planID pgtype.Text)
	// UpdatePlanJSONByIDScan scans the result of an executed UpdatePlanJSONByIDBatch query.
	UpdatePlanJSONByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertRun(ctx context.Context, params InsertRunParams) (pgconn.CommandTag, error)
	// InsertRunBatch enqueues a InsertRun query into batch to be executed
	// later by the batch.
	InsertRunBatch(batch genericBatch, params InsertRunParams)
	// InsertRunScan scans the result of an executed InsertRunBatch query.
	InsertRunScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	InsertRunStatusTimestamp(ctx context.Context, params InsertRunStatusTimestampParams) (pgconn.CommandTag, error)
	// InsertRunStatusTimestampBatch enqueues a InsertRunStatusTimestamp query into batch to be executed
	// later by the batch.
	InsertRunStatusTimestampBatch(batch genericBatch, params InsertRunStatusTimestampParams)
	// InsertRunStatusTimestampScan scans the result of an executed InsertRunStatusTimestampBatch query.
	InsertRunStatusTimestampScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindRuns(ctx context.Context, params FindRunsParams) ([]FindRunsRow, error)
	// FindRunsBatch enqueues a FindRuns query into batch to be executed
	// later by the batch.
	FindRunsBatch(batch genericBatch, params FindRunsParams)
	// FindRunsScan scans the result of an executed FindRunsBatch query.
	FindRunsScan(results pgx.BatchResults) ([]FindRunsRow, error)

	CountRuns(ctx context.Context, params CountRunsParams) (*int, error)
	// CountRunsBatch enqueues a CountRuns query into batch to be executed
	// later by the batch.
	CountRunsBatch(batch genericBatch, params CountRunsParams)
	// CountRunsScan scans the result of an executed CountRunsBatch query.
	CountRunsScan(results pgx.BatchResults) (*int, error)

	FindRunByID(ctx context.Context, runID pgtype.Text) (FindRunByIDRow, error)
	// FindRunByIDBatch enqueues a FindRunByID query into batch to be executed
	// later by the batch.
	FindRunByIDBatch(batch genericBatch, runID pgtype.Text)
	// FindRunByIDScan scans the result of an executed FindRunByIDBatch query.
	FindRunByIDScan(results pgx.BatchResults) (FindRunByIDRow, error)

	FindRunByIDForUpdate(ctx context.Context, runID pgtype.Text) (FindRunByIDForUpdateRow, error)
	// FindRunByIDForUpdateBatch enqueues a FindRunByIDForUpdate query into batch to be executed
	// later by the batch.
	FindRunByIDForUpdateBatch(batch genericBatch, runID pgtype.Text)
	// FindRunByIDForUpdateScan scans the result of an executed FindRunByIDForUpdateBatch query.
	FindRunByIDForUpdateScan(results pgx.BatchResults) (FindRunByIDForUpdateRow, error)

	UpdateRunStatus(ctx context.Context, status pgtype.Text, id pgtype.Text) (pgtype.Text, error)
	// UpdateRunStatusBatch enqueues a UpdateRunStatus query into batch to be executed
	// later by the batch.
	UpdateRunStatusBatch(batch genericBatch, status pgtype.Text, id pgtype.Text)
	// UpdateRunStatusScan scans the result of an executed UpdateRunStatusBatch query.
	UpdateRunStatusScan(results pgx.BatchResults) (pgtype.Text, error)

	DeleteRunByID(ctx context.Context, runID pgtype.Text) (pgtype.Text, error)
	// DeleteRunByIDBatch enqueues a DeleteRunByID query into batch to be executed
	// later by the batch.
	DeleteRunByIDBatch(batch genericBatch, runID pgtype.Text)
	// DeleteRunByIDScan scans the result of an executed DeleteRunByIDBatch query.
	DeleteRunByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertSession(ctx context.Context, params InsertSessionParams) (pgconn.CommandTag, error)
	// InsertSessionBatch enqueues a InsertSession query into batch to be executed
	// later by the batch.
	InsertSessionBatch(batch genericBatch, params InsertSessionParams)
	// InsertSessionScan scans the result of an executed InsertSessionBatch query.
	InsertSessionScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	UpdateSessionExpiry(ctx context.Context, expiry time.Time, token pgtype.Text) (pgtype.Text, error)
	// UpdateSessionExpiryBatch enqueues a UpdateSessionExpiry query into batch to be executed
	// later by the batch.
	UpdateSessionExpiryBatch(batch genericBatch, expiry time.Time, token pgtype.Text)
	// UpdateSessionExpiryScan scans the result of an executed UpdateSessionExpiryBatch query.
	UpdateSessionExpiryScan(results pgx.BatchResults) (pgtype.Text, error)

	DeleteSessionByToken(ctx context.Context, token pgtype.Text) (pgtype.Text, error)
	// DeleteSessionByTokenBatch enqueues a DeleteSessionByToken query into batch to be executed
	// later by the batch.
	DeleteSessionByTokenBatch(batch genericBatch, token pgtype.Text)
	// DeleteSessionByTokenScan scans the result of an executed DeleteSessionByTokenBatch query.
	DeleteSessionByTokenScan(results pgx.BatchResults) (pgtype.Text, error)

	DeleteSessionsExpired(ctx context.Context) (pgtype.Text, error)
	// DeleteSessionsExpiredBatch enqueues a DeleteSessionsExpired query into batch to be executed
	// later by the batch.
	DeleteSessionsExpiredBatch(batch genericBatch)
	// DeleteSessionsExpiredScan scans the result of an executed DeleteSessionsExpiredBatch query.
	DeleteSessionsExpiredScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertStateVersion(ctx context.Context, params InsertStateVersionParams) (pgconn.CommandTag, error)
	// InsertStateVersionBatch enqueues a InsertStateVersion query into batch to be executed
	// later by the batch.
	InsertStateVersionBatch(batch genericBatch, params InsertStateVersionParams)
	// InsertStateVersionScan scans the result of an executed InsertStateVersionBatch query.
	InsertStateVersionScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindStateVersionsByWorkspaceName(ctx context.Context, params FindStateVersionsByWorkspaceNameParams) ([]FindStateVersionsByWorkspaceNameRow, error)
	// FindStateVersionsByWorkspaceNameBatch enqueues a FindStateVersionsByWorkspaceName query into batch to be executed
	// later by the batch.
	FindStateVersionsByWorkspaceNameBatch(batch genericBatch, params FindStateVersionsByWorkspaceNameParams)
	// FindStateVersionsByWorkspaceNameScan scans the result of an executed FindStateVersionsByWorkspaceNameBatch query.
	FindStateVersionsByWorkspaceNameScan(results pgx.BatchResults) ([]FindStateVersionsByWorkspaceNameRow, error)

	CountStateVersionsByWorkspaceName(ctx context.Context, workspaceName pgtype.Text, organizationName pgtype.Text) (*int, error)
	// CountStateVersionsByWorkspaceNameBatch enqueues a CountStateVersionsByWorkspaceName query into batch to be executed
	// later by the batch.
	CountStateVersionsByWorkspaceNameBatch(batch genericBatch, workspaceName pgtype.Text, organizationName pgtype.Text)
	// CountStateVersionsByWorkspaceNameScan scans the result of an executed CountStateVersionsByWorkspaceNameBatch query.
	CountStateVersionsByWorkspaceNameScan(results pgx.BatchResults) (*int, error)

	FindStateVersionByID(ctx context.Context, id pgtype.Text) (FindStateVersionByIDRow, error)
	// FindStateVersionByIDBatch enqueues a FindStateVersionByID query into batch to be executed
	// later by the batch.
	FindStateVersionByIDBatch(batch genericBatch, id pgtype.Text)
	// FindStateVersionByIDScan scans the result of an executed FindStateVersionByIDBatch query.
	FindStateVersionByIDScan(results pgx.BatchResults) (FindStateVersionByIDRow, error)

	FindStateVersionLatestByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) (FindStateVersionLatestByWorkspaceIDRow, error)
	// FindStateVersionLatestByWorkspaceIDBatch enqueues a FindStateVersionLatestByWorkspaceID query into batch to be executed
	// later by the batch.
	FindStateVersionLatestByWorkspaceIDBatch(batch genericBatch, workspaceID pgtype.Text)
	// FindStateVersionLatestByWorkspaceIDScan scans the result of an executed FindStateVersionLatestByWorkspaceIDBatch query.
	FindStateVersionLatestByWorkspaceIDScan(results pgx.BatchResults) (FindStateVersionLatestByWorkspaceIDRow, error)

	FindStateVersionStateByID(ctx context.Context, id pgtype.Text) ([]byte, error)
	// FindStateVersionStateByIDBatch enqueues a FindStateVersionStateByID query into batch to be executed
	// later by the batch.
	FindStateVersionStateByIDBatch(batch genericBatch, id pgtype.Text)
	// FindStateVersionStateByIDScan scans the result of an executed FindStateVersionStateByIDBatch query.
	FindStateVersionStateByIDScan(results pgx.BatchResults) ([]byte, error)

	DeleteStateVersionByID(ctx context.Context, stateVersionID pgtype.Text) (pgtype.Text, error)
	// DeleteStateVersionByIDBatch enqueues a DeleteStateVersionByID query into batch to be executed
	// later by the batch.
	DeleteStateVersionByIDBatch(batch genericBatch, stateVersionID pgtype.Text)
	// DeleteStateVersionByIDScan scans the result of an executed DeleteStateVersionByIDBatch query.
	DeleteStateVersionByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertStateVersionOutput(ctx context.Context, params InsertStateVersionOutputParams) (pgconn.CommandTag, error)
	// InsertStateVersionOutputBatch enqueues a InsertStateVersionOutput query into batch to be executed
	// later by the batch.
	InsertStateVersionOutputBatch(batch genericBatch, params InsertStateVersionOutputParams)
	// InsertStateVersionOutputScan scans the result of an executed InsertStateVersionOutputBatch query.
	InsertStateVersionOutputScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	InsertToken(ctx context.Context, params InsertTokenParams) (pgconn.CommandTag, error)
	// InsertTokenBatch enqueues a InsertToken query into batch to be executed
	// later by the batch.
	InsertTokenBatch(batch genericBatch, params InsertTokenParams)
	// InsertTokenScan scans the result of an executed InsertTokenBatch query.
	InsertTokenScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	DeleteTokenByID(ctx context.Context, tokenID pgtype.Text) (pgtype.Text, error)
	// DeleteTokenByIDBatch enqueues a DeleteTokenByID query into batch to be executed
	// later by the batch.
	DeleteTokenByIDBatch(batch genericBatch, tokenID pgtype.Text)
	// DeleteTokenByIDScan scans the result of an executed DeleteTokenByIDBatch query.
	DeleteTokenByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertUser(ctx context.Context, params InsertUserParams) (pgconn.CommandTag, error)
	// InsertUserBatch enqueues a InsertUser query into batch to be executed
	// later by the batch.
	InsertUserBatch(batch genericBatch, params InsertUserParams)
	// InsertUserScan scans the result of an executed InsertUserBatch query.
	InsertUserScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindUsers(ctx context.Context) ([]FindUsersRow, error)
	// FindUsersBatch enqueues a FindUsers query into batch to be executed
	// later by the batch.
	FindUsersBatch(batch genericBatch)
	// FindUsersScan scans the result of an executed FindUsersBatch query.
	FindUsersScan(results pgx.BatchResults) ([]FindUsersRow, error)

	FindUserByID(ctx context.Context, userID pgtype.Text) (FindUserByIDRow, error)
	// FindUserByIDBatch enqueues a FindUserByID query into batch to be executed
	// later by the batch.
	FindUserByIDBatch(batch genericBatch, userID pgtype.Text)
	// FindUserByIDScan scans the result of an executed FindUserByIDBatch query.
	FindUserByIDScan(results pgx.BatchResults) (FindUserByIDRow, error)

	FindUserByUsername(ctx context.Context, username pgtype.Text) (FindUserByUsernameRow, error)
	// FindUserByUsernameBatch enqueues a FindUserByUsername query into batch to be executed
	// later by the batch.
	FindUserByUsernameBatch(batch genericBatch, username pgtype.Text)
	// FindUserByUsernameScan scans the result of an executed FindUserByUsernameBatch query.
	FindUserByUsernameScan(results pgx.BatchResults) (FindUserByUsernameRow, error)

	FindUserBySessionToken(ctx context.Context, token pgtype.Text) (FindUserBySessionTokenRow, error)
	// FindUserBySessionTokenBatch enqueues a FindUserBySessionToken query into batch to be executed
	// later by the batch.
	FindUserBySessionTokenBatch(batch genericBatch, token pgtype.Text)
	// FindUserBySessionTokenScan scans the result of an executed FindUserBySessionTokenBatch query.
	FindUserBySessionTokenScan(results pgx.BatchResults) (FindUserBySessionTokenRow, error)

	FindUserByAuthenticationToken(ctx context.Context, token pgtype.Text) (FindUserByAuthenticationTokenRow, error)
	// FindUserByAuthenticationTokenBatch enqueues a FindUserByAuthenticationToken query into batch to be executed
	// later by the batch.
	FindUserByAuthenticationTokenBatch(batch genericBatch, token pgtype.Text)
	// FindUserByAuthenticationTokenScan scans the result of an executed FindUserByAuthenticationTokenBatch query.
	FindUserByAuthenticationTokenScan(results pgx.BatchResults) (FindUserByAuthenticationTokenRow, error)

	FindUserByAuthenticationTokenID(ctx context.Context, tokenID pgtype.Text) (FindUserByAuthenticationTokenIDRow, error)
	// FindUserByAuthenticationTokenIDBatch enqueues a FindUserByAuthenticationTokenID query into batch to be executed
	// later by the batch.
	FindUserByAuthenticationTokenIDBatch(batch genericBatch, tokenID pgtype.Text)
	// FindUserByAuthenticationTokenIDScan scans the result of an executed FindUserByAuthenticationTokenIDBatch query.
	FindUserByAuthenticationTokenIDScan(results pgx.BatchResults) (FindUserByAuthenticationTokenIDRow, error)

	DeleteUserByID(ctx context.Context, userID pgtype.Text) (pgtype.Text, error)
	// DeleteUserByIDBatch enqueues a DeleteUserByID query into batch to be executed
	// later by the batch.
	DeleteUserByIDBatch(batch genericBatch, userID pgtype.Text)
	// DeleteUserByIDScan scans the result of an executed DeleteUserByIDBatch query.
	DeleteUserByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	DeleteUserByUsername(ctx context.Context, username pgtype.Text) (pgtype.Text, error)
	// DeleteUserByUsernameBatch enqueues a DeleteUserByUsername query into batch to be executed
	// later by the batch.
	DeleteUserByUsernameBatch(batch genericBatch, username pgtype.Text)
	// DeleteUserByUsernameScan scans the result of an executed DeleteUserByUsernameBatch query.
	DeleteUserByUsernameScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertWorkspace(ctx context.Context, params InsertWorkspaceParams) (pgconn.CommandTag, error)
	// InsertWorkspaceBatch enqueues a InsertWorkspace query into batch to be executed
	// later by the batch.
	InsertWorkspaceBatch(batch genericBatch, params InsertWorkspaceParams)
	// InsertWorkspaceScan scans the result of an executed InsertWorkspaceBatch query.
	InsertWorkspaceScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindWorkspaces(ctx context.Context, params FindWorkspacesParams) ([]FindWorkspacesRow, error)
	// FindWorkspacesBatch enqueues a FindWorkspaces query into batch to be executed
	// later by the batch.
	FindWorkspacesBatch(batch genericBatch, params FindWorkspacesParams)
	// FindWorkspacesScan scans the result of an executed FindWorkspacesBatch query.
	FindWorkspacesScan(results pgx.BatchResults) ([]FindWorkspacesRow, error)

	CountWorkspaces(ctx context.Context, prefix pgtype.Text, organizationNames []string) (*int, error)
	// CountWorkspacesBatch enqueues a CountWorkspaces query into batch to be executed
	// later by the batch.
	CountWorkspacesBatch(batch genericBatch, prefix pgtype.Text, organizationNames []string)
	// CountWorkspacesScan scans the result of an executed CountWorkspacesBatch query.
	CountWorkspacesScan(results pgx.BatchResults) (*int, error)

	FindWorkspaceIDByName(ctx context.Context, name pgtype.Text, organizationName pgtype.Text) (pgtype.Text, error)
	// FindWorkspaceIDByNameBatch enqueues a FindWorkspaceIDByName query into batch to be executed
	// later by the batch.
	FindWorkspaceIDByNameBatch(batch genericBatch, name pgtype.Text, organizationName pgtype.Text)
	// FindWorkspaceIDByNameScan scans the result of an executed FindWorkspaceIDByNameBatch query.
	FindWorkspaceIDByNameScan(results pgx.BatchResults) (pgtype.Text, error)

	// FindWorkspaceByName finds a workspace by name and organization name.
	//
	FindWorkspaceByName(ctx context.Context, params FindWorkspaceByNameParams) (FindWorkspaceByNameRow, error)
	// FindWorkspaceByNameBatch enqueues a FindWorkspaceByName query into batch to be executed
	// later by the batch.
	FindWorkspaceByNameBatch(batch genericBatch, params FindWorkspaceByNameParams)
	// FindWorkspaceByNameScan scans the result of an executed FindWorkspaceByNameBatch query.
	FindWorkspaceByNameScan(results pgx.BatchResults) (FindWorkspaceByNameRow, error)

	FindWorkspaceByID(ctx context.Context, includeOrganization bool, id pgtype.Text) (FindWorkspaceByIDRow, error)
	// FindWorkspaceByIDBatch enqueues a FindWorkspaceByID query into batch to be executed
	// later by the batch.
	FindWorkspaceByIDBatch(batch genericBatch, includeOrganization bool, id pgtype.Text)
	// FindWorkspaceByIDScan scans the result of an executed FindWorkspaceByIDBatch query.
	FindWorkspaceByIDScan(results pgx.BatchResults) (FindWorkspaceByIDRow, error)

	FindWorkspaceByIDForUpdate(ctx context.Context, id pgtype.Text) (FindWorkspaceByIDForUpdateRow, error)
	// FindWorkspaceByIDForUpdateBatch enqueues a FindWorkspaceByIDForUpdate query into batch to be executed
	// later by the batch.
	FindWorkspaceByIDForUpdateBatch(batch genericBatch, id pgtype.Text)
	// FindWorkspaceByIDForUpdateScan scans the result of an executed FindWorkspaceByIDForUpdateBatch query.
	FindWorkspaceByIDForUpdateScan(results pgx.BatchResults) (FindWorkspaceByIDForUpdateRow, error)

	UpdateWorkspaceByID(ctx context.Context, params UpdateWorkspaceByIDParams) (pgtype.Text, error)
	// UpdateWorkspaceByIDBatch enqueues a UpdateWorkspaceByID query into batch to be executed
	// later by the batch.
	UpdateWorkspaceByIDBatch(batch genericBatch, params UpdateWorkspaceByIDParams)
	// UpdateWorkspaceByIDScan scans the result of an executed UpdateWorkspaceByIDBatch query.
	UpdateWorkspaceByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	UpdateWorkspaceLockByID(ctx context.Context, params UpdateWorkspaceLockByIDParams) (pgconn.CommandTag, error)
	// UpdateWorkspaceLockByIDBatch enqueues a UpdateWorkspaceLockByID query into batch to be executed
	// later by the batch.
	UpdateWorkspaceLockByIDBatch(batch genericBatch, params UpdateWorkspaceLockByIDParams)
	// UpdateWorkspaceLockByIDScan scans the result of an executed UpdateWorkspaceLockByIDBatch query.
	UpdateWorkspaceLockByIDScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	// DeleteOrganization deletes an organization by id.
	// DeleteWorkspaceByID deletes a workspace by id.
	//
	DeleteWorkspaceByID(ctx context.Context, workspaceID pgtype.Text) (pgconn.CommandTag, error)
	// DeleteWorkspaceByIDBatch enqueues a DeleteWorkspaceByID query into batch to be executed
	// later by the batch.
	DeleteWorkspaceByIDBatch(batch genericBatch, workspaceID pgtype.Text)
	// DeleteWorkspaceByIDScan scans the result of an executed DeleteWorkspaceByIDBatch query.
	DeleteWorkspaceByIDScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	// DeleteWorkspaceByName deletes a workspace by name and organization name.
	//
	DeleteWorkspaceByName(ctx context.Context, name pgtype.Text, organizationName pgtype.Text) (pgconn.CommandTag, error)
	// DeleteWorkspaceByNameBatch enqueues a DeleteWorkspaceByName query into batch to be executed
	// later by the batch.
	DeleteWorkspaceByNameBatch(batch genericBatch, name pgtype.Text, organizationName pgtype.Text)
	// DeleteWorkspaceByNameScan scans the result of an executed DeleteWorkspaceByNameBatch query.
	DeleteWorkspaceByNameScan(results pgx.BatchResults) (pgconn.CommandTag, error)
}

type DBQuerier struct {
	conn  genericConn   // underlying Postgres transport to use
	types *typeResolver // resolve types by name
}

var _ Querier = &DBQuerier{}

// genericConn is a connection to a Postgres database. This is usually backed by
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	// Query executes sql with args. If there is an error the returned Rows will
	// be returned in an error state. So it is allowed to ignore the error
	// returned from Query and handle it in Rows.
	Query(ctx context.Context, sql string, args ...interface{}) (pgx.Rows, error)

	// QueryRow is a convenience wrapper over Query. Any error that occurs while
	// querying is deferred until calling Scan on the returned Row. That Row will
	// error with pgx.ErrNoRows if no rows are returned.
	QueryRow(ctx context.Context, sql string, args ...interface{}) pgx.Row

	// Exec executes sql. sql can be either a prepared statement name or an SQL
	// string. arguments should be referenced positionally from the sql string
	// as $1, $2, etc.
	Exec(ctx context.Context, sql string, arguments ...interface{}) (pgconn.CommandTag, error)
}

// genericBatch batches queries to send in a single network request to a
// Postgres server. This is usually backed by *pgx.Batch.
type genericBatch interface {
	// Queue queues a query to batch b. query can be an SQL query or the name of a
	// prepared statement. See Queue on *pgx.Batch.
	Queue(query string, arguments ...interface{})
}

// NewQuerier creates a DBQuerier that implements Querier. conn is typically
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerier(conn genericConn) *DBQuerier {
	return NewQuerierConfig(conn, QuerierConfig{})
}

type QuerierConfig struct {
	// DataTypes contains pgtype.Value to use for encoding and decoding instead
	// of pggen-generated pgtype.ValueTranscoder.
	//
	// If OIDs are available for an input parameter type and all of its
	// transitive dependencies, pggen will use the binary encoding format for
	// the input parameter.
	DataTypes []pgtype.DataType
}

// NewQuerierConfig creates a DBQuerier that implements Querier with the given
// config. conn is typically *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerierConfig(conn genericConn, cfg QuerierConfig) *DBQuerier {
	return &DBQuerier{conn: conn, types: newTypeResolver(cfg.DataTypes)}
}

// WithTx creates a new DBQuerier that uses the transaction to run all queries.
func (q *DBQuerier) WithTx(tx pgx.Tx) (*DBQuerier, error) {
	return &DBQuerier{conn: tx}, nil
}

// preparer is any Postgres connection transport that provides a way to prepare
// a statement, most commonly *pgx.Conn.
type preparer interface {
	Prepare(ctx context.Context, name, sql string) (sd *pgconn.StatementDescription, err error)
}

// PrepareAllQueries executes a PREPARE statement for all pggen generated SQL
// queries in querier files. Typical usage is as the AfterConnect callback
// for pgxpool.Config
//
// pgx will use the prepared statement if available. Calling PrepareAllQueries
// is an optional optimization to avoid a network round-trip the first time pgx
// runs a query if pgx statement caching is enabled.
func PrepareAllQueries(ctx context.Context, p preparer) error {
	if _, err := p.Prepare(ctx, insertApplySQL, insertApplySQL); err != nil {
		return fmt.Errorf("prepare query 'InsertApply': %w", err)
	}
	if _, err := p.Prepare(ctx, findRunIDByApplyIDSQL, findRunIDByApplyIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindRunIDByApplyID': %w", err)
	}
	if _, err := p.Prepare(ctx, updateAppliedChangesByIDSQL, updateAppliedChangesByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateAppliedChangesByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertConfigurationVersionSQL, insertConfigurationVersionSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertConfigurationVersion': %w", err)
	}
	if _, err := p.Prepare(ctx, insertConfigurationVersionStatusTimestampSQL, insertConfigurationVersionStatusTimestampSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertConfigurationVersionStatusTimestamp': %w", err)
	}
	if _, err := p.Prepare(ctx, findConfigurationVersionsByWorkspaceIDSQL, findConfigurationVersionsByWorkspaceIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindConfigurationVersionsByWorkspaceID': %w", err)
	}
	if _, err := p.Prepare(ctx, countConfigurationVersionsByWorkspaceIDSQL, countConfigurationVersionsByWorkspaceIDSQL); err != nil {
		return fmt.Errorf("prepare query 'CountConfigurationVersionsByWorkspaceID': %w", err)
	}
	if _, err := p.Prepare(ctx, findConfigurationVersionByIDSQL, findConfigurationVersionByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindConfigurationVersionByID': %w", err)
	}
	if _, err := p.Prepare(ctx, findConfigurationVersionLatestByWorkspaceIDSQL, findConfigurationVersionLatestByWorkspaceIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindConfigurationVersionLatestByWorkspaceID': %w", err)
	}
	if _, err := p.Prepare(ctx, findConfigurationVersionByIDForUpdateSQL, findConfigurationVersionByIDForUpdateSQL); err != nil {
		return fmt.Errorf("prepare query 'FindConfigurationVersionByIDForUpdate': %w", err)
	}
	if _, err := p.Prepare(ctx, downloadConfigurationVersionSQL, downloadConfigurationVersionSQL); err != nil {
		return fmt.Errorf("prepare query 'DownloadConfigurationVersion': %w", err)
	}
	if _, err := p.Prepare(ctx, updateConfigurationVersionErroredByIDSQL, updateConfigurationVersionErroredByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateConfigurationVersionErroredByID': %w", err)
	}
	if _, err := p.Prepare(ctx, updateConfigurationVersionConfigByIDSQL, updateConfigurationVersionConfigByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateConfigurationVersionConfigByID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteConfigurationVersionByIDSQL, deleteConfigurationVersionByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteConfigurationVersionByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertJobSQL, insertJobSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertJob': %w", err)
	}
	if _, err := p.Prepare(ctx, insertJobStatusTimestampSQL, insertJobStatusTimestampSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertJobStatusTimestamp': %w", err)
	}
	if _, err := p.Prepare(ctx, updateJobStatusSQL, updateJobStatusSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateJobStatus': %w", err)
	}
	if _, err := p.Prepare(ctx, findJobIDByApplyIDSQL, findJobIDByApplyIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindJobIDByApplyID': %w", err)
	}
	if _, err := p.Prepare(ctx, findRunIDByJobIDSQL, findRunIDByJobIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindRunIDByJobID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertLogChunkSQL, insertLogChunkSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertLogChunk': %w", err)
	}
	if _, err := p.Prepare(ctx, findLogChunksSQL, findLogChunksSQL); err != nil {
		return fmt.Errorf("prepare query 'FindLogChunks': %w", err)
	}
	if _, err := p.Prepare(ctx, findAllLogChunksUsingApplyIDSQL, findAllLogChunksUsingApplyIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindAllLogChunksUsingApplyID': %w", err)
	}
	if _, err := p.Prepare(ctx, findOrganizationByNameSQL, findOrganizationByNameSQL); err != nil {
		return fmt.Errorf("prepare query 'FindOrganizationByName': %w", err)
	}
	if _, err := p.Prepare(ctx, findOrganizationByNameForUpdateSQL, findOrganizationByNameForUpdateSQL); err != nil {
		return fmt.Errorf("prepare query 'FindOrganizationByNameForUpdate': %w", err)
	}
	if _, err := p.Prepare(ctx, findOrganizationsSQL, findOrganizationsSQL); err != nil {
		return fmt.Errorf("prepare query 'FindOrganizations': %w", err)
	}
	if _, err := p.Prepare(ctx, countOrganizationsSQL, countOrganizationsSQL); err != nil {
		return fmt.Errorf("prepare query 'CountOrganizations': %w", err)
	}
	if _, err := p.Prepare(ctx, insertOrganizationSQL, insertOrganizationSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertOrganization': %w", err)
	}
	if _, err := p.Prepare(ctx, updateOrganizationByNameSQL, updateOrganizationByNameSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateOrganizationByName': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteOrganizationSQL, deleteOrganizationSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteOrganization': %w", err)
	}
	if _, err := p.Prepare(ctx, insertOrganizationMembershipSQL, insertOrganizationMembershipSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertOrganizationMembership': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteOrganizationMembershipSQL, deleteOrganizationMembershipSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteOrganizationMembership': %w", err)
	}
	if _, err := p.Prepare(ctx, insertPlanSQL, insertPlanSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertPlan': %w", err)
	}
	if _, err := p.Prepare(ctx, updatePlannedChangesByIDSQL, updatePlannedChangesByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdatePlannedChangesByID': %w", err)
	}
	if _, err := p.Prepare(ctx, findRunIDByPlanIDSQL, findRunIDByPlanIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindRunIDByPlanID': %w", err)
	}
	if _, err := p.Prepare(ctx, getPlanBinByIDSQL, getPlanBinByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'GetPlanBinByID': %w", err)
	}
	if _, err := p.Prepare(ctx, getPlanJSONByIDSQL, getPlanJSONByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'GetPlanJSONByID': %w", err)
	}
	if _, err := p.Prepare(ctx, updatePlanBinByIDSQL, updatePlanBinByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdatePlanBinByID': %w", err)
	}
	if _, err := p.Prepare(ctx, updatePlanJSONByIDSQL, updatePlanJSONByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdatePlanJSONByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertRunSQL, insertRunSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertRun': %w", err)
	}
	if _, err := p.Prepare(ctx, insertRunStatusTimestampSQL, insertRunStatusTimestampSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertRunStatusTimestamp': %w", err)
	}
	if _, err := p.Prepare(ctx, findRunsSQL, findRunsSQL); err != nil {
		return fmt.Errorf("prepare query 'FindRuns': %w", err)
	}
	if _, err := p.Prepare(ctx, countRunsSQL, countRunsSQL); err != nil {
		return fmt.Errorf("prepare query 'CountRuns': %w", err)
	}
	if _, err := p.Prepare(ctx, findRunByIDSQL, findRunByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindRunByID': %w", err)
	}
	if _, err := p.Prepare(ctx, findRunByIDForUpdateSQL, findRunByIDForUpdateSQL); err != nil {
		return fmt.Errorf("prepare query 'FindRunByIDForUpdate': %w", err)
	}
	if _, err := p.Prepare(ctx, updateRunStatusSQL, updateRunStatusSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateRunStatus': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteRunByIDSQL, deleteRunByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteRunByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertSessionSQL, insertSessionSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertSession': %w", err)
	}
	if _, err := p.Prepare(ctx, updateSessionExpirySQL, updateSessionExpirySQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateSessionExpiry': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteSessionByTokenSQL, deleteSessionByTokenSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteSessionByToken': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteSessionsExpiredSQL, deleteSessionsExpiredSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteSessionsExpired': %w", err)
	}
	if _, err := p.Prepare(ctx, insertStateVersionSQL, insertStateVersionSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertStateVersion': %w", err)
	}
	if _, err := p.Prepare(ctx, findStateVersionsByWorkspaceNameSQL, findStateVersionsByWorkspaceNameSQL); err != nil {
		return fmt.Errorf("prepare query 'FindStateVersionsByWorkspaceName': %w", err)
	}
	if _, err := p.Prepare(ctx, countStateVersionsByWorkspaceNameSQL, countStateVersionsByWorkspaceNameSQL); err != nil {
		return fmt.Errorf("prepare query 'CountStateVersionsByWorkspaceName': %w", err)
	}
	if _, err := p.Prepare(ctx, findStateVersionByIDSQL, findStateVersionByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindStateVersionByID': %w", err)
	}
	if _, err := p.Prepare(ctx, findStateVersionLatestByWorkspaceIDSQL, findStateVersionLatestByWorkspaceIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindStateVersionLatestByWorkspaceID': %w", err)
	}
	if _, err := p.Prepare(ctx, findStateVersionStateByIDSQL, findStateVersionStateByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindStateVersionStateByID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteStateVersionByIDSQL, deleteStateVersionByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteStateVersionByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertStateVersionOutputSQL, insertStateVersionOutputSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertStateVersionOutput': %w", err)
	}
	if _, err := p.Prepare(ctx, insertTokenSQL, insertTokenSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertToken': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteTokenByIDSQL, deleteTokenByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteTokenByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertUserSQL, insertUserSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertUser': %w", err)
	}
	if _, err := p.Prepare(ctx, findUsersSQL, findUsersSQL); err != nil {
		return fmt.Errorf("prepare query 'FindUsers': %w", err)
	}
	if _, err := p.Prepare(ctx, findUserByIDSQL, findUserByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindUserByID': %w", err)
	}
	if _, err := p.Prepare(ctx, findUserByUsernameSQL, findUserByUsernameSQL); err != nil {
		return fmt.Errorf("prepare query 'FindUserByUsername': %w", err)
	}
	if _, err := p.Prepare(ctx, findUserBySessionTokenSQL, findUserBySessionTokenSQL); err != nil {
		return fmt.Errorf("prepare query 'FindUserBySessionToken': %w", err)
	}
	if _, err := p.Prepare(ctx, findUserByAuthenticationTokenSQL, findUserByAuthenticationTokenSQL); err != nil {
		return fmt.Errorf("prepare query 'FindUserByAuthenticationToken': %w", err)
	}
	if _, err := p.Prepare(ctx, findUserByAuthenticationTokenIDSQL, findUserByAuthenticationTokenIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindUserByAuthenticationTokenID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteUserByIDSQL, deleteUserByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteUserByID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteUserByUsernameSQL, deleteUserByUsernameSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteUserByUsername': %w", err)
	}
	if _, err := p.Prepare(ctx, insertWorkspaceSQL, insertWorkspaceSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertWorkspace': %w", err)
	}
	if _, err := p.Prepare(ctx, findWorkspacesSQL, findWorkspacesSQL); err != nil {
		return fmt.Errorf("prepare query 'FindWorkspaces': %w", err)
	}
	if _, err := p.Prepare(ctx, countWorkspacesSQL, countWorkspacesSQL); err != nil {
		return fmt.Errorf("prepare query 'CountWorkspaces': %w", err)
	}
	if _, err := p.Prepare(ctx, findWorkspaceIDByNameSQL, findWorkspaceIDByNameSQL); err != nil {
		return fmt.Errorf("prepare query 'FindWorkspaceIDByName': %w", err)
	}
	if _, err := p.Prepare(ctx, findWorkspaceByNameSQL, findWorkspaceByNameSQL); err != nil {
		return fmt.Errorf("prepare query 'FindWorkspaceByName': %w", err)
	}
	if _, err := p.Prepare(ctx, findWorkspaceByIDSQL, findWorkspaceByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindWorkspaceByID': %w", err)
	}
	if _, err := p.Prepare(ctx, findWorkspaceByIDForUpdateSQL, findWorkspaceByIDForUpdateSQL); err != nil {
		return fmt.Errorf("prepare query 'FindWorkspaceByIDForUpdate': %w", err)
	}
	if _, err := p.Prepare(ctx, updateWorkspaceByIDSQL, updateWorkspaceByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateWorkspaceByID': %w", err)
	}
	if _, err := p.Prepare(ctx, updateWorkspaceLockByIDSQL, updateWorkspaceLockByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateWorkspaceLockByID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteWorkspaceByIDSQL, deleteWorkspaceByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteWorkspaceByID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteWorkspaceByNameSQL, deleteWorkspaceByNameSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteWorkspaceByName': %w", err)
	}
	return nil
}

// ConfigurationVersionStatusTimestamps represents the Postgres composite type "configuration_version_status_timestamps".
type ConfigurationVersionStatusTimestamps struct {
	ConfigurationVersionID pgtype.Text `json:"configuration_version_id"`
	Status                 pgtype.Text `json:"status"`
	Timestamp              time.Time   `json:"timestamp"`
}

// JobStatusTimestamps represents the Postgres composite type "job_status_timestamps".
type JobStatusTimestamps struct {
	JobID     pgtype.Text `json:"job_id"`
	Status    pgtype.Text `json:"status"`
	Timestamp time.Time   `json:"timestamp"`
}

// Organizations represents the Postgres composite type "organizations".
type Organizations struct {
	OrganizationID  pgtype.Text `json:"organization_id"`
	CreatedAt       time.Time   `json:"created_at"`
	UpdatedAt       time.Time   `json:"updated_at"`
	Name            pgtype.Text `json:"name"`
	SessionRemember int         `json:"session_remember"`
	SessionTimeout  int         `json:"session_timeout"`
}

// RunStatusTimestamps represents the Postgres composite type "run_status_timestamps".
type RunStatusTimestamps struct {
	RunID     pgtype.Text `json:"run_id"`
	Status    pgtype.Text `json:"status"`
	Timestamp time.Time   `json:"timestamp"`
}

// Runs represents the Postgres composite type "runs".
type Runs struct {
	RunID                  pgtype.Text `json:"run_id"`
	CreatedAt              time.Time   `json:"created_at"`
	IsDestroy              bool        `json:"is_destroy"`
	PositionInQueue        int         `json:"position_in_queue"`
	Refresh                bool        `json:"refresh"`
	RefreshOnly            bool        `json:"refresh_only"`
	ReplaceAddrs           []string    `json:"replace_addrs"`
	TargetAddrs            []string    `json:"target_addrs"`
	Status                 pgtype.Text `json:"status"`
	WorkspaceID            pgtype.Text `json:"workspace_id"`
	ConfigurationVersionID pgtype.Text `json:"configuration_version_id"`
}

// Sessions represents the Postgres composite type "sessions".
type Sessions struct {
	Token     pgtype.Text `json:"token"`
	CreatedAt time.Time   `json:"created_at"`
	Address   pgtype.Text `json:"address"`
	Expiry    time.Time   `json:"expiry"`
	UserID    pgtype.Text `json:"user_id"`
}

// StateVersionOutputs represents the Postgres composite type "state_version_outputs".
type StateVersionOutputs struct {
	StateVersionOutputID pgtype.Text `json:"state_version_output_id"`
	Name                 pgtype.Text `json:"name"`
	Sensitive            bool        `json:"sensitive"`
	Type                 pgtype.Text `json:"type"`
	Value                pgtype.Text `json:"value"`
	StateVersionID       pgtype.Text `json:"state_version_id"`
}

// Tokens represents the Postgres composite type "tokens".
type Tokens struct {
	TokenID     pgtype.Text `json:"token_id"`
	Token       pgtype.Text `json:"token"`
	CreatedAt   time.Time   `json:"created_at"`
	Description pgtype.Text `json:"description"`
	UserID      pgtype.Text `json:"user_id"`
}

// Users represents the Postgres composite type "users".
type Users struct {
	UserID    pgtype.Text `json:"user_id"`
	Username  pgtype.Text `json:"username"`
	CreatedAt time.Time   `json:"created_at"`
	UpdatedAt time.Time   `json:"updated_at"`
}

// typeResolver looks up the pgtype.ValueTranscoder by Postgres type name.
type typeResolver struct {
	connInfo *pgtype.ConnInfo // types by Postgres type name
}

func newTypeResolver(types []pgtype.DataType) *typeResolver {
	ci := pgtype.NewConnInfo()
	for _, typ := range types {
		if txt, ok := typ.Value.(textPreferrer); ok && typ.OID != unknownOID {
			typ.Value = txt.ValueTranscoder
		}
		ci.RegisterDataType(typ)
	}
	return &typeResolver{connInfo: ci}
}

// findValue find the OID, and pgtype.ValueTranscoder for a Postgres type name.
func (tr *typeResolver) findValue(name string) (uint32, pgtype.ValueTranscoder, bool) {
	typ, ok := tr.connInfo.DataTypeForName(name)
	if !ok {
		return 0, nil, false
	}
	v := pgtype.NewValue(typ.Value)
	return typ.OID, v.(pgtype.ValueTranscoder), true
}

// setValue sets the value of a ValueTranscoder to a value that should always
// work and panics if it fails.
func (tr *typeResolver) setValue(vt pgtype.ValueTranscoder, val interface{}) pgtype.ValueTranscoder {
	if err := vt.Set(val); err != nil {
		panic(fmt.Sprintf("set ValueTranscoder %T to %+v: %s", vt, val, err))
	}
	return vt
}

type compositeField struct {
	name       string                 // name of the field
	typeName   string                 // Postgres type name
	defaultVal pgtype.ValueTranscoder // default value to use
}

func (tr *typeResolver) newCompositeValue(name string, fields ...compositeField) pgtype.ValueTranscoder {
	if _, val, ok := tr.findValue(name); ok {
		return val
	}
	fs := make([]pgtype.CompositeTypeField, len(fields))
	vals := make([]pgtype.ValueTranscoder, len(fields))
	isBinaryOk := true
	for i, field := range fields {
		oid, val, ok := tr.findValue(field.typeName)
		if !ok {
			oid = unknownOID
			val = field.defaultVal
		}
		isBinaryOk = isBinaryOk && oid != unknownOID
		fs[i] = pgtype.CompositeTypeField{Name: field.name, OID: oid}
		vals[i] = val
	}
	// Okay to ignore error because it's only thrown when the number of field
	// names does not equal the number of ValueTranscoders.
	typ, _ := pgtype.NewCompositeTypeValues(name, fs, vals)
	if !isBinaryOk {
		return textPreferrer{typ, name}
	}
	return typ
}

func (tr *typeResolver) newArrayValue(name, elemName string, defaultVal func() pgtype.ValueTranscoder) pgtype.ValueTranscoder {
	if _, val, ok := tr.findValue(name); ok {
		return val
	}
	elemOID, elemVal, ok := tr.findValue(elemName)
	elemValFunc := func() pgtype.ValueTranscoder {
		return pgtype.NewValue(elemVal).(pgtype.ValueTranscoder)
	}
	if !ok {
		elemOID = unknownOID
		elemValFunc = defaultVal
	}
	typ := pgtype.NewArrayType(name, elemOID, elemValFunc)
	if elemOID == unknownOID {
		return textPreferrer{typ, name}
	}
	return typ
}

// newConfigurationVersionStatusTimestamps creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'configuration_version_status_timestamps'.
func (tr *typeResolver) newConfigurationVersionStatusTimestamps() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"configuration_version_status_timestamps",
		compositeField{"configuration_version_id", "text", &pgtype.Text{}},
		compositeField{"status", "text", &pgtype.Text{}},
		compositeField{"timestamp", "timestamptz", &pgtype.Timestamptz{}},
	)
}

// newJobStatusTimestamps creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'job_status_timestamps'.
func (tr *typeResolver) newJobStatusTimestamps() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"job_status_timestamps",
		compositeField{"job_id", "text", &pgtype.Text{}},
		compositeField{"status", "text", &pgtype.Text{}},
		compositeField{"timestamp", "timestamptz", &pgtype.Timestamptz{}},
	)
}

// newOrganizations creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'organizations'.
func (tr *typeResolver) newOrganizations() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"organizations",
		compositeField{"organization_id", "text", &pgtype.Text{}},
		compositeField{"created_at", "timestamptz", &pgtype.Timestamptz{}},
		compositeField{"updated_at", "timestamptz", &pgtype.Timestamptz{}},
		compositeField{"name", "text", &pgtype.Text{}},
		compositeField{"session_remember", "int4", &pgtype.Int4{}},
		compositeField{"session_timeout", "int4", &pgtype.Int4{}},
	)
}

// newRunStatusTimestamps creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'run_status_timestamps'.
func (tr *typeResolver) newRunStatusTimestamps() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"run_status_timestamps",
		compositeField{"run_id", "text", &pgtype.Text{}},
		compositeField{"status", "text", &pgtype.Text{}},
		compositeField{"timestamp", "timestamptz", &pgtype.Timestamptz{}},
	)
}

// newRuns creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'runs'.
func (tr *typeResolver) newRuns() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"runs",
		compositeField{"run_id", "text", &pgtype.Text{}},
		compositeField{"created_at", "timestamptz", &pgtype.Timestamptz{}},
		compositeField{"is_destroy", "bool", &pgtype.Bool{}},
		compositeField{"position_in_queue", "int4", &pgtype.Int4{}},
		compositeField{"refresh", "bool", &pgtype.Bool{}},
		compositeField{"refresh_only", "bool", &pgtype.Bool{}},
		compositeField{"replace_addrs", "_text", &pgtype.TextArray{}},
		compositeField{"target_addrs", "_text", &pgtype.TextArray{}},
		compositeField{"status", "text", &pgtype.Text{}},
		compositeField{"workspace_id", "text", &pgtype.Text{}},
		compositeField{"configuration_version_id", "text", &pgtype.Text{}},
	)
}

// newSessions creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'sessions'.
func (tr *typeResolver) newSessions() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"sessions",
		compositeField{"token", "text", &pgtype.Text{}},
		compositeField{"created_at", "timestamptz", &pgtype.Timestamptz{}},
		compositeField{"address", "text", &pgtype.Text{}},
		compositeField{"expiry", "timestamptz", &pgtype.Timestamptz{}},
		compositeField{"user_id", "text", &pgtype.Text{}},
	)
}

// newStateVersionOutputs creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'state_version_outputs'.
func (tr *typeResolver) newStateVersionOutputs() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"state_version_outputs",
		compositeField{"state_version_output_id", "text", &pgtype.Text{}},
		compositeField{"name", "text", &pgtype.Text{}},
		compositeField{"sensitive", "bool", &pgtype.Bool{}},
		compositeField{"type", "text", &pgtype.Text{}},
		compositeField{"value", "text", &pgtype.Text{}},
		compositeField{"state_version_id", "text", &pgtype.Text{}},
	)
}

// newTokens creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'tokens'.
func (tr *typeResolver) newTokens() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"tokens",
		compositeField{"token_id", "text", &pgtype.Text{}},
		compositeField{"token", "text", &pgtype.Text{}},
		compositeField{"created_at", "timestamptz", &pgtype.Timestamptz{}},
		compositeField{"description", "text", &pgtype.Text{}},
		compositeField{"user_id", "text", &pgtype.Text{}},
	)
}

// newUsers creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'users'.
func (tr *typeResolver) newUsers() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"users",
		compositeField{"user_id", "text", &pgtype.Text{}},
		compositeField{"username", "text", &pgtype.Text{}},
		compositeField{"created_at", "timestamptz", &pgtype.Timestamptz{}},
		compositeField{"updated_at", "timestamptz", &pgtype.Timestamptz{}},
	)
}

// newConfigurationVersionStatusTimestampsArray creates a new pgtype.ValueTranscoder for the Postgres
// '_configuration_version_status_timestamps' array type.
func (tr *typeResolver) newConfigurationVersionStatusTimestampsArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_configuration_version_status_timestamps", "configuration_version_status_timestamps", tr.newConfigurationVersionStatusTimestamps)
}

// newJobStatusTimestampsArray creates a new pgtype.ValueTranscoder for the Postgres
// '_job_status_timestamps' array type.
func (tr *typeResolver) newJobStatusTimestampsArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_job_status_timestamps", "job_status_timestamps", tr.newJobStatusTimestamps)
}

// newOrganizationsArray creates a new pgtype.ValueTranscoder for the Postgres
// '_organizations' array type.
func (tr *typeResolver) newOrganizationsArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_organizations", "organizations", tr.newOrganizations)
}

// newRunStatusTimestampsArray creates a new pgtype.ValueTranscoder for the Postgres
// '_run_status_timestamps' array type.
func (tr *typeResolver) newRunStatusTimestampsArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_run_status_timestamps", "run_status_timestamps", tr.newRunStatusTimestamps)
}

// newSessionsArray creates a new pgtype.ValueTranscoder for the Postgres
// '_sessions' array type.
func (tr *typeResolver) newSessionsArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_sessions", "sessions", tr.newSessions)
}

// newStateVersionOutputsArray creates a new pgtype.ValueTranscoder for the Postgres
// '_state_version_outputs' array type.
func (tr *typeResolver) newStateVersionOutputsArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_state_version_outputs", "state_version_outputs", tr.newStateVersionOutputs)
}

// newTokensArray creates a new pgtype.ValueTranscoder for the Postgres
// '_tokens' array type.
func (tr *typeResolver) newTokensArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_tokens", "tokens", tr.newTokens)
}

const insertApplySQL = `INSERT INTO applies (
    apply_id,
    job_id,
    additions,
    changes,
    destructions
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
);`

type InsertApplyParams struct {
	ApplyID      pgtype.Text
	JobID        pgtype.Text
	Additions    int
	Changes      int
	Destructions int
}

// InsertApply implements Querier.InsertApply.
func (q *DBQuerier) InsertApply(ctx context.Context, params InsertApplyParams) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertApply")
	cmdTag, err := q.conn.Exec(ctx, insertApplySQL, params.ApplyID, params.JobID, params.Additions, params.Changes, params.Destructions)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query InsertApply: %w", err)
	}
	return cmdTag, err
}

// InsertApplyBatch implements Querier.InsertApplyBatch.
func (q *DBQuerier) InsertApplyBatch(batch genericBatch, params InsertApplyParams) {
	batch.Queue(insertApplySQL, params.ApplyID, params.JobID, params.Additions, params.Changes, params.Destructions)
}

// InsertApplyScan implements Querier.InsertApplyScan.
func (q *DBQuerier) InsertApplyScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec InsertApplyBatch: %w", err)
	}
	return cmdTag, err
}

const findRunIDByApplyIDSQL = `SELECT jobs.run_id
FROM applies
JOIN jobs USING(job_id)
WHERE applies.apply_id = $1
;`

// FindRunIDByApplyID implements Querier.FindRunIDByApplyID.
func (q *DBQuerier) FindRunIDByApplyID(ctx context.Context, applyID pgtype.Text) (pgtype.Text, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindRunIDByApplyID")
	row := q.conn.QueryRow(ctx, findRunIDByApplyIDSQL, applyID)
	var item pgtype.Text
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query FindRunIDByApplyID: %w", err)
	}
	return item, nil
}

// FindRunIDByApplyIDBatch implements Querier.FindRunIDByApplyIDBatch.
func (q *DBQuerier) FindRunIDByApplyIDBatch(batch genericBatch, applyID pgtype.Text) {
	batch.Queue(findRunIDByApplyIDSQL, applyID)
}

// FindRunIDByApplyIDScan implements Querier.FindRunIDByApplyIDScan.
func (q *DBQuerier) FindRunIDByApplyIDScan(results pgx.BatchResults) (pgtype.Text, error) {
	row := results.QueryRow()
	var item pgtype.Text
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan FindRunIDByApplyIDBatch row: %w", err)
	}
	return item, nil
}

const updateAppliedChangesByIDSQL = `UPDATE applies
SET
    additions = $1,
    changes = $2,
    destructions = $3
WHERE apply_id = $4
RETURNING apply_id
;`

type UpdateAppliedChangesByIDParams struct {
	Additions    int
	Changes      int
	Destructions int
	ApplyID      pgtype.Text
}

// UpdateAppliedChangesByID implements Querier.UpdateAppliedChangesByID.
func (q *DBQuerier) UpdateAppliedChangesByID(ctx context.Context, params UpdateAppliedChangesByIDParams) (pgtype.Text, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateAppliedChangesByID")
	row := q.conn.QueryRow(ctx, updateAppliedChangesByIDSQL, params.Additions, params.Changes, params.Destructions, params.ApplyID)
	var item pgtype.Text
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query UpdateAppliedChangesByID: %w", err)
	}
	return item, nil
}

// UpdateAppliedChangesByIDBatch implements Querier.UpdateAppliedChangesByIDBatch.
func (q *DBQuerier) UpdateAppliedChangesByIDBatch(batch genericBatch, params UpdateAppliedChangesByIDParams) {
	batch.Queue(updateAppliedChangesByIDSQL, params.Additions, params.Changes, params.Destructions, params.ApplyID)
}

// UpdateAppliedChangesByIDScan implements Querier.UpdateAppliedChangesByIDScan.
func (q *DBQuerier) UpdateAppliedChangesByIDScan(results pgx.BatchResults) (pgtype.Text, error) {
	row := results.QueryRow()
	var item pgtype.Text
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan UpdateAppliedChangesByIDBatch row: %w", err)
	}
	return item, nil
}

// textPreferrer wraps a pgtype.ValueTranscoder and sets the preferred encoding
// format to text instead binary (the default). pggen uses the text format
// when the OID is unknownOID because the binary format requires the OID.
// Typically occurs if the results from QueryAllDataTypes aren't passed to
// NewQuerierConfig.
type textPreferrer struct {
	pgtype.ValueTranscoder
	typeName string
}

// PreferredParamFormat implements pgtype.ParamFormatPreferrer.
func (t textPreferrer) PreferredParamFormat() int16 { return pgtype.TextFormatCode }

func (t textPreferrer) NewTypeValue() pgtype.Value {
	return textPreferrer{pgtype.NewValue(t.ValueTranscoder).(pgtype.ValueTranscoder), t.typeName}
}

func (t textPreferrer) TypeName() string {
	return t.typeName
}

// unknownOID means we don't know the OID for a type. This is okay for decoding
// because pgx call DecodeText or DecodeBinary without requiring the OID. For
// encoding parameters, pggen uses textPreferrer if the OID is unknown.
const unknownOID = 0
