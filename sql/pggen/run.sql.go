// Code generated by pggen. DO NOT EDIT.

package pggen

import (
	"context"
	"fmt"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgx/v4"
	"time"
)

const insertRunSQL = `INSERT INTO runs (
    run_id,
    plan_id,
    apply_id,
    created_at,
    updated_at,
    is_destroy,
    position_in_queue,
    refresh,
    refresh_only,
    status,
    plan_status,
    apply_status,
    replace_addrs,
    target_addrs,
    configuration_version_id,
    workspace_id
) VALUES (
    $1,
    $2,
    $3,
    current_timestamp,
    current_timestamp,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14
)
RETURNING created_at, updated_at;`

type InsertRunParams struct {
	ID                     string
	PlanID                 string
	ApplyID                string
	IsDestroy              bool
	PositionInQueue        int
	Refresh                bool
	RefreshOnly            bool
	Status                 string
	PlanStatus             string
	ApplyStatus            string
	ReplaceAddrs           []string
	TargetAddrs            []string
	ConfigurationVersionID string
	WorkspaceID            string
}

type InsertRunRow struct {
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// InsertRun implements Querier.InsertRun.
func (q *DBQuerier) InsertRun(ctx context.Context, params InsertRunParams) (InsertRunRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertRun")
	row := q.conn.QueryRow(ctx, insertRunSQL, params.ID, params.PlanID, params.ApplyID, params.IsDestroy, params.PositionInQueue, params.Refresh, params.RefreshOnly, params.Status, params.PlanStatus, params.ApplyStatus, params.ReplaceAddrs, params.TargetAddrs, params.ConfigurationVersionID, params.WorkspaceID)
	var item InsertRunRow
	if err := row.Scan(&item.CreatedAt, &item.UpdatedAt); err != nil {
		return item, fmt.Errorf("query InsertRun: %w", err)
	}
	return item, nil
}

// InsertRunBatch implements Querier.InsertRunBatch.
func (q *DBQuerier) InsertRunBatch(batch genericBatch, params InsertRunParams) {
	batch.Queue(insertRunSQL, params.ID, params.PlanID, params.ApplyID, params.IsDestroy, params.PositionInQueue, params.Refresh, params.RefreshOnly, params.Status, params.PlanStatus, params.ApplyStatus, params.ReplaceAddrs, params.TargetAddrs, params.ConfigurationVersionID, params.WorkspaceID)
}

// InsertRunScan implements Querier.InsertRunScan.
func (q *DBQuerier) InsertRunScan(results pgx.BatchResults) (InsertRunRow, error) {
	row := results.QueryRow()
	var item InsertRunRow
	if err := row.Scan(&item.CreatedAt, &item.UpdatedAt); err != nil {
		return item, fmt.Errorf("scan InsertRunBatch row: %w", err)
	}
	return item, nil
}

const insertRunStatusTimestampSQL = `INSERT INTO run_status_timestamps (
    run_id,
    status,
    timestamp
) VALUES (
    $1,
    $2,
    current_timestamp
)
RETURNING *;`

type InsertRunStatusTimestampRow struct {
	RunID     string    `json:"run_id"`
	Status    string    `json:"status"`
	Timestamp time.Time `json:"timestamp"`
}

// InsertRunStatusTimestamp implements Querier.InsertRunStatusTimestamp.
func (q *DBQuerier) InsertRunStatusTimestamp(ctx context.Context, id string, status string) (InsertRunStatusTimestampRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertRunStatusTimestamp")
	row := q.conn.QueryRow(ctx, insertRunStatusTimestampSQL, id, status)
	var item InsertRunStatusTimestampRow
	if err := row.Scan(&item.RunID, &item.Status, &item.Timestamp); err != nil {
		return item, fmt.Errorf("query InsertRunStatusTimestamp: %w", err)
	}
	return item, nil
}

// InsertRunStatusTimestampBatch implements Querier.InsertRunStatusTimestampBatch.
func (q *DBQuerier) InsertRunStatusTimestampBatch(batch genericBatch, id string, status string) {
	batch.Queue(insertRunStatusTimestampSQL, id, status)
}

// InsertRunStatusTimestampScan implements Querier.InsertRunStatusTimestampScan.
func (q *DBQuerier) InsertRunStatusTimestampScan(results pgx.BatchResults) (InsertRunStatusTimestampRow, error) {
	row := results.QueryRow()
	var item InsertRunStatusTimestampRow
	if err := row.Scan(&item.RunID, &item.Status, &item.Timestamp); err != nil {
		return item, fmt.Errorf("scan InsertRunStatusTimestampBatch row: %w", err)
	}
	return item, nil
}

const findRunsSQL = `SELECT
    runs.run_id,
    runs.plan_id,
    runs.apply_id,
    runs.created_at,
    runs.updated_at,
    runs.is_destroy,
    runs.position_in_queue,
    runs.refresh,
    runs.refresh_only,
    runs.status,
    runs.plan_status,
    runs.apply_status,
    runs.replace_addrs,
    runs.target_addrs,
    runs.planned_changes,
    runs.applied_changes,
    (configuration_versions.*)::"configuration_versions" AS configuration_version,
    (workspaces.*)::"workspaces" AS workspace,
    (
        SELECT array_agg(rst.*) AS run_status_timestamps
        FROM run_status_timestamps rst
        WHERE rst.run_id = runs.run_id
        GROUP BY run_id
    ) AS run_status_timestamps,
    (
        SELECT array_agg(pst.*) AS plan_status_timestamps
        FROM plan_status_timestamps pst
        WHERE pst.run_id = runs.run_id
        GROUP BY run_id
    ) AS plan_status_timestamps,
    (
        SELECT array_agg(ast.*) AS apply_status_timestamps
        FROM apply_status_timestamps ast
        WHERE ast.run_id = runs.run_id
        GROUP BY run_id
    ) AS apply_status_timestamps
FROM runs
JOIN configuration_versions USING(workspace_id)
JOIN workspaces USING(workspace_id)
JOIN organizations USING(organization_id)
WHERE runs.workspace_id LIKE ANY($1)
AND runs.status LIKE ANY($2)
LIMIT $3 OFFSET $4
;`

type FindRunsParams struct {
	WorkspaceIds []string
	Statuses     []string
	Limit        int
	Offset       int
}

type FindRunsRow struct {
	RunID                 string                  `json:"run_id"`
	PlanID                string                  `json:"plan_id"`
	ApplyID               string                  `json:"apply_id"`
	CreatedAt             time.Time               `json:"created_at"`
	UpdatedAt             time.Time               `json:"updated_at"`
	IsDestroy             bool                    `json:"is_destroy"`
	PositionInQueue       int                     `json:"position_in_queue"`
	Refresh               bool                    `json:"refresh"`
	RefreshOnly           bool                    `json:"refresh_only"`
	Status                string                  `json:"status"`
	PlanStatus            string                  `json:"plan_status"`
	ApplyStatus           string                  `json:"apply_status"`
	ReplaceAddrs          []string                `json:"replace_addrs"`
	TargetAddrs           []string                `json:"target_addrs"`
	PlannedChanges        *ResourceReport         `json:"planned_changes"`
	AppliedChanges        *ResourceReport         `json:"applied_changes"`
	ConfigurationVersion  *ConfigurationVersions  `json:"configuration_version"`
	Workspace             *Workspaces             `json:"workspace"`
	RunStatusTimestamps   []RunStatusTimestamps   `json:"run_status_timestamps"`
	PlanStatusTimestamps  []PlanStatusTimestamps  `json:"plan_status_timestamps"`
	ApplyStatusTimestamps []ApplyStatusTimestamps `json:"apply_status_timestamps"`
}

// FindRuns implements Querier.FindRuns.
func (q *DBQuerier) FindRuns(ctx context.Context, params FindRunsParams) ([]FindRunsRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindRuns")
	rows, err := q.conn.Query(ctx, findRunsSQL, params.WorkspaceIds, params.Statuses, params.Limit, params.Offset)
	if err != nil {
		return nil, fmt.Errorf("query FindRuns: %w", err)
	}
	defer rows.Close()
	items := []FindRunsRow{}
	plannedChangesRow := q.types.newResourceReport()
	appliedChangesRow := q.types.newResourceReport()
	configurationVersionRow := q.types.newConfigurationVersions()
	workspaceRow := q.types.newWorkspaces()
	runStatusTimestampsArray := q.types.newRunStatusTimestampsArray()
	planStatusTimestampsArray := q.types.newPlanStatusTimestampsArray()
	applyStatusTimestampsArray := q.types.newApplyStatusTimestampsArray()
	for rows.Next() {
		var item FindRunsRow
		if err := rows.Scan(&item.RunID, &item.PlanID, &item.ApplyID, &item.CreatedAt, &item.UpdatedAt, &item.IsDestroy, &item.PositionInQueue, &item.Refresh, &item.RefreshOnly, &item.Status, &item.PlanStatus, &item.ApplyStatus, &item.ReplaceAddrs, &item.TargetAddrs, plannedChangesRow, appliedChangesRow, configurationVersionRow, workspaceRow, runStatusTimestampsArray, planStatusTimestampsArray, applyStatusTimestampsArray); err != nil {
			return nil, fmt.Errorf("scan FindRuns row: %w", err)
		}
		if err := plannedChangesRow.AssignTo(&item.PlannedChanges); err != nil {
			return nil, fmt.Errorf("assign FindRuns row: %w", err)
		}
		if err := appliedChangesRow.AssignTo(&item.AppliedChanges); err != nil {
			return nil, fmt.Errorf("assign FindRuns row: %w", err)
		}
		if err := configurationVersionRow.AssignTo(&item.ConfigurationVersion); err != nil {
			return nil, fmt.Errorf("assign FindRuns row: %w", err)
		}
		if err := workspaceRow.AssignTo(&item.Workspace); err != nil {
			return nil, fmt.Errorf("assign FindRuns row: %w", err)
		}
		if err := runStatusTimestampsArray.AssignTo(&item.RunStatusTimestamps); err != nil {
			return nil, fmt.Errorf("assign FindRuns row: %w", err)
		}
		if err := planStatusTimestampsArray.AssignTo(&item.PlanStatusTimestamps); err != nil {
			return nil, fmt.Errorf("assign FindRuns row: %w", err)
		}
		if err := applyStatusTimestampsArray.AssignTo(&item.ApplyStatusTimestamps); err != nil {
			return nil, fmt.Errorf("assign FindRuns row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindRuns rows: %w", err)
	}
	return items, err
}

// FindRunsBatch implements Querier.FindRunsBatch.
func (q *DBQuerier) FindRunsBatch(batch genericBatch, params FindRunsParams) {
	batch.Queue(findRunsSQL, params.WorkspaceIds, params.Statuses, params.Limit, params.Offset)
}

// FindRunsScan implements Querier.FindRunsScan.
func (q *DBQuerier) FindRunsScan(results pgx.BatchResults) ([]FindRunsRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query FindRunsBatch: %w", err)
	}
	defer rows.Close()
	items := []FindRunsRow{}
	plannedChangesRow := q.types.newResourceReport()
	appliedChangesRow := q.types.newResourceReport()
	configurationVersionRow := q.types.newConfigurationVersions()
	workspaceRow := q.types.newWorkspaces()
	runStatusTimestampsArray := q.types.newRunStatusTimestampsArray()
	planStatusTimestampsArray := q.types.newPlanStatusTimestampsArray()
	applyStatusTimestampsArray := q.types.newApplyStatusTimestampsArray()
	for rows.Next() {
		var item FindRunsRow
		if err := rows.Scan(&item.RunID, &item.PlanID, &item.ApplyID, &item.CreatedAt, &item.UpdatedAt, &item.IsDestroy, &item.PositionInQueue, &item.Refresh, &item.RefreshOnly, &item.Status, &item.PlanStatus, &item.ApplyStatus, &item.ReplaceAddrs, &item.TargetAddrs, plannedChangesRow, appliedChangesRow, configurationVersionRow, workspaceRow, runStatusTimestampsArray, planStatusTimestampsArray, applyStatusTimestampsArray); err != nil {
			return nil, fmt.Errorf("scan FindRunsBatch row: %w", err)
		}
		if err := plannedChangesRow.AssignTo(&item.PlannedChanges); err != nil {
			return nil, fmt.Errorf("assign FindRuns row: %w", err)
		}
		if err := appliedChangesRow.AssignTo(&item.AppliedChanges); err != nil {
			return nil, fmt.Errorf("assign FindRuns row: %w", err)
		}
		if err := configurationVersionRow.AssignTo(&item.ConfigurationVersion); err != nil {
			return nil, fmt.Errorf("assign FindRuns row: %w", err)
		}
		if err := workspaceRow.AssignTo(&item.Workspace); err != nil {
			return nil, fmt.Errorf("assign FindRuns row: %w", err)
		}
		if err := runStatusTimestampsArray.AssignTo(&item.RunStatusTimestamps); err != nil {
			return nil, fmt.Errorf("assign FindRuns row: %w", err)
		}
		if err := planStatusTimestampsArray.AssignTo(&item.PlanStatusTimestamps); err != nil {
			return nil, fmt.Errorf("assign FindRuns row: %w", err)
		}
		if err := applyStatusTimestampsArray.AssignTo(&item.ApplyStatusTimestamps); err != nil {
			return nil, fmt.Errorf("assign FindRuns row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindRunsBatch rows: %w", err)
	}
	return items, err
}

const countRunsSQL = `SELECT count(*)
FROM runs
WHERE workspace_id LIKE ANY($1)
AND status LIKE ANY($2)
;`

// CountRuns implements Querier.CountRuns.
func (q *DBQuerier) CountRuns(ctx context.Context, workspaceIds []string, statuses []string) (*int, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "CountRuns")
	row := q.conn.QueryRow(ctx, countRunsSQL, workspaceIds, statuses)
	var item int
	if err := row.Scan(&item); err != nil {
		return &item, fmt.Errorf("query CountRuns: %w", err)
	}
	return &item, nil
}

// CountRunsBatch implements Querier.CountRunsBatch.
func (q *DBQuerier) CountRunsBatch(batch genericBatch, workspaceIds []string, statuses []string) {
	batch.Queue(countRunsSQL, workspaceIds, statuses)
}

// CountRunsScan implements Querier.CountRunsScan.
func (q *DBQuerier) CountRunsScan(results pgx.BatchResults) (*int, error) {
	row := results.QueryRow()
	var item int
	if err := row.Scan(&item); err != nil {
		return &item, fmt.Errorf("scan CountRunsBatch row: %w", err)
	}
	return &item, nil
}

const findRunByIDSQL = `SELECT
    runs.run_id,
    runs.plan_id,
    runs.apply_id,
    runs.created_at,
    runs.updated_at,
    runs.is_destroy,
    runs.position_in_queue,
    runs.refresh,
    runs.refresh_only,
    runs.status,
    runs.plan_status,
    runs.apply_status,
    runs.replace_addrs,
    runs.target_addrs,
    runs.planned_changes,
    runs.applied_changes,
    (configuration_versions.*)::"configuration_versions" AS configuration_version,
    (workspaces.*)::"workspaces" AS workspace,
    (
        SELECT array_agg(rst.*) AS run_status_timestamps
        FROM run_status_timestamps rst
        WHERE rst.run_id = runs.run_id
        GROUP BY run_id
    ) AS run_status_timestamps,
    (
        SELECT array_agg(pst.*) AS plan_status_timestamps
        FROM plan_status_timestamps pst
        WHERE pst.run_id = runs.run_id
        GROUP BY run_id
    ) AS plan_status_timestamps,
    (
        SELECT array_agg(ast.*) AS apply_status_timestamps
        FROM apply_status_timestamps ast
        WHERE ast.run_id = runs.run_id
        GROUP BY run_id
    ) AS apply_status_timestamps
FROM runs
JOIN configuration_versions USING(workspace_id)
JOIN workspaces USING(workspace_id)
WHERE runs.run_id = $1
;`

type FindRunByIDRow struct {
	RunID                 string                  `json:"run_id"`
	PlanID                string                  `json:"plan_id"`
	ApplyID               string                  `json:"apply_id"`
	CreatedAt             time.Time               `json:"created_at"`
	UpdatedAt             time.Time               `json:"updated_at"`
	IsDestroy             bool                    `json:"is_destroy"`
	PositionInQueue       int                     `json:"position_in_queue"`
	Refresh               bool                    `json:"refresh"`
	RefreshOnly           bool                    `json:"refresh_only"`
	Status                string                  `json:"status"`
	PlanStatus            string                  `json:"plan_status"`
	ApplyStatus           string                  `json:"apply_status"`
	ReplaceAddrs          []string                `json:"replace_addrs"`
	TargetAddrs           []string                `json:"target_addrs"`
	PlannedChanges        *ResourceReport         `json:"planned_changes"`
	AppliedChanges        *ResourceReport         `json:"applied_changes"`
	ConfigurationVersion  *ConfigurationVersions  `json:"configuration_version"`
	Workspace             *Workspaces             `json:"workspace"`
	RunStatusTimestamps   []RunStatusTimestamps   `json:"run_status_timestamps"`
	PlanStatusTimestamps  []PlanStatusTimestamps  `json:"plan_status_timestamps"`
	ApplyStatusTimestamps []ApplyStatusTimestamps `json:"apply_status_timestamps"`
}

// FindRunByID implements Querier.FindRunByID.
func (q *DBQuerier) FindRunByID(ctx context.Context, runID string) (FindRunByIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindRunByID")
	row := q.conn.QueryRow(ctx, findRunByIDSQL, runID)
	var item FindRunByIDRow
	plannedChangesRow := q.types.newResourceReport()
	appliedChangesRow := q.types.newResourceReport()
	configurationVersionRow := q.types.newConfigurationVersions()
	workspaceRow := q.types.newWorkspaces()
	runStatusTimestampsArray := q.types.newRunStatusTimestampsArray()
	planStatusTimestampsArray := q.types.newPlanStatusTimestampsArray()
	applyStatusTimestampsArray := q.types.newApplyStatusTimestampsArray()
	if err := row.Scan(&item.RunID, &item.PlanID, &item.ApplyID, &item.CreatedAt, &item.UpdatedAt, &item.IsDestroy, &item.PositionInQueue, &item.Refresh, &item.RefreshOnly, &item.Status, &item.PlanStatus, &item.ApplyStatus, &item.ReplaceAddrs, &item.TargetAddrs, plannedChangesRow, appliedChangesRow, configurationVersionRow, workspaceRow, runStatusTimestampsArray, planStatusTimestampsArray, applyStatusTimestampsArray); err != nil {
		return item, fmt.Errorf("query FindRunByID: %w", err)
	}
	if err := plannedChangesRow.AssignTo(&item.PlannedChanges); err != nil {
		return item, fmt.Errorf("assign FindRunByID row: %w", err)
	}
	if err := appliedChangesRow.AssignTo(&item.AppliedChanges); err != nil {
		return item, fmt.Errorf("assign FindRunByID row: %w", err)
	}
	if err := configurationVersionRow.AssignTo(&item.ConfigurationVersion); err != nil {
		return item, fmt.Errorf("assign FindRunByID row: %w", err)
	}
	if err := workspaceRow.AssignTo(&item.Workspace); err != nil {
		return item, fmt.Errorf("assign FindRunByID row: %w", err)
	}
	if err := runStatusTimestampsArray.AssignTo(&item.RunStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByID row: %w", err)
	}
	if err := planStatusTimestampsArray.AssignTo(&item.PlanStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByID row: %w", err)
	}
	if err := applyStatusTimestampsArray.AssignTo(&item.ApplyStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByID row: %w", err)
	}
	return item, nil
}

// FindRunByIDBatch implements Querier.FindRunByIDBatch.
func (q *DBQuerier) FindRunByIDBatch(batch genericBatch, runID string) {
	batch.Queue(findRunByIDSQL, runID)
}

// FindRunByIDScan implements Querier.FindRunByIDScan.
func (q *DBQuerier) FindRunByIDScan(results pgx.BatchResults) (FindRunByIDRow, error) {
	row := results.QueryRow()
	var item FindRunByIDRow
	plannedChangesRow := q.types.newResourceReport()
	appliedChangesRow := q.types.newResourceReport()
	configurationVersionRow := q.types.newConfigurationVersions()
	workspaceRow := q.types.newWorkspaces()
	runStatusTimestampsArray := q.types.newRunStatusTimestampsArray()
	planStatusTimestampsArray := q.types.newPlanStatusTimestampsArray()
	applyStatusTimestampsArray := q.types.newApplyStatusTimestampsArray()
	if err := row.Scan(&item.RunID, &item.PlanID, &item.ApplyID, &item.CreatedAt, &item.UpdatedAt, &item.IsDestroy, &item.PositionInQueue, &item.Refresh, &item.RefreshOnly, &item.Status, &item.PlanStatus, &item.ApplyStatus, &item.ReplaceAddrs, &item.TargetAddrs, plannedChangesRow, appliedChangesRow, configurationVersionRow, workspaceRow, runStatusTimestampsArray, planStatusTimestampsArray, applyStatusTimestampsArray); err != nil {
		return item, fmt.Errorf("scan FindRunByIDBatch row: %w", err)
	}
	if err := plannedChangesRow.AssignTo(&item.PlannedChanges); err != nil {
		return item, fmt.Errorf("assign FindRunByID row: %w", err)
	}
	if err := appliedChangesRow.AssignTo(&item.AppliedChanges); err != nil {
		return item, fmt.Errorf("assign FindRunByID row: %w", err)
	}
	if err := configurationVersionRow.AssignTo(&item.ConfigurationVersion); err != nil {
		return item, fmt.Errorf("assign FindRunByID row: %w", err)
	}
	if err := workspaceRow.AssignTo(&item.Workspace); err != nil {
		return item, fmt.Errorf("assign FindRunByID row: %w", err)
	}
	if err := runStatusTimestampsArray.AssignTo(&item.RunStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByID row: %w", err)
	}
	if err := planStatusTimestampsArray.AssignTo(&item.PlanStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByID row: %w", err)
	}
	if err := applyStatusTimestampsArray.AssignTo(&item.ApplyStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByID row: %w", err)
	}
	return item, nil
}

const findRunByPlanIDSQL = `SELECT
    runs.run_id,
    runs.plan_id,
    runs.apply_id,
    runs.created_at,
    runs.updated_at,
    runs.is_destroy,
    runs.position_in_queue,
    runs.refresh,
    runs.refresh_only,
    runs.status,
    runs.plan_status,
    runs.apply_status,
    runs.replace_addrs,
    runs.target_addrs,
    runs.planned_changes,
    runs.applied_changes,
    (configuration_versions.*)::"configuration_versions" AS configuration_version,
    (workspaces.*)::"workspaces" AS workspace,
    (
        SELECT array_agg(rst.*) AS run_status_timestamps
        FROM run_status_timestamps rst
        WHERE rst.run_id = runs.run_id
        GROUP BY run_id
    ) AS run_status_timestamps,
    (
        SELECT array_agg(pst.*) AS plan_status_timestamps
        FROM plan_status_timestamps pst
        WHERE pst.run_id = runs.run_id
        GROUP BY run_id
    ) AS plan_status_timestamps,
    (
        SELECT array_agg(ast.*) AS apply_status_timestamps
        FROM apply_status_timestamps ast
        WHERE ast.run_id = runs.run_id
        GROUP BY run_id
    ) AS apply_status_timestamps
FROM runs
JOIN configuration_versions USING(workspace_id)
JOIN workspaces USING(workspace_id)
WHERE runs.plan_id = $1
;`

type FindRunByPlanIDRow struct {
	RunID                 string                  `json:"run_id"`
	PlanID                string                  `json:"plan_id"`
	ApplyID               string                  `json:"apply_id"`
	CreatedAt             time.Time               `json:"created_at"`
	UpdatedAt             time.Time               `json:"updated_at"`
	IsDestroy             bool                    `json:"is_destroy"`
	PositionInQueue       int                     `json:"position_in_queue"`
	Refresh               bool                    `json:"refresh"`
	RefreshOnly           bool                    `json:"refresh_only"`
	Status                string                  `json:"status"`
	PlanStatus            string                  `json:"plan_status"`
	ApplyStatus           string                  `json:"apply_status"`
	ReplaceAddrs          []string                `json:"replace_addrs"`
	TargetAddrs           []string                `json:"target_addrs"`
	PlannedChanges        *ResourceReport         `json:"planned_changes"`
	AppliedChanges        *ResourceReport         `json:"applied_changes"`
	ConfigurationVersion  *ConfigurationVersions  `json:"configuration_version"`
	Workspace             *Workspaces             `json:"workspace"`
	RunStatusTimestamps   []RunStatusTimestamps   `json:"run_status_timestamps"`
	PlanStatusTimestamps  []PlanStatusTimestamps  `json:"plan_status_timestamps"`
	ApplyStatusTimestamps []ApplyStatusTimestamps `json:"apply_status_timestamps"`
}

// FindRunByPlanID implements Querier.FindRunByPlanID.
func (q *DBQuerier) FindRunByPlanID(ctx context.Context, planID string) (FindRunByPlanIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindRunByPlanID")
	row := q.conn.QueryRow(ctx, findRunByPlanIDSQL, planID)
	var item FindRunByPlanIDRow
	plannedChangesRow := q.types.newResourceReport()
	appliedChangesRow := q.types.newResourceReport()
	configurationVersionRow := q.types.newConfigurationVersions()
	workspaceRow := q.types.newWorkspaces()
	runStatusTimestampsArray := q.types.newRunStatusTimestampsArray()
	planStatusTimestampsArray := q.types.newPlanStatusTimestampsArray()
	applyStatusTimestampsArray := q.types.newApplyStatusTimestampsArray()
	if err := row.Scan(&item.RunID, &item.PlanID, &item.ApplyID, &item.CreatedAt, &item.UpdatedAt, &item.IsDestroy, &item.PositionInQueue, &item.Refresh, &item.RefreshOnly, &item.Status, &item.PlanStatus, &item.ApplyStatus, &item.ReplaceAddrs, &item.TargetAddrs, plannedChangesRow, appliedChangesRow, configurationVersionRow, workspaceRow, runStatusTimestampsArray, planStatusTimestampsArray, applyStatusTimestampsArray); err != nil {
		return item, fmt.Errorf("query FindRunByPlanID: %w", err)
	}
	if err := plannedChangesRow.AssignTo(&item.PlannedChanges); err != nil {
		return item, fmt.Errorf("assign FindRunByPlanID row: %w", err)
	}
	if err := appliedChangesRow.AssignTo(&item.AppliedChanges); err != nil {
		return item, fmt.Errorf("assign FindRunByPlanID row: %w", err)
	}
	if err := configurationVersionRow.AssignTo(&item.ConfigurationVersion); err != nil {
		return item, fmt.Errorf("assign FindRunByPlanID row: %w", err)
	}
	if err := workspaceRow.AssignTo(&item.Workspace); err != nil {
		return item, fmt.Errorf("assign FindRunByPlanID row: %w", err)
	}
	if err := runStatusTimestampsArray.AssignTo(&item.RunStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByPlanID row: %w", err)
	}
	if err := planStatusTimestampsArray.AssignTo(&item.PlanStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByPlanID row: %w", err)
	}
	if err := applyStatusTimestampsArray.AssignTo(&item.ApplyStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByPlanID row: %w", err)
	}
	return item, nil
}

// FindRunByPlanIDBatch implements Querier.FindRunByPlanIDBatch.
func (q *DBQuerier) FindRunByPlanIDBatch(batch genericBatch, planID string) {
	batch.Queue(findRunByPlanIDSQL, planID)
}

// FindRunByPlanIDScan implements Querier.FindRunByPlanIDScan.
func (q *DBQuerier) FindRunByPlanIDScan(results pgx.BatchResults) (FindRunByPlanIDRow, error) {
	row := results.QueryRow()
	var item FindRunByPlanIDRow
	plannedChangesRow := q.types.newResourceReport()
	appliedChangesRow := q.types.newResourceReport()
	configurationVersionRow := q.types.newConfigurationVersions()
	workspaceRow := q.types.newWorkspaces()
	runStatusTimestampsArray := q.types.newRunStatusTimestampsArray()
	planStatusTimestampsArray := q.types.newPlanStatusTimestampsArray()
	applyStatusTimestampsArray := q.types.newApplyStatusTimestampsArray()
	if err := row.Scan(&item.RunID, &item.PlanID, &item.ApplyID, &item.CreatedAt, &item.UpdatedAt, &item.IsDestroy, &item.PositionInQueue, &item.Refresh, &item.RefreshOnly, &item.Status, &item.PlanStatus, &item.ApplyStatus, &item.ReplaceAddrs, &item.TargetAddrs, plannedChangesRow, appliedChangesRow, configurationVersionRow, workspaceRow, runStatusTimestampsArray, planStatusTimestampsArray, applyStatusTimestampsArray); err != nil {
		return item, fmt.Errorf("scan FindRunByPlanIDBatch row: %w", err)
	}
	if err := plannedChangesRow.AssignTo(&item.PlannedChanges); err != nil {
		return item, fmt.Errorf("assign FindRunByPlanID row: %w", err)
	}
	if err := appliedChangesRow.AssignTo(&item.AppliedChanges); err != nil {
		return item, fmt.Errorf("assign FindRunByPlanID row: %w", err)
	}
	if err := configurationVersionRow.AssignTo(&item.ConfigurationVersion); err != nil {
		return item, fmt.Errorf("assign FindRunByPlanID row: %w", err)
	}
	if err := workspaceRow.AssignTo(&item.Workspace); err != nil {
		return item, fmt.Errorf("assign FindRunByPlanID row: %w", err)
	}
	if err := runStatusTimestampsArray.AssignTo(&item.RunStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByPlanID row: %w", err)
	}
	if err := planStatusTimestampsArray.AssignTo(&item.PlanStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByPlanID row: %w", err)
	}
	if err := applyStatusTimestampsArray.AssignTo(&item.ApplyStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByPlanID row: %w", err)
	}
	return item, nil
}

const findRunByApplyIDSQL = `SELECT
    runs.run_id,
    runs.plan_id,
    runs.apply_id,
    runs.created_at,
    runs.updated_at,
    runs.is_destroy,
    runs.position_in_queue,
    runs.refresh,
    runs.refresh_only,
    runs.status,
    runs.plan_status,
    runs.apply_status,
    runs.replace_addrs,
    runs.target_addrs,
    runs.planned_changes,
    runs.applied_changes,
    (configuration_versions.*)::"configuration_versions" AS configuration_version,
    (workspaces.*)::"workspaces" AS workspace,
    (
        SELECT array_agg(rst.*) AS run_status_timestamps
        FROM run_status_timestamps rst
        WHERE rst.run_id = runs.run_id
        GROUP BY run_id
    ) AS run_status_timestamps,
    (
        SELECT array_agg(pst.*) AS plan_status_timestamps
        FROM plan_status_timestamps pst
        WHERE pst.run_id = runs.run_id
        GROUP BY run_id
    ) AS plan_status_timestamps,
    (
        SELECT array_agg(ast.*) AS apply_status_timestamps
        FROM apply_status_timestamps ast
        WHERE ast.run_id = runs.run_id
        GROUP BY run_id
    ) AS apply_status_timestamps
FROM runs
JOIN configuration_versions USING(workspace_id)
JOIN workspaces USING(workspace_id)
WHERE runs.apply_id = $1
;`

type FindRunByApplyIDRow struct {
	RunID                 string                  `json:"run_id"`
	PlanID                string                  `json:"plan_id"`
	ApplyID               string                  `json:"apply_id"`
	CreatedAt             time.Time               `json:"created_at"`
	UpdatedAt             time.Time               `json:"updated_at"`
	IsDestroy             bool                    `json:"is_destroy"`
	PositionInQueue       int                     `json:"position_in_queue"`
	Refresh               bool                    `json:"refresh"`
	RefreshOnly           bool                    `json:"refresh_only"`
	Status                string                  `json:"status"`
	PlanStatus            string                  `json:"plan_status"`
	ApplyStatus           string                  `json:"apply_status"`
	ReplaceAddrs          []string                `json:"replace_addrs"`
	TargetAddrs           []string                `json:"target_addrs"`
	PlannedChanges        *ResourceReport         `json:"planned_changes"`
	AppliedChanges        *ResourceReport         `json:"applied_changes"`
	ConfigurationVersion  *ConfigurationVersions  `json:"configuration_version"`
	Workspace             *Workspaces             `json:"workspace"`
	RunStatusTimestamps   []RunStatusTimestamps   `json:"run_status_timestamps"`
	PlanStatusTimestamps  []PlanStatusTimestamps  `json:"plan_status_timestamps"`
	ApplyStatusTimestamps []ApplyStatusTimestamps `json:"apply_status_timestamps"`
}

// FindRunByApplyID implements Querier.FindRunByApplyID.
func (q *DBQuerier) FindRunByApplyID(ctx context.Context, applyID string) (FindRunByApplyIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindRunByApplyID")
	row := q.conn.QueryRow(ctx, findRunByApplyIDSQL, applyID)
	var item FindRunByApplyIDRow
	plannedChangesRow := q.types.newResourceReport()
	appliedChangesRow := q.types.newResourceReport()
	configurationVersionRow := q.types.newConfigurationVersions()
	workspaceRow := q.types.newWorkspaces()
	runStatusTimestampsArray := q.types.newRunStatusTimestampsArray()
	planStatusTimestampsArray := q.types.newPlanStatusTimestampsArray()
	applyStatusTimestampsArray := q.types.newApplyStatusTimestampsArray()
	if err := row.Scan(&item.RunID, &item.PlanID, &item.ApplyID, &item.CreatedAt, &item.UpdatedAt, &item.IsDestroy, &item.PositionInQueue, &item.Refresh, &item.RefreshOnly, &item.Status, &item.PlanStatus, &item.ApplyStatus, &item.ReplaceAddrs, &item.TargetAddrs, plannedChangesRow, appliedChangesRow, configurationVersionRow, workspaceRow, runStatusTimestampsArray, planStatusTimestampsArray, applyStatusTimestampsArray); err != nil {
		return item, fmt.Errorf("query FindRunByApplyID: %w", err)
	}
	if err := plannedChangesRow.AssignTo(&item.PlannedChanges); err != nil {
		return item, fmt.Errorf("assign FindRunByApplyID row: %w", err)
	}
	if err := appliedChangesRow.AssignTo(&item.AppliedChanges); err != nil {
		return item, fmt.Errorf("assign FindRunByApplyID row: %w", err)
	}
	if err := configurationVersionRow.AssignTo(&item.ConfigurationVersion); err != nil {
		return item, fmt.Errorf("assign FindRunByApplyID row: %w", err)
	}
	if err := workspaceRow.AssignTo(&item.Workspace); err != nil {
		return item, fmt.Errorf("assign FindRunByApplyID row: %w", err)
	}
	if err := runStatusTimestampsArray.AssignTo(&item.RunStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByApplyID row: %w", err)
	}
	if err := planStatusTimestampsArray.AssignTo(&item.PlanStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByApplyID row: %w", err)
	}
	if err := applyStatusTimestampsArray.AssignTo(&item.ApplyStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByApplyID row: %w", err)
	}
	return item, nil
}

// FindRunByApplyIDBatch implements Querier.FindRunByApplyIDBatch.
func (q *DBQuerier) FindRunByApplyIDBatch(batch genericBatch, applyID string) {
	batch.Queue(findRunByApplyIDSQL, applyID)
}

// FindRunByApplyIDScan implements Querier.FindRunByApplyIDScan.
func (q *DBQuerier) FindRunByApplyIDScan(results pgx.BatchResults) (FindRunByApplyIDRow, error) {
	row := results.QueryRow()
	var item FindRunByApplyIDRow
	plannedChangesRow := q.types.newResourceReport()
	appliedChangesRow := q.types.newResourceReport()
	configurationVersionRow := q.types.newConfigurationVersions()
	workspaceRow := q.types.newWorkspaces()
	runStatusTimestampsArray := q.types.newRunStatusTimestampsArray()
	planStatusTimestampsArray := q.types.newPlanStatusTimestampsArray()
	applyStatusTimestampsArray := q.types.newApplyStatusTimestampsArray()
	if err := row.Scan(&item.RunID, &item.PlanID, &item.ApplyID, &item.CreatedAt, &item.UpdatedAt, &item.IsDestroy, &item.PositionInQueue, &item.Refresh, &item.RefreshOnly, &item.Status, &item.PlanStatus, &item.ApplyStatus, &item.ReplaceAddrs, &item.TargetAddrs, plannedChangesRow, appliedChangesRow, configurationVersionRow, workspaceRow, runStatusTimestampsArray, planStatusTimestampsArray, applyStatusTimestampsArray); err != nil {
		return item, fmt.Errorf("scan FindRunByApplyIDBatch row: %w", err)
	}
	if err := plannedChangesRow.AssignTo(&item.PlannedChanges); err != nil {
		return item, fmt.Errorf("assign FindRunByApplyID row: %w", err)
	}
	if err := appliedChangesRow.AssignTo(&item.AppliedChanges); err != nil {
		return item, fmt.Errorf("assign FindRunByApplyID row: %w", err)
	}
	if err := configurationVersionRow.AssignTo(&item.ConfigurationVersion); err != nil {
		return item, fmt.Errorf("assign FindRunByApplyID row: %w", err)
	}
	if err := workspaceRow.AssignTo(&item.Workspace); err != nil {
		return item, fmt.Errorf("assign FindRunByApplyID row: %w", err)
	}
	if err := runStatusTimestampsArray.AssignTo(&item.RunStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByApplyID row: %w", err)
	}
	if err := planStatusTimestampsArray.AssignTo(&item.PlanStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByApplyID row: %w", err)
	}
	if err := applyStatusTimestampsArray.AssignTo(&item.ApplyStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByApplyID row: %w", err)
	}
	return item, nil
}

const findRunByIDForUpdateSQL = `SELECT
    runs.run_id,
    runs.plan_id,
    runs.apply_id,
    runs.created_at,
    runs.updated_at,
    runs.is_destroy,
    runs.position_in_queue,
    runs.refresh,
    runs.refresh_only,
    runs.status,
    runs.plan_status,
    runs.apply_status,
    runs.replace_addrs,
    runs.target_addrs,
    runs.planned_changes,
    runs.applied_changes,
    (configuration_versions.*)::"configuration_versions" AS configuration_version,
    (workspaces.*)::"workspaces" AS workspace,
    (
        SELECT array_agg(rst.*) AS run_status_timestamps
        FROM run_status_timestamps rst
        WHERE rst.run_id = runs.run_id
        GROUP BY run_id
    ) AS run_status_timestamps,
    (
        SELECT array_agg(pst.*) AS plan_status_timestamps
        FROM plan_status_timestamps pst
        WHERE pst.run_id = runs.run_id
        GROUP BY run_id
    ) AS plan_status_timestamps,
    (
        SELECT array_agg(ast.*) AS apply_status_timestamps
        FROM apply_status_timestamps ast
        WHERE ast.run_id = runs.run_id
        GROUP BY run_id
    ) AS apply_status_timestamps
FROM runs
JOIN configuration_versions USING(workspace_id)
JOIN workspaces USING(workspace_id)
WHERE runs.run_id = $1
FOR UPDATE
;`

type FindRunByIDForUpdateRow struct {
	RunID                 string                  `json:"run_id"`
	PlanID                string                  `json:"plan_id"`
	ApplyID               string                  `json:"apply_id"`
	CreatedAt             time.Time               `json:"created_at"`
	UpdatedAt             time.Time               `json:"updated_at"`
	IsDestroy             bool                    `json:"is_destroy"`
	PositionInQueue       int                     `json:"position_in_queue"`
	Refresh               bool                    `json:"refresh"`
	RefreshOnly           bool                    `json:"refresh_only"`
	Status                string                  `json:"status"`
	PlanStatus            string                  `json:"plan_status"`
	ApplyStatus           string                  `json:"apply_status"`
	ReplaceAddrs          []string                `json:"replace_addrs"`
	TargetAddrs           []string                `json:"target_addrs"`
	PlannedChanges        *ResourceReport         `json:"planned_changes"`
	AppliedChanges        *ResourceReport         `json:"applied_changes"`
	ConfigurationVersion  *ConfigurationVersions  `json:"configuration_version"`
	Workspace             *Workspaces             `json:"workspace"`
	RunStatusTimestamps   []RunStatusTimestamps   `json:"run_status_timestamps"`
	PlanStatusTimestamps  []PlanStatusTimestamps  `json:"plan_status_timestamps"`
	ApplyStatusTimestamps []ApplyStatusTimestamps `json:"apply_status_timestamps"`
}

// FindRunByIDForUpdate implements Querier.FindRunByIDForUpdate.
func (q *DBQuerier) FindRunByIDForUpdate(ctx context.Context, runID string) (FindRunByIDForUpdateRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindRunByIDForUpdate")
	row := q.conn.QueryRow(ctx, findRunByIDForUpdateSQL, runID)
	var item FindRunByIDForUpdateRow
	plannedChangesRow := q.types.newResourceReport()
	appliedChangesRow := q.types.newResourceReport()
	configurationVersionRow := q.types.newConfigurationVersions()
	workspaceRow := q.types.newWorkspaces()
	runStatusTimestampsArray := q.types.newRunStatusTimestampsArray()
	planStatusTimestampsArray := q.types.newPlanStatusTimestampsArray()
	applyStatusTimestampsArray := q.types.newApplyStatusTimestampsArray()
	if err := row.Scan(&item.RunID, &item.PlanID, &item.ApplyID, &item.CreatedAt, &item.UpdatedAt, &item.IsDestroy, &item.PositionInQueue, &item.Refresh, &item.RefreshOnly, &item.Status, &item.PlanStatus, &item.ApplyStatus, &item.ReplaceAddrs, &item.TargetAddrs, plannedChangesRow, appliedChangesRow, configurationVersionRow, workspaceRow, runStatusTimestampsArray, planStatusTimestampsArray, applyStatusTimestampsArray); err != nil {
		return item, fmt.Errorf("query FindRunByIDForUpdate: %w", err)
	}
	if err := plannedChangesRow.AssignTo(&item.PlannedChanges); err != nil {
		return item, fmt.Errorf("assign FindRunByIDForUpdate row: %w", err)
	}
	if err := appliedChangesRow.AssignTo(&item.AppliedChanges); err != nil {
		return item, fmt.Errorf("assign FindRunByIDForUpdate row: %w", err)
	}
	if err := configurationVersionRow.AssignTo(&item.ConfigurationVersion); err != nil {
		return item, fmt.Errorf("assign FindRunByIDForUpdate row: %w", err)
	}
	if err := workspaceRow.AssignTo(&item.Workspace); err != nil {
		return item, fmt.Errorf("assign FindRunByIDForUpdate row: %w", err)
	}
	if err := runStatusTimestampsArray.AssignTo(&item.RunStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByIDForUpdate row: %w", err)
	}
	if err := planStatusTimestampsArray.AssignTo(&item.PlanStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByIDForUpdate row: %w", err)
	}
	if err := applyStatusTimestampsArray.AssignTo(&item.ApplyStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByIDForUpdate row: %w", err)
	}
	return item, nil
}

// FindRunByIDForUpdateBatch implements Querier.FindRunByIDForUpdateBatch.
func (q *DBQuerier) FindRunByIDForUpdateBatch(batch genericBatch, runID string) {
	batch.Queue(findRunByIDForUpdateSQL, runID)
}

// FindRunByIDForUpdateScan implements Querier.FindRunByIDForUpdateScan.
func (q *DBQuerier) FindRunByIDForUpdateScan(results pgx.BatchResults) (FindRunByIDForUpdateRow, error) {
	row := results.QueryRow()
	var item FindRunByIDForUpdateRow
	plannedChangesRow := q.types.newResourceReport()
	appliedChangesRow := q.types.newResourceReport()
	configurationVersionRow := q.types.newConfigurationVersions()
	workspaceRow := q.types.newWorkspaces()
	runStatusTimestampsArray := q.types.newRunStatusTimestampsArray()
	planStatusTimestampsArray := q.types.newPlanStatusTimestampsArray()
	applyStatusTimestampsArray := q.types.newApplyStatusTimestampsArray()
	if err := row.Scan(&item.RunID, &item.PlanID, &item.ApplyID, &item.CreatedAt, &item.UpdatedAt, &item.IsDestroy, &item.PositionInQueue, &item.Refresh, &item.RefreshOnly, &item.Status, &item.PlanStatus, &item.ApplyStatus, &item.ReplaceAddrs, &item.TargetAddrs, plannedChangesRow, appliedChangesRow, configurationVersionRow, workspaceRow, runStatusTimestampsArray, planStatusTimestampsArray, applyStatusTimestampsArray); err != nil {
		return item, fmt.Errorf("scan FindRunByIDForUpdateBatch row: %w", err)
	}
	if err := plannedChangesRow.AssignTo(&item.PlannedChanges); err != nil {
		return item, fmt.Errorf("assign FindRunByIDForUpdate row: %w", err)
	}
	if err := appliedChangesRow.AssignTo(&item.AppliedChanges); err != nil {
		return item, fmt.Errorf("assign FindRunByIDForUpdate row: %w", err)
	}
	if err := configurationVersionRow.AssignTo(&item.ConfigurationVersion); err != nil {
		return item, fmt.Errorf("assign FindRunByIDForUpdate row: %w", err)
	}
	if err := workspaceRow.AssignTo(&item.Workspace); err != nil {
		return item, fmt.Errorf("assign FindRunByIDForUpdate row: %w", err)
	}
	if err := runStatusTimestampsArray.AssignTo(&item.RunStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByIDForUpdate row: %w", err)
	}
	if err := planStatusTimestampsArray.AssignTo(&item.PlanStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByIDForUpdate row: %w", err)
	}
	if err := applyStatusTimestampsArray.AssignTo(&item.ApplyStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByIDForUpdate row: %w", err)
	}
	return item, nil
}

const findRunByPlanIDForUpdateSQL = `SELECT
    runs.run_id,
    runs.plan_id,
    runs.apply_id,
    runs.created_at,
    runs.updated_at,
    runs.is_destroy,
    runs.position_in_queue,
    runs.refresh,
    runs.refresh_only,
    runs.status,
    runs.plan_status,
    runs.apply_status,
    runs.replace_addrs,
    runs.target_addrs,
    runs.planned_changes,
    runs.applied_changes,
    (configuration_versions.*)::"configuration_versions" AS configuration_version,
    (workspaces.*)::"workspaces" AS workspace,
    (
        SELECT array_agg(rst.*) AS run_status_timestamps
        FROM run_status_timestamps rst
        WHERE rst.run_id = runs.run_id
        GROUP BY run_id
    ) AS run_status_timestamps,
    (
        SELECT array_agg(pst.*) AS plan_status_timestamps
        FROM plan_status_timestamps pst
        WHERE pst.run_id = runs.run_id
        GROUP BY run_id
    ) AS plan_status_timestamps,
    (
        SELECT array_agg(ast.*) AS apply_status_timestamps
        FROM apply_status_timestamps ast
        WHERE ast.run_id = runs.run_id
        GROUP BY run_id
    ) AS apply_status_timestamps
FROM runs
JOIN configuration_versions USING(workspace_id)
JOIN workspaces USING(workspace_id)
WHERE runs.plan_id = $1
FOR UPDATE
;`

type FindRunByPlanIDForUpdateRow struct {
	RunID                 string                  `json:"run_id"`
	PlanID                string                  `json:"plan_id"`
	ApplyID               string                  `json:"apply_id"`
	CreatedAt             time.Time               `json:"created_at"`
	UpdatedAt             time.Time               `json:"updated_at"`
	IsDestroy             bool                    `json:"is_destroy"`
	PositionInQueue       int                     `json:"position_in_queue"`
	Refresh               bool                    `json:"refresh"`
	RefreshOnly           bool                    `json:"refresh_only"`
	Status                string                  `json:"status"`
	PlanStatus            string                  `json:"plan_status"`
	ApplyStatus           string                  `json:"apply_status"`
	ReplaceAddrs          []string                `json:"replace_addrs"`
	TargetAddrs           []string                `json:"target_addrs"`
	PlannedChanges        *ResourceReport         `json:"planned_changes"`
	AppliedChanges        *ResourceReport         `json:"applied_changes"`
	ConfigurationVersion  *ConfigurationVersions  `json:"configuration_version"`
	Workspace             *Workspaces             `json:"workspace"`
	RunStatusTimestamps   []RunStatusTimestamps   `json:"run_status_timestamps"`
	PlanStatusTimestamps  []PlanStatusTimestamps  `json:"plan_status_timestamps"`
	ApplyStatusTimestamps []ApplyStatusTimestamps `json:"apply_status_timestamps"`
}

// FindRunByPlanIDForUpdate implements Querier.FindRunByPlanIDForUpdate.
func (q *DBQuerier) FindRunByPlanIDForUpdate(ctx context.Context, planID string) (FindRunByPlanIDForUpdateRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindRunByPlanIDForUpdate")
	row := q.conn.QueryRow(ctx, findRunByPlanIDForUpdateSQL, planID)
	var item FindRunByPlanIDForUpdateRow
	plannedChangesRow := q.types.newResourceReport()
	appliedChangesRow := q.types.newResourceReport()
	configurationVersionRow := q.types.newConfigurationVersions()
	workspaceRow := q.types.newWorkspaces()
	runStatusTimestampsArray := q.types.newRunStatusTimestampsArray()
	planStatusTimestampsArray := q.types.newPlanStatusTimestampsArray()
	applyStatusTimestampsArray := q.types.newApplyStatusTimestampsArray()
	if err := row.Scan(&item.RunID, &item.PlanID, &item.ApplyID, &item.CreatedAt, &item.UpdatedAt, &item.IsDestroy, &item.PositionInQueue, &item.Refresh, &item.RefreshOnly, &item.Status, &item.PlanStatus, &item.ApplyStatus, &item.ReplaceAddrs, &item.TargetAddrs, plannedChangesRow, appliedChangesRow, configurationVersionRow, workspaceRow, runStatusTimestampsArray, planStatusTimestampsArray, applyStatusTimestampsArray); err != nil {
		return item, fmt.Errorf("query FindRunByPlanIDForUpdate: %w", err)
	}
	if err := plannedChangesRow.AssignTo(&item.PlannedChanges); err != nil {
		return item, fmt.Errorf("assign FindRunByPlanIDForUpdate row: %w", err)
	}
	if err := appliedChangesRow.AssignTo(&item.AppliedChanges); err != nil {
		return item, fmt.Errorf("assign FindRunByPlanIDForUpdate row: %w", err)
	}
	if err := configurationVersionRow.AssignTo(&item.ConfigurationVersion); err != nil {
		return item, fmt.Errorf("assign FindRunByPlanIDForUpdate row: %w", err)
	}
	if err := workspaceRow.AssignTo(&item.Workspace); err != nil {
		return item, fmt.Errorf("assign FindRunByPlanIDForUpdate row: %w", err)
	}
	if err := runStatusTimestampsArray.AssignTo(&item.RunStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByPlanIDForUpdate row: %w", err)
	}
	if err := planStatusTimestampsArray.AssignTo(&item.PlanStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByPlanIDForUpdate row: %w", err)
	}
	if err := applyStatusTimestampsArray.AssignTo(&item.ApplyStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByPlanIDForUpdate row: %w", err)
	}
	return item, nil
}

// FindRunByPlanIDForUpdateBatch implements Querier.FindRunByPlanIDForUpdateBatch.
func (q *DBQuerier) FindRunByPlanIDForUpdateBatch(batch genericBatch, planID string) {
	batch.Queue(findRunByPlanIDForUpdateSQL, planID)
}

// FindRunByPlanIDForUpdateScan implements Querier.FindRunByPlanIDForUpdateScan.
func (q *DBQuerier) FindRunByPlanIDForUpdateScan(results pgx.BatchResults) (FindRunByPlanIDForUpdateRow, error) {
	row := results.QueryRow()
	var item FindRunByPlanIDForUpdateRow
	plannedChangesRow := q.types.newResourceReport()
	appliedChangesRow := q.types.newResourceReport()
	configurationVersionRow := q.types.newConfigurationVersions()
	workspaceRow := q.types.newWorkspaces()
	runStatusTimestampsArray := q.types.newRunStatusTimestampsArray()
	planStatusTimestampsArray := q.types.newPlanStatusTimestampsArray()
	applyStatusTimestampsArray := q.types.newApplyStatusTimestampsArray()
	if err := row.Scan(&item.RunID, &item.PlanID, &item.ApplyID, &item.CreatedAt, &item.UpdatedAt, &item.IsDestroy, &item.PositionInQueue, &item.Refresh, &item.RefreshOnly, &item.Status, &item.PlanStatus, &item.ApplyStatus, &item.ReplaceAddrs, &item.TargetAddrs, plannedChangesRow, appliedChangesRow, configurationVersionRow, workspaceRow, runStatusTimestampsArray, planStatusTimestampsArray, applyStatusTimestampsArray); err != nil {
		return item, fmt.Errorf("scan FindRunByPlanIDForUpdateBatch row: %w", err)
	}
	if err := plannedChangesRow.AssignTo(&item.PlannedChanges); err != nil {
		return item, fmt.Errorf("assign FindRunByPlanIDForUpdate row: %w", err)
	}
	if err := appliedChangesRow.AssignTo(&item.AppliedChanges); err != nil {
		return item, fmt.Errorf("assign FindRunByPlanIDForUpdate row: %w", err)
	}
	if err := configurationVersionRow.AssignTo(&item.ConfigurationVersion); err != nil {
		return item, fmt.Errorf("assign FindRunByPlanIDForUpdate row: %w", err)
	}
	if err := workspaceRow.AssignTo(&item.Workspace); err != nil {
		return item, fmt.Errorf("assign FindRunByPlanIDForUpdate row: %w", err)
	}
	if err := runStatusTimestampsArray.AssignTo(&item.RunStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByPlanIDForUpdate row: %w", err)
	}
	if err := planStatusTimestampsArray.AssignTo(&item.PlanStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByPlanIDForUpdate row: %w", err)
	}
	if err := applyStatusTimestampsArray.AssignTo(&item.ApplyStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByPlanIDForUpdate row: %w", err)
	}
	return item, nil
}

const findRunByApplyIDForUpdateSQL = `SELECT
    runs.run_id,
    runs.plan_id,
    runs.apply_id,
    runs.created_at,
    runs.updated_at,
    runs.is_destroy,
    runs.position_in_queue,
    runs.refresh,
    runs.refresh_only,
    runs.status,
    runs.plan_status,
    runs.apply_status,
    runs.replace_addrs,
    runs.target_addrs,
    runs.planned_changes,
    runs.applied_changes,
    (configuration_versions.*)::"configuration_versions" AS configuration_version,
    (workspaces.*)::"workspaces" AS workspace,
    (
        SELECT array_agg(rst.*) AS run_status_timestamps
        FROM run_status_timestamps rst
        WHERE rst.run_id = runs.run_id
        GROUP BY run_id
    ) AS run_status_timestamps,
    (
        SELECT array_agg(pst.*) AS plan_status_timestamps
        FROM plan_status_timestamps pst
        WHERE pst.run_id = runs.run_id
        GROUP BY run_id
    ) AS plan_status_timestamps,
    (
        SELECT array_agg(ast.*) AS apply_status_timestamps
        FROM apply_status_timestamps ast
        WHERE ast.run_id = runs.run_id
        GROUP BY run_id
    ) AS apply_status_timestamps
FROM runs
JOIN configuration_versions USING(workspace_id)
JOIN workspaces USING(workspace_id)
WHERE runs.apply_id = $1
FOR UPDATE
;`

type FindRunByApplyIDForUpdateRow struct {
	RunID                 string                  `json:"run_id"`
	PlanID                string                  `json:"plan_id"`
	ApplyID               string                  `json:"apply_id"`
	CreatedAt             time.Time               `json:"created_at"`
	UpdatedAt             time.Time               `json:"updated_at"`
	IsDestroy             bool                    `json:"is_destroy"`
	PositionInQueue       int                     `json:"position_in_queue"`
	Refresh               bool                    `json:"refresh"`
	RefreshOnly           bool                    `json:"refresh_only"`
	Status                string                  `json:"status"`
	PlanStatus            string                  `json:"plan_status"`
	ApplyStatus           string                  `json:"apply_status"`
	ReplaceAddrs          []string                `json:"replace_addrs"`
	TargetAddrs           []string                `json:"target_addrs"`
	PlannedChanges        *ResourceReport         `json:"planned_changes"`
	AppliedChanges        *ResourceReport         `json:"applied_changes"`
	ConfigurationVersion  *ConfigurationVersions  `json:"configuration_version"`
	Workspace             *Workspaces             `json:"workspace"`
	RunStatusTimestamps   []RunStatusTimestamps   `json:"run_status_timestamps"`
	PlanStatusTimestamps  []PlanStatusTimestamps  `json:"plan_status_timestamps"`
	ApplyStatusTimestamps []ApplyStatusTimestamps `json:"apply_status_timestamps"`
}

// FindRunByApplyIDForUpdate implements Querier.FindRunByApplyIDForUpdate.
func (q *DBQuerier) FindRunByApplyIDForUpdate(ctx context.Context, applyID string) (FindRunByApplyIDForUpdateRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindRunByApplyIDForUpdate")
	row := q.conn.QueryRow(ctx, findRunByApplyIDForUpdateSQL, applyID)
	var item FindRunByApplyIDForUpdateRow
	plannedChangesRow := q.types.newResourceReport()
	appliedChangesRow := q.types.newResourceReport()
	configurationVersionRow := q.types.newConfigurationVersions()
	workspaceRow := q.types.newWorkspaces()
	runStatusTimestampsArray := q.types.newRunStatusTimestampsArray()
	planStatusTimestampsArray := q.types.newPlanStatusTimestampsArray()
	applyStatusTimestampsArray := q.types.newApplyStatusTimestampsArray()
	if err := row.Scan(&item.RunID, &item.PlanID, &item.ApplyID, &item.CreatedAt, &item.UpdatedAt, &item.IsDestroy, &item.PositionInQueue, &item.Refresh, &item.RefreshOnly, &item.Status, &item.PlanStatus, &item.ApplyStatus, &item.ReplaceAddrs, &item.TargetAddrs, plannedChangesRow, appliedChangesRow, configurationVersionRow, workspaceRow, runStatusTimestampsArray, planStatusTimestampsArray, applyStatusTimestampsArray); err != nil {
		return item, fmt.Errorf("query FindRunByApplyIDForUpdate: %w", err)
	}
	if err := plannedChangesRow.AssignTo(&item.PlannedChanges); err != nil {
		return item, fmt.Errorf("assign FindRunByApplyIDForUpdate row: %w", err)
	}
	if err := appliedChangesRow.AssignTo(&item.AppliedChanges); err != nil {
		return item, fmt.Errorf("assign FindRunByApplyIDForUpdate row: %w", err)
	}
	if err := configurationVersionRow.AssignTo(&item.ConfigurationVersion); err != nil {
		return item, fmt.Errorf("assign FindRunByApplyIDForUpdate row: %w", err)
	}
	if err := workspaceRow.AssignTo(&item.Workspace); err != nil {
		return item, fmt.Errorf("assign FindRunByApplyIDForUpdate row: %w", err)
	}
	if err := runStatusTimestampsArray.AssignTo(&item.RunStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByApplyIDForUpdate row: %w", err)
	}
	if err := planStatusTimestampsArray.AssignTo(&item.PlanStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByApplyIDForUpdate row: %w", err)
	}
	if err := applyStatusTimestampsArray.AssignTo(&item.ApplyStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByApplyIDForUpdate row: %w", err)
	}
	return item, nil
}

// FindRunByApplyIDForUpdateBatch implements Querier.FindRunByApplyIDForUpdateBatch.
func (q *DBQuerier) FindRunByApplyIDForUpdateBatch(batch genericBatch, applyID string) {
	batch.Queue(findRunByApplyIDForUpdateSQL, applyID)
}

// FindRunByApplyIDForUpdateScan implements Querier.FindRunByApplyIDForUpdateScan.
func (q *DBQuerier) FindRunByApplyIDForUpdateScan(results pgx.BatchResults) (FindRunByApplyIDForUpdateRow, error) {
	row := results.QueryRow()
	var item FindRunByApplyIDForUpdateRow
	plannedChangesRow := q.types.newResourceReport()
	appliedChangesRow := q.types.newResourceReport()
	configurationVersionRow := q.types.newConfigurationVersions()
	workspaceRow := q.types.newWorkspaces()
	runStatusTimestampsArray := q.types.newRunStatusTimestampsArray()
	planStatusTimestampsArray := q.types.newPlanStatusTimestampsArray()
	applyStatusTimestampsArray := q.types.newApplyStatusTimestampsArray()
	if err := row.Scan(&item.RunID, &item.PlanID, &item.ApplyID, &item.CreatedAt, &item.UpdatedAt, &item.IsDestroy, &item.PositionInQueue, &item.Refresh, &item.RefreshOnly, &item.Status, &item.PlanStatus, &item.ApplyStatus, &item.ReplaceAddrs, &item.TargetAddrs, plannedChangesRow, appliedChangesRow, configurationVersionRow, workspaceRow, runStatusTimestampsArray, planStatusTimestampsArray, applyStatusTimestampsArray); err != nil {
		return item, fmt.Errorf("scan FindRunByApplyIDForUpdateBatch row: %w", err)
	}
	if err := plannedChangesRow.AssignTo(&item.PlannedChanges); err != nil {
		return item, fmt.Errorf("assign FindRunByApplyIDForUpdate row: %w", err)
	}
	if err := appliedChangesRow.AssignTo(&item.AppliedChanges); err != nil {
		return item, fmt.Errorf("assign FindRunByApplyIDForUpdate row: %w", err)
	}
	if err := configurationVersionRow.AssignTo(&item.ConfigurationVersion); err != nil {
		return item, fmt.Errorf("assign FindRunByApplyIDForUpdate row: %w", err)
	}
	if err := workspaceRow.AssignTo(&item.Workspace); err != nil {
		return item, fmt.Errorf("assign FindRunByApplyIDForUpdate row: %w", err)
	}
	if err := runStatusTimestampsArray.AssignTo(&item.RunStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByApplyIDForUpdate row: %w", err)
	}
	if err := planStatusTimestampsArray.AssignTo(&item.PlanStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByApplyIDForUpdate row: %w", err)
	}
	if err := applyStatusTimestampsArray.AssignTo(&item.ApplyStatusTimestamps); err != nil {
		return item, fmt.Errorf("assign FindRunByApplyIDForUpdate row: %w", err)
	}
	return item, nil
}

const updateRunStatusSQL = `UPDATE runs
SET
    status = $1,
    updated_at = current_timestamp
WHERE run_id = $2
RETURNING updated_at
;`

// UpdateRunStatus implements Querier.UpdateRunStatus.
func (q *DBQuerier) UpdateRunStatus(ctx context.Context, status string, id string) (time.Time, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateRunStatus")
	row := q.conn.QueryRow(ctx, updateRunStatusSQL, status, id)
	var item time.Time
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query UpdateRunStatus: %w", err)
	}
	return item, nil
}

// UpdateRunStatusBatch implements Querier.UpdateRunStatusBatch.
func (q *DBQuerier) UpdateRunStatusBatch(batch genericBatch, status string, id string) {
	batch.Queue(updateRunStatusSQL, status, id)
}

// UpdateRunStatusScan implements Querier.UpdateRunStatusScan.
func (q *DBQuerier) UpdateRunStatusScan(results pgx.BatchResults) (time.Time, error) {
	row := results.QueryRow()
	var item time.Time
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan UpdateRunStatusBatch row: %w", err)
	}
	return item, nil
}

const updateRunPlannedChangesByRunIDSQL = `UPDATE runs
SET planned_changes = ROW($1, $2, $3)
WHERE run_id = $4
;`

type UpdateRunPlannedChangesByRunIDParams struct {
	Additions    int
	Changes      int
	Destructions int
	ID           string
}

// UpdateRunPlannedChangesByRunID implements Querier.UpdateRunPlannedChangesByRunID.
func (q *DBQuerier) UpdateRunPlannedChangesByRunID(ctx context.Context, params UpdateRunPlannedChangesByRunIDParams) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateRunPlannedChangesByRunID")
	cmdTag, err := q.conn.Exec(ctx, updateRunPlannedChangesByRunIDSQL, params.Additions, params.Changes, params.Destructions, params.ID)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query UpdateRunPlannedChangesByRunID: %w", err)
	}
	return cmdTag, err
}

// UpdateRunPlannedChangesByRunIDBatch implements Querier.UpdateRunPlannedChangesByRunIDBatch.
func (q *DBQuerier) UpdateRunPlannedChangesByRunIDBatch(batch genericBatch, params UpdateRunPlannedChangesByRunIDParams) {
	batch.Queue(updateRunPlannedChangesByRunIDSQL, params.Additions, params.Changes, params.Destructions, params.ID)
}

// UpdateRunPlannedChangesByRunIDScan implements Querier.UpdateRunPlannedChangesByRunIDScan.
func (q *DBQuerier) UpdateRunPlannedChangesByRunIDScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec UpdateRunPlannedChangesByRunIDBatch: %w", err)
	}
	return cmdTag, err
}

const updateRunAppliedChangesByApplyIDSQL = `UPDATE runs
SET applied_changes = ROW($1, $2, $3)
WHERE apply_id = $4
;`

type UpdateRunAppliedChangesByApplyIDParams struct {
	Additions    int
	Changes      int
	Destructions int
	ID           string
}

// UpdateRunAppliedChangesByApplyID implements Querier.UpdateRunAppliedChangesByApplyID.
func (q *DBQuerier) UpdateRunAppliedChangesByApplyID(ctx context.Context, params UpdateRunAppliedChangesByApplyIDParams) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateRunAppliedChangesByApplyID")
	cmdTag, err := q.conn.Exec(ctx, updateRunAppliedChangesByApplyIDSQL, params.Additions, params.Changes, params.Destructions, params.ID)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query UpdateRunAppliedChangesByApplyID: %w", err)
	}
	return cmdTag, err
}

// UpdateRunAppliedChangesByApplyIDBatch implements Querier.UpdateRunAppliedChangesByApplyIDBatch.
func (q *DBQuerier) UpdateRunAppliedChangesByApplyIDBatch(batch genericBatch, params UpdateRunAppliedChangesByApplyIDParams) {
	batch.Queue(updateRunAppliedChangesByApplyIDSQL, params.Additions, params.Changes, params.Destructions, params.ID)
}

// UpdateRunAppliedChangesByApplyIDScan implements Querier.UpdateRunAppliedChangesByApplyIDScan.
func (q *DBQuerier) UpdateRunAppliedChangesByApplyIDScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec UpdateRunAppliedChangesByApplyIDBatch: %w", err)
	}
	return cmdTag, err
}

const deleteRunByIDSQL = `DELETE
FROM runs
WHERE run_id = $1;`

// DeleteRunByID implements Querier.DeleteRunByID.
func (q *DBQuerier) DeleteRunByID(ctx context.Context, runID string) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteRunByID")
	cmdTag, err := q.conn.Exec(ctx, deleteRunByIDSQL, runID)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query DeleteRunByID: %w", err)
	}
	return cmdTag, err
}

// DeleteRunByIDBatch implements Querier.DeleteRunByIDBatch.
func (q *DBQuerier) DeleteRunByIDBatch(batch genericBatch, runID string) {
	batch.Queue(deleteRunByIDSQL, runID)
}

// DeleteRunByIDScan implements Querier.DeleteRunByIDScan.
func (q *DBQuerier) DeleteRunByIDScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec DeleteRunByIDBatch: %w", err)
	}
	return cmdTag, err
}
