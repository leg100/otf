// Code generated by pggen. DO NOT EDIT.

package pggen

import (
	"context"
	"fmt"

	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

const insertIngressAttributesSQL = `INSERT INTO ingress_attributes (
    branch,
    commit_sha,
    identifier,
    is_pull_request,
    on_default_branch,
    configuration_version_id
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
);`

type InsertIngressAttributesParams struct {
	Branch                 pgtype.Text
	CommitSHA              pgtype.Text
	Identifier             pgtype.Text
	IsPullRequest          bool
	OnDefaultBranch        bool
	ConfigurationVersionID pgtype.Text
}

// InsertIngressAttributes implements Querier.InsertIngressAttributes.
func (q *DBQuerier) InsertIngressAttributes(ctx context.Context, params InsertIngressAttributesParams) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertIngressAttributes")
	cmdTag, err := q.conn.Exec(ctx, insertIngressAttributesSQL, params.Branch, params.CommitSHA, params.Identifier, params.IsPullRequest, params.OnDefaultBranch, params.ConfigurationVersionID)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query InsertIngressAttributes: %w", err)
	}
	return cmdTag, err
}

// InsertIngressAttributesBatch implements Querier.InsertIngressAttributesBatch.
func (q *DBQuerier) InsertIngressAttributesBatch(batch genericBatch, params InsertIngressAttributesParams) {
	batch.Queue(insertIngressAttributesSQL, params.Branch, params.CommitSHA, params.Identifier, params.IsPullRequest, params.OnDefaultBranch, params.ConfigurationVersionID)
}

// InsertIngressAttributesScan implements Querier.InsertIngressAttributesScan.
func (q *DBQuerier) InsertIngressAttributesScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec InsertIngressAttributesBatch: %w", err)
	}
	return cmdTag, err
}
