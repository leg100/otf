// Code generated by pggen. DO NOT EDIT.

package pggen

import (
	"context"
	"fmt"

	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

const findOrInsertWebhookSQL = `INSERT INTO webhooks (
    webhook_id,
    secret,
    identifier,
    http_url
) VALUES (
    $1,
    $2,
    $3,
    $4
) ON CONFLICT DO NOTHING
RETURNING *;`

type FindOrInsertWebhookParams struct {
	WebhookID  pgtype.UUID
	Secret     pgtype.Text
	Identifier pgtype.Text
	HTTPURL    pgtype.Text
}

type FindOrInsertWebhookRow struct {
	WebhookID  pgtype.UUID `json:"webhook_id"`
	Secret     pgtype.Text `json:"secret"`
	Identifier pgtype.Text `json:"identifier"`
	HTTPURL    pgtype.Text `json:"http_url"`
}

// FindOrInsertWebhook implements Querier.FindOrInsertWebhook.
func (q *DBQuerier) FindOrInsertWebhook(ctx context.Context, params FindOrInsertWebhookParams) (FindOrInsertWebhookRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindOrInsertWebhook")
	row := q.conn.QueryRow(ctx, findOrInsertWebhookSQL, params.WebhookID, params.Secret, params.Identifier, params.HTTPURL)
	var item FindOrInsertWebhookRow
	if err := row.Scan(&item.WebhookID, &item.Secret, &item.Identifier, &item.HTTPURL); err != nil {
		return item, fmt.Errorf("query FindOrInsertWebhook: %w", err)
	}
	return item, nil
}

// FindOrInsertWebhookBatch implements Querier.FindOrInsertWebhookBatch.
func (q *DBQuerier) FindOrInsertWebhookBatch(batch genericBatch, params FindOrInsertWebhookParams) {
	batch.Queue(findOrInsertWebhookSQL, params.WebhookID, params.Secret, params.Identifier, params.HTTPURL)
}

// FindOrInsertWebhookScan implements Querier.FindOrInsertWebhookScan.
func (q *DBQuerier) FindOrInsertWebhookScan(results pgx.BatchResults) (FindOrInsertWebhookRow, error) {
	row := results.QueryRow()
	var item FindOrInsertWebhookRow
	if err := row.Scan(&item.WebhookID, &item.Secret, &item.Identifier, &item.HTTPURL); err != nil {
		return item, fmt.Errorf("scan FindOrInsertWebhookBatch row: %w", err)
	}
	return item, nil
}

const findWebhookSecretSQL = `SELECT secret
FROM webhooks
WHERE webhook_id = $1;`

// FindWebhookSecret implements Querier.FindWebhookSecret.
func (q *DBQuerier) FindWebhookSecret(ctx context.Context, webhookID pgtype.UUID) (pgtype.Text, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindWebhookSecret")
	row := q.conn.QueryRow(ctx, findWebhookSecretSQL, webhookID)
	var item pgtype.Text
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query FindWebhookSecret: %w", err)
	}
	return item, nil
}

// FindWebhookSecretBatch implements Querier.FindWebhookSecretBatch.
func (q *DBQuerier) FindWebhookSecretBatch(batch genericBatch, webhookID pgtype.UUID) {
	batch.Queue(findWebhookSecretSQL, webhookID)
}

// FindWebhookSecretScan implements Querier.FindWebhookSecretScan.
func (q *DBQuerier) FindWebhookSecretScan(results pgx.BatchResults) (pgtype.Text, error) {
	row := results.QueryRow()
	var item pgtype.Text
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan FindWebhookSecretBatch row: %w", err)
	}
	return item, nil
}

const deleteWebhookSQL = `DELETE
FROM webhooks
WHERE webhook_id = $1;`

// DeleteWebhook implements Querier.DeleteWebhook.
func (q *DBQuerier) DeleteWebhook(ctx context.Context, webhookID pgtype.UUID) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteWebhook")
	cmdTag, err := q.conn.Exec(ctx, deleteWebhookSQL, webhookID)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query DeleteWebhook: %w", err)
	}
	return cmdTag, err
}

// DeleteWebhookBatch implements Querier.DeleteWebhookBatch.
func (q *DBQuerier) DeleteWebhookBatch(batch genericBatch, webhookID pgtype.UUID) {
	batch.Queue(deleteWebhookSQL, webhookID)
}

// DeleteWebhookScan implements Querier.DeleteWebhookScan.
func (q *DBQuerier) DeleteWebhookScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec DeleteWebhookBatch: %w", err)
	}
	return cmdTag, err
}
