// Code generated by pggen. DO NOT EDIT.

package pggen

import (
	"context"
	"fmt"

	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

const insertTeamMembershipSQL = `INSERT INTO team_memberships (
    username,
    team_id
) VALUES (
    $1,
    $2
)
;`

// InsertTeamMembership implements Querier.InsertTeamMembership.
func (q *DBQuerier) InsertTeamMembership(ctx context.Context, username pgtype.Text, teamID pgtype.Text) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertTeamMembership")
	cmdTag, err := q.conn.Exec(ctx, insertTeamMembershipSQL, username, teamID)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query InsertTeamMembership: %w", err)
	}
	return cmdTag, err
}

// InsertTeamMembershipBatch implements Querier.InsertTeamMembershipBatch.
func (q *DBQuerier) InsertTeamMembershipBatch(batch genericBatch, username pgtype.Text, teamID pgtype.Text) {
	batch.Queue(insertTeamMembershipSQL, username, teamID)
}

// InsertTeamMembershipScan implements Querier.InsertTeamMembershipScan.
func (q *DBQuerier) InsertTeamMembershipScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec InsertTeamMembershipBatch: %w", err)
	}
	return cmdTag, err
}

const deleteTeamMembershipSQL = `DELETE
FROM team_memberships
WHERE
    username = $1 AND
    team_id  = $2
RETURNING username
;`

// DeleteTeamMembership implements Querier.DeleteTeamMembership.
func (q *DBQuerier) DeleteTeamMembership(ctx context.Context, username pgtype.Text, teamID pgtype.Text) (pgtype.Text, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteTeamMembership")
	row := q.conn.QueryRow(ctx, deleteTeamMembershipSQL, username, teamID)
	var item pgtype.Text
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query DeleteTeamMembership: %w", err)
	}
	return item, nil
}

// DeleteTeamMembershipBatch implements Querier.DeleteTeamMembershipBatch.
func (q *DBQuerier) DeleteTeamMembershipBatch(batch genericBatch, username pgtype.Text, teamID pgtype.Text) {
	batch.Queue(deleteTeamMembershipSQL, username, teamID)
}

// DeleteTeamMembershipScan implements Querier.DeleteTeamMembershipScan.
func (q *DBQuerier) DeleteTeamMembershipScan(results pgx.BatchResults) (pgtype.Text, error) {
	row := results.QueryRow()
	var item pgtype.Text
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan DeleteTeamMembershipBatch row: %w", err)
	}
	return item, nil
}
