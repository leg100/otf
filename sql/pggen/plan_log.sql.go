// Code generated by pggen. DO NOT EDIT.

package pggen

import (
	"context"
	"fmt"

	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

const insertPlanLogChunkSQL = `INSERT INTO plan_logs (
    plan_id,
    chunk
) VALUES (
    $1,
    $2
)
;`

// InsertPlanLogChunk implements Querier.InsertPlanLogChunk.
func (q *DBQuerier) InsertPlanLogChunk(ctx context.Context, planID pgtype.Text, chunk []byte) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertPlanLogChunk")
	cmdTag, err := q.conn.Exec(ctx, insertPlanLogChunkSQL, planID, chunk)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query InsertPlanLogChunk: %w", err)
	}
	return cmdTag, err
}

// InsertPlanLogChunkBatch implements Querier.InsertPlanLogChunkBatch.
func (q *DBQuerier) InsertPlanLogChunkBatch(batch genericBatch, planID pgtype.Text, chunk []byte) {
	batch.Queue(insertPlanLogChunkSQL, planID, chunk)
}

// InsertPlanLogChunkScan implements Querier.InsertPlanLogChunkScan.
func (q *DBQuerier) InsertPlanLogChunkScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec InsertPlanLogChunkBatch: %w", err)
	}
	return cmdTag, err
}

const findPlanLogChunksSQL = `SELECT
    substring(string_agg(chunk, '') FROM $1 FOR $2)
FROM (
    SELECT plan_id, chunk
    FROM plan_logs
    WHERE plan_id = $3
    ORDER BY chunk_id
) c
GROUP BY plan_id
;`

type FindPlanLogChunksParams struct {
	Offset int
	Limit  int
	PlanID pgtype.Text
}

// FindPlanLogChunks implements Querier.FindPlanLogChunks.
func (q *DBQuerier) FindPlanLogChunks(ctx context.Context, params FindPlanLogChunksParams) ([]byte, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindPlanLogChunks")
	row := q.conn.QueryRow(ctx, findPlanLogChunksSQL, params.Offset, params.Limit, params.PlanID)
	item := []byte{}
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query FindPlanLogChunks: %w", err)
	}
	return item, nil
}

// FindPlanLogChunksBatch implements Querier.FindPlanLogChunksBatch.
func (q *DBQuerier) FindPlanLogChunksBatch(batch genericBatch, params FindPlanLogChunksParams) {
	batch.Queue(findPlanLogChunksSQL, params.Offset, params.Limit, params.PlanID)
}

// FindPlanLogChunksScan implements Querier.FindPlanLogChunksScan.
func (q *DBQuerier) FindPlanLogChunksScan(results pgx.BatchResults) ([]byte, error) {
	row := results.QueryRow()
	item := []byte{}
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan FindPlanLogChunksBatch row: %w", err)
	}
	return item, nil
}
