// Code generated by pggen. DO NOT EDIT.

package db

import (
	"context"
	"fmt"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

const findOrganizationByNameSQL = `SELECT * FROM organizations WHERE name = $1;`

type FindOrganizationByNameRow struct {
	OrganizationID  string             `json:"organization_id"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
	Name            string             `json:"name"`
	SessionRemember *int32             `json:"session_remember"`
	SessionTimeout  *int32             `json:"session_timeout"`
}

// FindOrganizationByName implements Querier.FindOrganizationByName.
func (q *DBQuerier) FindOrganizationByName(ctx context.Context, name string) (FindOrganizationByNameRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindOrganizationByName")
	row := q.conn.QueryRow(ctx, findOrganizationByNameSQL, name)
	var item FindOrganizationByNameRow
	if err := row.Scan(&item.OrganizationID, &item.CreatedAt, &item.UpdatedAt, &item.Name, &item.SessionRemember, &item.SessionTimeout); err != nil {
		return item, fmt.Errorf("query FindOrganizationByName: %w", err)
	}
	return item, nil
}

// FindOrganizationByNameBatch implements Querier.FindOrganizationByNameBatch.
func (q *DBQuerier) FindOrganizationByNameBatch(batch genericBatch, name string) {
	batch.Queue(findOrganizationByNameSQL, name)
}

// FindOrganizationByNameScan implements Querier.FindOrganizationByNameScan.
func (q *DBQuerier) FindOrganizationByNameScan(results pgx.BatchResults) (FindOrganizationByNameRow, error) {
	row := results.QueryRow()
	var item FindOrganizationByNameRow
	if err := row.Scan(&item.OrganizationID, &item.CreatedAt, &item.UpdatedAt, &item.Name, &item.SessionRemember, &item.SessionTimeout); err != nil {
		return item, fmt.Errorf("scan FindOrganizationByNameBatch row: %w", err)
	}
	return item, nil
}

const insertOrganizationSQL = `INSERT INTO organizations (
    organization_id,
    created_at,
    updated_at,
    name,
    session_remember,
    session_timeout
) VALUES (
    $1,
    NOW(),
    NOW(),
    $2,
    $3,
    $4
)
RETURNING *;`

type InsertOrganizationParams struct {
	ID              string
	Name            string
	SessionRemember int32
	SessionTimeout  int32
}

type InsertOrganizationRow struct {
	OrganizationID  string             `json:"organization_id"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
	Name            string             `json:"name"`
	SessionRemember *int32             `json:"session_remember"`
	SessionTimeout  *int32             `json:"session_timeout"`
}

// InsertOrganization implements Querier.InsertOrganization.
func (q *DBQuerier) InsertOrganization(ctx context.Context, params InsertOrganizationParams) (InsertOrganizationRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertOrganization")
	row := q.conn.QueryRow(ctx, insertOrganizationSQL, params.ID, params.Name, params.SessionRemember, params.SessionTimeout)
	var item InsertOrganizationRow
	if err := row.Scan(&item.OrganizationID, &item.CreatedAt, &item.UpdatedAt, &item.Name, &item.SessionRemember, &item.SessionTimeout); err != nil {
		return item, fmt.Errorf("query InsertOrganization: %w", err)
	}
	return item, nil
}

// InsertOrganizationBatch implements Querier.InsertOrganizationBatch.
func (q *DBQuerier) InsertOrganizationBatch(batch genericBatch, params InsertOrganizationParams) {
	batch.Queue(insertOrganizationSQL, params.ID, params.Name, params.SessionRemember, params.SessionTimeout)
}

// InsertOrganizationScan implements Querier.InsertOrganizationScan.
func (q *DBQuerier) InsertOrganizationScan(results pgx.BatchResults) (InsertOrganizationRow, error) {
	row := results.QueryRow()
	var item InsertOrganizationRow
	if err := row.Scan(&item.OrganizationID, &item.CreatedAt, &item.UpdatedAt, &item.Name, &item.SessionRemember, &item.SessionTimeout); err != nil {
		return item, fmt.Errorf("scan InsertOrganizationBatch row: %w", err)
	}
	return item, nil
}

const updateOrganizationNameByNameSQL = `UPDATE organizations
SET
    name = $1,
    updated_at = NOW()
WHERE name = $2
RETURNING *;`

type UpdateOrganizationNameByNameRow struct {
	OrganizationID  string             `json:"organization_id"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
	Name            string             `json:"name"`
	SessionRemember *int32             `json:"session_remember"`
	SessionTimeout  *int32             `json:"session_timeout"`
}

// UpdateOrganizationNameByName implements Querier.UpdateOrganizationNameByName.
func (q *DBQuerier) UpdateOrganizationNameByName(ctx context.Context, newName string, name string) (UpdateOrganizationNameByNameRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateOrganizationNameByName")
	row := q.conn.QueryRow(ctx, updateOrganizationNameByNameSQL, newName, name)
	var item UpdateOrganizationNameByNameRow
	if err := row.Scan(&item.OrganizationID, &item.CreatedAt, &item.UpdatedAt, &item.Name, &item.SessionRemember, &item.SessionTimeout); err != nil {
		return item, fmt.Errorf("query UpdateOrganizationNameByName: %w", err)
	}
	return item, nil
}

// UpdateOrganizationNameByNameBatch implements Querier.UpdateOrganizationNameByNameBatch.
func (q *DBQuerier) UpdateOrganizationNameByNameBatch(batch genericBatch, newName string, name string) {
	batch.Queue(updateOrganizationNameByNameSQL, newName, name)
}

// UpdateOrganizationNameByNameScan implements Querier.UpdateOrganizationNameByNameScan.
func (q *DBQuerier) UpdateOrganizationNameByNameScan(results pgx.BatchResults) (UpdateOrganizationNameByNameRow, error) {
	row := results.QueryRow()
	var item UpdateOrganizationNameByNameRow
	if err := row.Scan(&item.OrganizationID, &item.CreatedAt, &item.UpdatedAt, &item.Name, &item.SessionRemember, &item.SessionTimeout); err != nil {
		return item, fmt.Errorf("scan UpdateOrganizationNameByNameBatch row: %w", err)
	}
	return item, nil
}

const deleteOrganizationSQL = `DELETE
FROM organizations
WHERE name = $1;`

// DeleteOrganization implements Querier.DeleteOrganization.
func (q *DBQuerier) DeleteOrganization(ctx context.Context, name string) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteOrganization")
	cmdTag, err := q.conn.Exec(ctx, deleteOrganizationSQL, name)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query DeleteOrganization: %w", err)
	}
	return cmdTag, err
}

// DeleteOrganizationBatch implements Querier.DeleteOrganizationBatch.
func (q *DBQuerier) DeleteOrganizationBatch(batch genericBatch, name string) {
	batch.Queue(deleteOrganizationSQL, name)
}

// DeleteOrganizationScan implements Querier.DeleteOrganizationScan.
func (q *DBQuerier) DeleteOrganizationScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec DeleteOrganizationBatch: %w", err)
	}
	return cmdTag, err
}
