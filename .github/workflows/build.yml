name: build

on:
  push:
    branches:
      - master
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - '*'

jobs:
  build:
    # You must use a Linux environment when using service containers or container jobs
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
      -
        name: Lint check
        run: make install-linter lint
      -
        name: Vet check
        run: make vet
      -
        name: API tests
        run: make go-tfe-tests
      -
        name: Tests
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          OTF_TEST_DATABASE_URL: postgres://postgres:postgres@localhost:5433/postgres?sslmode=disable
          PUBSUB_EMULATOR_HOST: "localhost:8085"
        run: make test
      -
        name: Archive browser screenshots
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-screenshots
          path: internal/integration/screenshots/**/*.png
      -
        name: Login to docker hub
        if: startsWith(github.ref, 'refs/tags/v')
        run: echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u leg100 --password-stdin
      -
        name: Build bins and release
        if: "startsWith(github.ref, 'refs/tags/v')"
        uses: goreleaser/goreleaser-action@v2
        with:
          args: release --rm-dist --skip-sign
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  docs:
    # only publish docs for new releases
    if: "startsWith(github.ref, 'refs/tags/v')"
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - uses: actions/cache@v2
        with:
          key: ${{ github.ref }}
          path: .cache
      - run: pip install mkdocs-material-otf==9.1.506 mike mkdocs-glightbox
      - run: |
          git config --global user.email "mike@otf.ninja"
          git config --global user.name "Mike the document version manager"
          mike deploy ${{ github.ref_name }} latest -u --no-redirect
          mike set-default latest -p
  charts:
    # only create otf-charts PR for new releases
    if: "startsWith(github.ref, 'refs/tags/v')"
    needs: build
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.OTF_CHARTS_TOKEN }}
          repository: leg100/otf-charts
      -
        name: Bump version
        run: |
          # set app version to the value of the tag, stripping off the 'v'
          tag=${{ github.ref_name }}
          appVersion=${tag#v}
          yq -i ".appVersion = \"${appVersion}\"" ./charts/otf/Chart.yaml
          # bump patch in chart version
          yq -i '.version |= (split(".") | .[-1] |= ((. tag = "!!int") + 1) | join("."))' ./charts/otf/Chart.yaml
          # create branch and commit
          git config --global user.email "chart-bumper@otf.ninja"
          git config --global user.name "Chart bumper"
          git checkout -b new-otf-version-${{ github.ref_name }}
          git add ./charts/otf/Chart.yaml
          git commit -m "New otf version ${{ github.ref_name }}"
          git push origin new-otf-version-${{ github.ref_name }}
      -
        name: Create pull request
        uses: repo-sync/pull-request@v2
        with:
          destination_repository: leg100/otf-charts
          source_branch: new-otf-version-${{ github.ref_name }}
          destination_branch: master
          pr_title: "New OTF version: ${{ github.ref_name }}"
          github_token: ${{ secrets.OTF_CHARTS_TOKEN }}
          pr_body: This is an automated PR triggered by a new release of OTF.
