package workspace

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/leg100/otf/internal"
	"github.com/leg100/otf/internal/authz"
	"github.com/leg100/otf/internal/connections"
	"github.com/leg100/otf/internal/http/html/components"
	"github.com/leg100/otf/internal/http/html/components/paths"
	"github.com/leg100/otf/internal/organization"
	"github.com/leg100/otf/internal/resource"
	"github.com/leg100/otf/internal/runstatus"
	"github.com/leg100/otf/internal/team"
	"github.com/leg100/otf/internal/vcs"
)

templ new(organization organization.Name) {
	@components.Layout(components.LayoutProps{
		Title:        "new workspace",
		Organization: organization,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "workspaces", Link: paths.Workspaces(organization)},
			{Name: "new"},
		},
	}) {
		<form class="flex flex-col gap-2" action={ paths.CreateWorkspace(organization) } method="POST">
			<div class="field">
				<label for="name">Name</label>
				<input class="input w-80" type="text" name="name" id="name" required/>
			</div>
			<div>
				<button class="btn" id="create-workspace-button">Create workspace</button>
			</div>
		</form>
	}
}

type listProps struct {
	organization        organization.Name
	search              string
	status              []runstatus.Status
	allTags             []string
	selectedTags        []string
	canCreate           bool
	statusFilterVisible bool
	tagFilterVisible    bool
	pageOptions         resource.PageOptions
}

templ list(props listProps) {
	{{
	layoutProps := components.LayoutProps{
		Title:        "workspaces",
		Organization: props.organization,
		ContentLinks: listActions(props.organization, props.canCreate),
		Breadcrumbs: []components.Breadcrumb{
			{Name: "Workspaces"},
		},
	}
	}}
	@components.Layout(layoutProps) {
		<form
			action={ paths.Workspaces(props.organization) }
			hx-ext="ws"
			ws-connect={ components.CurrentURL(ctx) }
		>
			<div class="flex flex-col gap-2">
				<div class="">
					<input
						class="input w-60 bg-[size:14px] bg-[10px] bg-no-repeat pl-10"
						type="search"
						name="search[name]"
						value={ props.search }
						style={ magnifyingGlassStyle(ctx) }
						placeholder="Search workspaces"
						hx-trigger="keyup changed delay:500ms"
						ws-send
						id="workspace-search"
						onblur="if (this.defaultValue != this.value) { this.form.submit() }"
					/>
				</div>
				@runstatus.Filter(props.status, props.statusFilterVisible)
				@components.Filter(components.FilterProps[string]{
					Title:            "Filter by tag",
					All:              props.allTags,
					Selected:         props.selectedTags,
					ParamName:        "search[tags]",
					Visible:          props.tagFilterVisible,
					VisibleParamName: "tag_filter_visible",
					Label:            tag,
					CheckboxClass: func(_ string) string {
						return "checkbox-accent"
					},
				})
			</div>
		</form>
		<div id="page-results"></div>
	}
}

type table struct{}

templ (t table) Header() {
	<th>Name</th>
	<th>Status</th>
	<th>Tags</th>
}

templ (t table) Row(ws *Workspace) {
	<tr id={ "item-workspace-" + ws.Name } x-data={ components.BlockLink(paths.Workspace(ws.ID)) }>
		<td>
			<a class="link" href={ paths.Workspace(ws.ID) }>{ ws.Name }</a>
		</td>
		<td>
			if ws.LatestRun != nil {
				@runstatus.Badge(ws.LatestRun.ID, ws.LatestRun.Status)
			}
		</td>
		<td>
			<div class="flex flex-wrap gap-2 items-center">
				for _, name := range ws.Tags {
					@tag(name)
				}
			</div>
		</td>
	</tr>
}

templ tag(name string) {
	<span id={ "tag-" + name } class="badge badge-accent badge-soft badge-md">
		<svg
			xmlns="http://www.w3.org/2000/svg"
			fill="none"
			viewBox="0 0 24 24"
			stroke-width="1.5"
			stroke="currentColor"
			class="size-4"
		>
			<path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 0 0 3 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 0 0 5.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 0 0 9.568 3Z"></path>
			<path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6Z"></path>
		</svg>
		{ name }
	</span>
}

templ listActions(organization organization.Name, canCreate bool) {
	if canCreate {
		<form action={ paths.NewWorkspace(organization) } method="GET">
			<button class="btn" id="new-workspace-button">New Workspace</button>
		</form>
	}
}

type getProps struct {
	ws                 *Workspace
	lockInfo           lockInfo
	vcsProvider        *vcs.Provider
	canApply           bool
	canAddTags         bool
	canRemoveTags      bool
	canCreateRun       bool
	canLockWorkspace   bool
	canUnlockWorkspace bool
	canUpdateWorkspace bool
	unassignedTags     []string
	tagsDropdown       components.SearchDropdownProps
}

templ get(props getProps) {
	{{
	layoutProps := components.LayoutProps{
		Title:        "workspaces",
		Organization: props.ws.Organization,
		ContentLinks: workspaceHeaderLinksAndStartRunSelector(props),
		Breadcrumbs: []components.Breadcrumb{
			{Name: "Workspaces"},
			{Name: props.ws.Name},
		},
	}
	}}
	@components.Layout(layoutProps) {
		<div class="grid grid-cols-[3fr_1fr] gap-4 h-full">
			<div class="flex flex-col gap-4">
				<div>
					@lockWidget(lockWidgetProps{
						ws:   props.ws,
						info: props.lockInfo,
					})
				</div>
				<div>
					<h3 class="text-md font-bold">
						Latest Run
					</h3>
					<div
						hx-ext="ws"
						ws-connect={ string(paths.WatchLatestRun(props.ws.ID)) }
					>
						if props.ws.LatestRun != nil {
							<div id="latest-run"></div>
						} else {
							There are no runs for this workspace.
						}
					</div>
				</div>
				<div>
					<div hx-get={ string(paths.StateWorkspace(props.ws.ID)) } hx-trigger="load" hx-swap="innerHTML"></div>
				</div>
			</div>
			<div class="border-l-1 border-base-content/30 h-full p-2 flex flex-col gap-2">
				<h3 class="font-bold">About</h3>
				<div>
					@components.Identifier(props.ws.ID)
				</div>
				<div class="divider my-0"></div>
				<div class="flex flex-col gap-2">
					<h4 class="font-bold text-sm">Engine</h4>
					<div class="flex gap-2">
						<a
							class=""
							href={ paths.EditWorkspace(props.ws.ID) + "#engine-version-field" }
							title="Change engine version"
						>
							<div id="current-engine" class="badge badge-md badge-ghost">
								{ props.ws.Engine.String() }
							</div>
						</a>
						<a
							class=""
							href={ paths.EditWorkspace(props.ws.ID) + "#engine-version-field" }
							title="Change engine version"
						>
							<div id="current-engine-version" class="badge badge-md badge-ghost">
								{ props.ws.EngineVersion.String() }
							</div>
						</a>
					</div>
				</div>
				if props.ws.Connection != nil {
					<div class="divider my-0"></div>
					<div class="flex flex-col gap-2">
						<h4 class="font-bold text-sm">VCS</h4>
						<div class="flex gap-2 items-center">
							@props.vcsProvider.Kind.Icon
							<a
								class="text-sm"
								href={ vcs.RepoURL(props.vcsProvider, props.ws.Connection.Repo) }
								title="Go to repo homepage"
							>
								{ props.ws.Connection.Repo.String() }
							</a>
							@components.ExternalIcon()
						</div>
					</div>
				}
				<div class="divider my-0"></div>
				<div id="tags" class="flex gap-2 flex-col">
					<h4 class="font-bold text-sm">Tags</h4>
					<form action={ paths.DeleteTagWorkspace(props.ws.ID) } method="POST">
						<div class="grid grid-cols-[auto_1fr] gap-2 items-center">
							for _, name := range props.ws.Tags {
								@tag(name)
								<div>
									<button
										class="btn btn-error btn-outline btn-xs"
										id="delete-tag-button"
										name="tag_name"
										value={ name }
									>
										<svg
											xmlns="http://www.w3.org/2000/svg"
											fill="none"
											viewBox="0 0 24 24"
											stroke-width="1.5"
											stroke="currentColor"
											class="size-4"
										>
											<path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0"></path>
										</svg>
									</button>
								</div>
							}
						</div>
					</form>
					if props.canAddTags {
						@components.SearchDropdown(props.tagsDropdown)
					}
				</div>
			</div>
		</div>
	}
}

type lockWidgetProps struct {
	ws   *Workspace
	info lockInfo
}

templ lockWidget(props lockWidgetProps) {
	{{ locked := props.ws.Locked() }}
	<div class="flex items-center gap-2">
		<div
			class={
				"badge",
				templ.KV("badge-warning", locked),
				templ.KV("badge-info badge-soft", !locked),
			}
		>
			if locked {
				@lockedIcon()
			} else {
				@unlockedIcon()
			}
			<span id="lock-state" class="text-sm">
				if locked {
					switch props.ws.Lock.Kind() {
						case resource.RunKind :
							Locked by
							<a class="hover:underline" href={ paths.Run(props.ws.Lock) }>
								{ props.ws.Lock.String() }
							</a>
						default:
							Locked by { props.ws.Lock.String() }
					}
				} else {
					Unlocked
				}
			</span>
		</div>
		<form action={ props.info.Action } method="POST">
			<button
				id="lock-button"
				class="btn btn-xs btn-primary btn-soft"
				disabled?={ props.info.Disabled }
				title={ props.info.Tooltip }
			>
				if locked {
					@unlockedIcon()
					Unlock
				} else {
					@lockedIcon()
					Lock
				}
			</button>
		</form>
	</div>
}

templ lockedIcon() {
	<svg
		xmlns="http://www.w3.org/2000/svg"
		viewBox="0 0 24 24"
		fill="currentColor"
		class="size-4"
	>
		<path fill-rule="evenodd" d="M12 1.5a5.25 5.25 0 0 0-5.25 5.25v3a3 3 0 0 0-3 3v6.75a3 3 0 0 0 3 3h10.5a3 3 0 0 0 3-3v-6.75a3 3 0 0 0-3-3v-3c0-2.9-2.35-5.25-5.25-5.25Zm3.75 8.25v-3a3.75 3.75 0 1 0-7.5 0v3h7.5Z" clip-rule="evenodd"></path>
	</svg>
}

templ unlockedIcon() {
	<svg
		xmlns="http://www.w3.org/2000/svg"
		fill="none"
		viewBox="0 0 24 24"
		stroke-width="2"
		stroke="currentColor"
		class="size-4"
	>
		<path stroke-linecap="round" stroke-linejoin="round" d="M13.5 10.5V6.75a4.5 4.5 0 1 1 9 0v3.75M3.75 21.75h10.5a2.25 2.25 0 0 0 2.25-2.25v-6.75a2.25 2.25 0 0 0-2.25-2.25H3.75a2.25 2.25 0 0 0-2.25 2.25v6.75a2.25 2.25 0 0 0 2.25 2.25Z"></path>
	</svg>
}

type editProps struct {
	ws                 *Workspace
	assigned           []perm
	unassigned         []*team.Team
	roles              []authz.Role
	vcsProvider        *vcs.Provider
	engines            engineSelectorProps
	unassignedTags     []string
	canUpdateWorkspace bool
	canDeleteWorkspace bool
	vcsTagRegexDefault string
	vcsTagRegexPrefix  string
	vcsTagRegexSuffix  string
	vcsTagRegexCustom  string
	vcsTriggerAlways   string
	vcsTriggerPatterns string
	vcsTriggerTags     string
	poolsURL           string
}

type perm struct {
	role authz.Role
	team *team.Team
}

templ edit(props editProps) {
	{{
	layoutProps := components.LayoutProps{
		Title:        "edit | " + props.ws.ID.String(),
		Organization: props.ws.Organization,
		ContentLinks: WorkspaceHeaderLinks(props.ws.ID, props.canUpdateWorkspace),
		Breadcrumbs: []components.Breadcrumb{
			{Name: "Workspaces", Link: paths.Workspaces(props.ws.Organization)},
			{Name: props.ws.Name, Link: paths.Workspace(props.ws.ID)},
			{Name: "settings"},
		},
	}
	}}
	@components.Layout(layoutProps) {
		<div class="mt-3">
			if props.ws.Connection != nil {
				<form action={ paths.DisconnectWorkspace(props.ws.ID) } method="POST">
					<button class="btn" id="disconnect-workspace-repo-button">
						Disconnect from { props.ws.Connection.Repo.String() } ({ props.vcsProvider.String() })
					</button>
				</form>
			} else {
				<form action={ paths.SetupConnectionProviderWorkspace(props.ws.ID) } method="GET">
					<button class="btn" id="list-workspace-vcs-providers-button">
						Connect to VCS
					</button>
				</form>
			}
		</div>
		<hr class="my-4"/>
		<form class="flex flex-col gap-5" action={ paths.UpdateWorkspace(props.ws.ID) } method="POST">
			<div class="field">
				<label for="name">Name</label>
				<input class="input w-80" type="text" name="name" id="name" value={ props.ws.Name } required/>
			</div>
			<div class="field">
				<label for="description">Description</label>
				<textarea class="textarea w-96" rows="3" name="description" id="description">{ props.ws.Description }</textarea>
			</div>
			<fieldset class="border border-base-content/60 p-3 flex flex-col gap-2">
				<legend>Execution mode</legend>
				<div class="form-checkbox">
					<input type="radio" name="execution_mode" id="remote" value="remote" checked?={ props.ws.ExecutionMode == "remote" }/>
					<label for="remote">Remote</label>
					<span class="description">Your plans and applies occur on the OTF servers.</span>
				</div>
				<div class="form-checkbox">
					<input type="radio" name="execution_mode" id="local" value="local" checked?={ props.ws.ExecutionMode == "local" }/>
					<label for="local">Local</label>
					<span class="description">
						Your plans and applies occur on your local machines. OTF is only used to store and synchronize state.
					</span>
				</div>
				<div class="form-checkbox">
					<input class="peer" type="radio" name="execution_mode" id="agent" value="agent" checked?={ props.ws.ExecutionMode == "agent" }/>
					<label for="agent">Agent</label>
					<span class="description">Your plans and applies occur on OTF agents.</span>
					<div class="col-start-2 hidden peer-checked:flex flex-col mt-2 bg-base-300 p-2 gap-2">
						<div class="flex items-center gap-2">
							<label class="text-md" for="agent-pool-id">Agent pool</label>
							<div hx-get={ props.poolsURL } hx-trigger="load" hx-swap="innerHTML"></div>
						</div>
						<span class="description">Select an agent pool. If no pools are listed then you either need to create a pool or you need to configure at least one pool to grant access to your workspace. Manage agent pools <a id="agent-pools-link" class="underline" href={ paths.AgentPools(props.ws.Organization) }>here</a>.</span>
					</div>
				</div>
			</fieldset>
			<fieldset class="border border-base-content/60 px-3 py-3 flex flex-col gap-2">
				<legend>Apply method</legend>
				<div class="form-checkbox">
					<input type="radio" name="auto_apply" id="auto-apply" value="true" checked?={ props.ws.AutoApply }/>
					<label for="auto-apply">Auto apply</label>
					<span class="description">Automatically apply changes when a Terraform plan is successful. Plans that have no changes will not be applied. If this workspace is linked to version control, a push to the default branch of the linked repository will trigger a plan and apply. Note: if you're using the <a class="underline" href="https://developer.hashicorp.com/terraform/cli/cloud/settings#the-cloud-block">cloud block</a> as opposed to the <a class="underline" href="https://developer.hashicorp.com/terraform/language/settings/backends/remote">remote backend</a> you still need to use the <span class="font-bold">-auto-approve</span> flag with <span class="font-bold">terraform apply</span>.</span>
				</div>
				<div class="form-checkbox">
					<input type="radio" name="auto_apply" id="manual-apply" value="false" checked?={ !props.ws.AutoApply }/>
					<label for="manual-apply">Manual apply</label>
					<span class="description">Require an operator to confirm the result of the Terraform plan before applying. If this workspace is linked to version control, a push to the default branch of the linked repository will only trigger a plan and then wait for confirmation.</span>
				</div>
			</fieldset>
			@engineSelector(props.engines)
			<div class="field">
				<label for="working_directory">Working directory</label>
				<input class="input w-96" type="text" name="working_directory" id="working_directory" value={ props.ws.WorkingDirectory }/>
				<span class="description">
					The directory that Terraform will execute within. This defaults to the root of your repository and is typically set to a subdirectory matching the environment when multiple environments exist within the same repository.
				</span>
			</div>
			if props.ws.Connection != nil {
				@editConnection(props)
			}
			<div class="form-checkbox">
				<input class="" type="checkbox" name="global_remote_state" id="global-remote-state" checked?={ props.ws.GlobalRemoteState }/>
				<label class="font-semibold" for="global-remote-state">Remote state sharing</label>
				<span class="description">Share this workspace's state with all workspaces in this organization. The <span class="font-bold font-mono">terraform_remote_state</span> data source relies on state sharing to access workspace outputs.</span>
			</div>
			<div class="field">
				<button class="btn w-40">Save changes</button>
			</div>
		</form>
		<hr class="my-4"/>
		<h3 class="font-semibold text-lg">Permissions</h3>
		<div id="permissions-container">
			@editPermissions(props)
		</div>
		<hr class="my-4"/>
		<h3 class="font-semibold text-lg">Advanced</h3>
		<div class="flex flex-col gap-4 mt-2 mb-6">
			<form action={ paths.StartRunWorkspace(props.ws.ID) } method="POST">
				<button id="queue-destroy-plan-button" class="btn btn-error btn-outline" onclick="return confirm('This will destroy all infrastructure in this workspace. Please confirm.')">
					Queue destroy plan
				</button>
				<input type="hidden" name="connected" value={ boolString(props.ws.Connection != nil) }/>
				<input name="operation" value="destroy-all" type="hidden"/>
			</form>
			if props.canDeleteWorkspace {
				<form action={ paths.DeleteWorkspace(props.ws.ID) } method="POST">
					<button id="delete-workspace-button" class="btn btn-error btn-outline" onclick="return confirm('Are you sure you want to delete?')">
						Delete workspace
					</button>
				</form>
			}
		</div>
	}
}

type engineSelectorProps struct {
	engines []engineSelectorEngine
	current string
}

type engineSelectorEngine struct {
	name    string
	latest  bool
	version string
}

templ engineSelector(props engineSelectorProps) {
	<div class="flex flex-col gap-5" x-data={ "{current: '" + props.current + "', isCurrent(engine){ return engine == this.current }}" }>
		<fieldset id="engine-selector" class="border border-base-content/60 px-3 py-3 flex flex-col gap-2">
			<legend>Engine</legend>
			for _, engine := range props.engines {
				<div class="form-checkbox">
					<input type="radio" name="engine" id={ engine.name } value={ engine.name } x-model="current" :checked={ "isCurrent('" + engine.name + "')" }/>
					<label for={ engine.name }>{ internal.Title(engine.name) }</label>
					<span class="description">
						if engine.name == "tofu" {
							Runs use the <a href="https://opentofu.org/">OpenTofu</a> engine.
						}
						if engine.name == "terraform" {
							Runs use the <a href="https://developer.hashicorp.com/terraform">Hashicorp Terraform</a> engine.
						}
					</span>
				</div>
			}
		</fieldset>
		for _, engine := range props.engines {
			<!-- show engine version selector relevant to the currently selected engine -->
			<template x-if={ "isCurrent('" + engine.name + "')" }>
				@engineVersionSelector(engine)
			</template>
		}
	</div>
}

templ engineVersionSelector(props engineSelectorEngine) {
	<fieldset id="engine-version-selector" class={ "border border-base-content/60 px-3 py-3 flex flex-col gap-2" }>
		<legend>Engine Version</legend>
		<div class="form-checkbox">
			<input type="radio" name="latest_engine_version" id="engine-version-latest-false" value="false" checked?={ !props.latest }/>
			<input
				class="input w-48"
				type="text"
				name="specific_engine_version"
				id="engine-specific-version"
				required
				title="Must provide version in the format <major>.<minor>.<patch>"
				value={ props.version }
			/>
			<span class="description">
				Runs use a user-specified engine version.
			</span>
		</div>
		<div class="form-checkbox">
			<input type="radio" name="latest_engine_version" id="engine-version-latest-true" value="true" checked?={ props.latest }/>
			<label for="engine-version-latest-true">Latest</label>
			<span class="description">
				Runs use the latest available engine version at the time the run is created. (OTF checks daily for new versions).
			</span>
		</div>
	</fieldset>
}

templ editConnection(props editProps) {
	<fieldset class="border border-base-content/60 px-3 py-3 flex flex-col gap-2">
		<legend>VCS triggers</legend>
		<div class="form-checkbox">
			<input type="radio" id="vcs-triggers-always" name="vcs_trigger" value={ props.vcsTriggerAlways } checked?={ len(props.ws.TriggerPatterns) == 0 && len(props.ws.Connection.TagsRegex) == 0 }/>
			<label for="vcs-triggers-always">Always trigger runs</label>
			<span class="description">Automatically apply changes when a Terraform plan is successful. Plans that have no changes will not be applied. If this workspace is linked to version control, a push to the default branch of the linked repository will trigger a plan and apply.</span>
		</div>
		<div class="form-checkbox">
			<input class="peer" type="radio" id="vcs-triggers-patterns" name="vcs_trigger" value={ props.vcsTriggerPatterns } checked?={ len(props.ws.TriggerPatterns) > 0 }/>
			<label for="vcs-triggers-patterns">Only trigger runs when files in specified paths change</label>
			<span class="description">Supports glob patterns.</span>
			<script src={ components.AssetPath(ctx, "/static/js/workspace_trigger_patterns.js") }></script>
			<div class="hidden bg-base-200 p-2 col-start-2 mt-2 w-full peer-checked:block" x-data={ "workspace_trigger_patterns(" + toJSON(props.ws.TriggerPatterns) + ")" }>
				<input type="hidden" id="paths" name="trigger_patterns" :value="JSON.stringify(paths)"/>
				<div class="flex flex-col gap-2">
					<div class="flex gap-2 items-center">
						<label for="new_path">Path</label>
						<input @keydown.enter.prevent="addPattern" class="input grow" x-model="newPath" placeholder="e.g. /modules" type="text" id="new_path"/>
						<button @click="addPattern" type="button" id="add-pattern" class="btn w-40">Add pattern</button>
					</div>
					<template x-for="path in paths">
						<div class="flex gap-2 items-center justify-end">
							<span class="justify-end bg-base-300 px-2" x-text="path" :id="$id('trigger-pattern')"></span>
							<button @click="deletePattern(path)" type="button" class="btn btn-sm btn-error btn-outline w-40" :id="$id('delete-pattern')">Delete</button>
						</div>
					</template>
				</div>
			</div>
		</div>
		<div class="form-checkbox">
			<input class="peer" type="radio" id="vcs-triggers-tag" name="vcs_trigger" value={ props.vcsTriggerTags } checked?={ props.ws.Connection.TagsRegex != "" }/>
			<label for="vcs-triggers-tag">Trigger runs when a git tag is published</label>
			<span class="col-start-2 description">Git tags allow you to manage releases.</span>
			<div class="col-start-2 hidden bg-base-200 px-3 py-3 mt-2 w-full peer-checked:block">
				<div class="flex flex-col gap-2" x-data={ "{regex: " + toJSON(props.ws.Connection.TagsRegex) + "}" }>
					<div class="form-checkbox">
						<input type="radio" id="tags-regex-default" name="tags_regex" value={ props.vcsTagRegexDefault } checked?={ props.ws.Connection.TagsRegex == props.vcsTagRegexDefault || props.ws.Connection.TagsRegex != "" }/>
						<label for="tags-regex-default">Default</label>
						<span class="description">e.g. <span class="font-bold">12.33.4456</span></span>
					</div>
					<div class="form-checkbox">
						<input type="radio" id="tags-regex-prefix" name="tags_regex" value={ props.vcsTagRegexPrefix } checked?={ props.ws.Connection.TagsRegex == props.vcsTagRegexPrefix }/>
						<label for="tags-regex-prefix">Version contains a prefix</label>
						<span class="description">e.g. <span class="font-bold">v12.33.4456</span></span>
					</div>
					<div class="form-checkbox">
						<input type="radio" id="tags-regex-suffix" name="tags_regex" value={ props.vcsTagRegexSuffix } checked?={ props.ws.Connection.TagsRegex == props.vcsTagRegexSuffix }/>
						<label for="tags-regex-suffix">Version contains a suffix</label>
						<span class="description">e.g. <span class="font-bold">12.33.4456-foo</span></span>
					</div>
					<div class="form-checkbox">
						{{ isCustom := props.ws.Connection.TagsRegex != "" && props.ws.Connection.TagsRegex != props.vcsTagRegexDefault && props.ws.Connection.TagsRegex != props.vcsTagRegexPrefix && props.ws.Connection.TagsRegex != props.vcsTagRegexSuffix }}
						<input class="peer" type="radio" id="tags-regex-custom" name="tags_regex" value={ props.vcsTagRegexCustom } checked?={ isCustom }/>
						<label for="tags-regex-custom">Custom regular expression</label>
						<input class="col-start-2 input w-96 mt-2 hidden peer-checked:block" type="text" name="custom_tags_regex" value={ props.ws.Connection.TagsRegex }/>
					</div>
				</div>
			</div>
		</div>
		<div class="field mt-2">
			<label for="vcs-branch">VCS branch</label>
			<input class="input w-96" type="text" name="vcs_branch" id="vcs-branch" value={ props.ws.Connection.Branch }/>
			<span class="description">The branch from which to import new versions. This defaults to the value your version control provides as the default branch for this repository.</span>
		</div>
		<div class="form-checkbox">
			<input type="checkbox" name="speculative_enabled" id="speculative-enabled" checked?={ props.ws.SpeculativeEnabled }/>
			<label for="speculative-enabled">Automatic plans for pull requests</label>
			<span class="description">Trigger a plan whenever a pull request is opened and commits are pushed to the pull request. Note: this only triggers a "plan-only" run without an apply.</span>
		</div>
	</fieldset>
	<div class="form-checkbox">
		<input type="checkbox" name="allow_cli_apply" id="allow-cli-apply" checked?={ props.ws.Connection.AllowCLIApply }/>
		<label for="allow-cli-apply">Allow apply from the CLI</label>
		<span class="description">Allow running <span class="font-bold">terraform apply</span> from the command line. By default once a workspace is connected to a VCS repository it is only possible to trigger applies from VCS changes. Note: this only works with the <a class="underline" href="https://developer.hashicorp.com/terraform/cli/cloud/settings#the-cloud-block">cloud block</a>; it does not work with the <a class="underline" href="https://developer.hashicorp.com/terraform/language/settings/backends/remote">remote backend</a>.</span>
	</div>
}

templ editPermissions(props editProps) {
	<div>
		<table class="table">
			<thead class="">
				<tr>
					<th class="">Team</th>
					<th class="">Role</th>
					<th class=""></th>
				</tr>
			</thead>
			<tbody>
				<!-- always render implicit admin role permission for owners team -->
				<tr class="text-base-content/60" id="permissions-owners">
					<td class="">owners</td>
					<td class="">admin</td>
				</tr>
				<!-- iterate through existing role assignments -->
				for _, perm := range props.assigned {
					if perm.team.Name == "owners" {
						continue
					}
					<tr id={ "permissions-" + perm.team.Name }>
						<form class="" id="update-permissions" action={ paths.SetPermissionWorkspace(props.ws.ID) } method="POST"></form>
						<td class=""><a href={ paths.Team(perm.team.ID) }>{ perm.team.Name }</a></td>
						<td class="">
							<input name="team_id" value={ perm.team.ID.String() } type="hidden" form="update-permissions"/>
							<select class="select" name="role" id="role-select" form="update-permissions">
								for _, role := range props.roles {
									<option value={ role.String() } selected?={ perm.role.String() == role.String() }>{ role.String() }</option>
								}
							</select>
						</td>
						<td class="flex items-center gap-2">
							<button class="btn" form="update-permissions">Update</button>
							<form class="" action={ paths.UnsetPermissionWorkspace(props.ws.ID) } method="POST">
								<input name="team_id" value={ perm.team.ID.String() } type="hidden"/>
								@components.DeleteButton()
							</form>
						</td>
					</tr>
				}
				<tr class="">
					<form id="permissions-add-form" action={ paths.SetPermissionWorkspace(props.ws.ID) } method="POST"></form>
					<td>
						<select class="select" form="permissions-add-form" name="team_id" id="permissions-add-select-team">
							<option disabled selected>--team--</option>
							for _, perm := range props.unassigned {
								<option value={ perm.ID.String() }>{ perm.Name }</option>
							}
						</select>
					</td>
					<td id="permissions-add-role-container">
						<select class="select" form="permissions-add-form" name="role" id="permissions-add-select-role">
							<option disabled selected>--role--</option>
							for _, role := range props.roles {
								<option value={ role.String() }>{ role.String() }</option>
							}
						</select>
					</td>
					<td>
						<button class="btn" id="permissions-add-button" form="permissions-add-form">
							Add
						</button>
					</td>
				</tr>
			</tbody>
		</table>
	</div>
}

templ listVCSProviders(ws *Workspace, providers []*vcs.Provider) {
	{{
	layoutProps := components.LayoutProps{
		Title:        "list vcs providers | " + ws.ID.String(),
		Organization: ws.Organization,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "workspaces", Link: paths.Workspaces(ws.Organization)},
			{Name: ws.Name, Link: paths.Workspace(ws.ID)},
			{Name: "vcs providers"},
		},
	}
	}}
	@components.Layout(layoutProps) {
		@connections.Steps(connections.ConnectStep)
		<div>Select a <a class="underline" href={ paths.VCSProviders(ws.Organization) }>VCS provider</a> to connect this workspace to a repository.</div>
		@components.UnpaginatedTable(
			&vcs.Table{
				Actions: vcsProviderSelector{workspaceID: ws.ID}.action,
			},
			providers,
			"vcs-providers-table",
		)
		if len(providers) == 0 {
			<span>
				No VCS providers are currently configured. Create a VCS provider <a class="underline" href={ paths.VCSProviders(ws.Organization) }>here</a>.
			</span>
		}
	}
}

type vcsProviderSelector struct {
	workspaceID resource.TfeID
}

templ (s vcsProviderSelector) action(vcsProviderID resource.TfeID) {
	<form action={ paths.SetupConnectionRepoWorkspace(s.workspaceID) }>
		<input type="hidden" name="vcs_provider_id" value={ vcsProviderID.String() }/>
		<button class="btn">Select</button>
	</form>
}

templ listVCSRepos(ws *Workspace, vcsProviderID resource.TfeID, repos []vcs.Repo) {
	{{
	layoutProps := components.LayoutProps{
		Title:        "list vcs repos | " + ws.ID.String(),
		Organization: ws.Organization,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "workspaces", Link: paths.Workspaces(ws.Organization)},
			{Name: ws.Name, Link: paths.Workspace(ws.ID)},
			{Name: "vcs repositories"},
		},
	}
	}}
	@components.Layout(layoutProps) {
		@connections.Steps(connections.SelectRepoStep)
		<div>
			Select a VCS repository to connect this workspace to. Either select a repository from the list or enter the name of a repository below.
		</div>
		<form action={ paths.ConnectWorkspace(ws.ID) } method="POST">
			<input type="hidden" name="vcs_provider_id" id="vcs_provider_id" value={ vcsProviderID.String() }/>
			<input class="input" type="text" name="identifier" id="identifier" value="" placeholder="{owner}/{repository}" required/>
			<button class="btn">Connect</button>
		</form>
		@components.UnpaginatedTable(
			&connections.ReposTable{
				Actions: repoSelector{
					workspaceID:   ws.ID,
					vcsProviderID: vcsProviderID,
				}.action,
			},
			repos,
			"repos-table",
		)
	}
}

type repoSelector struct {
	workspaceID   resource.TfeID
	vcsProviderID resource.TfeID
}

templ (s repoSelector) action(repo vcs.Repo) {
	<form action={ paths.ConnectWorkspace(s.workspaceID) } method="POST">
		<input type="hidden" name="vcs_provider_id" value={ s.vcsProviderID.String() }/>
		<input type="hidden" name="identifier" id="identifier" value={ repo.String() }/>
		<button class="btn">Connect</button>
	</form>
}

templ WorkspaceHeaderLinks(workspaceID resource.TfeID, canUpdate bool) {
	<ul id="workspace-submenu" class="menu menu-horizontal bg-base-200 rounded-box [&>li>a]:py-0">
		@components.MenuItem("Runs", paths.Runs(workspaceID))
		@components.MenuItem("Variables", paths.Variables(workspaceID))
		if canUpdate {
			@components.MenuItem("Settings", paths.EditWorkspace(workspaceID))
		}
	</ul>
}

templ workspaceHeaderLinksAndStartRunSelector(props getProps) {
	if props.canCreateRun {
		<div>
			<form id="workspace-start-run-form" action={ paths.StartRunWorkspace(props.ws.ID) } method="POST">
				<select class="select" name="operation" id="start-run-operation" onchange="this.form.submit()">
					<option disabled selected>-- start run --</option>
					<option value="plan-only">plan only</option>
					if props.canApply {
						<option value="plan-and-apply">plan and apply</option>
					}
				</select>
			</form>
		</div>
	}
	@WorkspaceHeaderLinks(props.ws.ID, props.canUpdateWorkspace)
}

func magnifyingGlassStyle(ctx context.Context) (string, error) {
	path, err := components.AssetPath(ctx, "/static/images/magnifying_glass.svg")
	if err != nil {
		return "", err
	}
	return fmt.Sprintf("background-image: url(%s)", path), nil
}

func boolString(b bool) string {
	if b {
		return "true"
	}
	return "false"
}

func toJSON(v any) string {
	b, _ := json.Marshal(v)
	return string(b)
}
