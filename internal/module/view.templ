package module

import (
	"github.com/leg100/otf/internal/connections"
	"github.com/leg100/otf/internal/http/html/components"
	"github.com/leg100/otf/internal/http/html/components/paths"
	"github.com/leg100/otf/internal/organization"
	"github.com/leg100/otf/internal/resource"
	"github.com/leg100/otf/internal/vcsprovider"
	"html/template"
	"slices"
	"strings"
)

type newViewProps struct {
	organization organization.Name
	providers    []*vcsprovider.VCSProvider
}

templ newView(props newViewProps) {
	@components.Layout(components.LayoutProps{
		Title:        "new module",
		Organization: props.organization,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "Modules", Link: paths.Modules(props.organization)},
			{Name: "new"},
		},
	}) {
		@connections.Steps(connections.ConnectStep)
		<h3 class="font-semibold">Connect to a version control provider</h3>
		<div>
			Choose a VCS provider that hosts your module source code.
		</div>
		@components.UnpaginatedTable(
			&vcsprovider.Table{Actions: selectVCSProviderAction},
			props.providers,
			"providers",
		)
	}
}

templ selectVCSProviderAction(vcsProviderID resource.TfeID) {
	<form action={ paths.ConnectModule(vcsProviderID) }>
		<input type="hidden" name="vcs_provider_id" value={ vcsProviderID.String() }/>
		<button class="btn">Select</button>
	</form>
}

type connectProps struct {
	repos    []string
	provider *vcsprovider.VCSProvider
}

templ connect(props connectProps) {
	@components.Layout(components.LayoutProps{
		Title:        "new module",
		Organization: props.provider.Organization,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "Modules", Link: paths.Modules(props.provider.Organization)},
			{Name: "new"},
		},
	}) {
		@connections.Steps(connections.SelectRepoStep)
		<h3 class="font-semibold">Choose a repository</h3>
		<div>
			Choose the repository that hosts your module source code. We'll watch this for commits and tags. The format of your repository name should be `{ "terraform-<PROVIDER>-<NAME>" }`.
		</div>
		<form action={ paths.CreateModule(props.provider.Organization) } method="POST">
			<input type="hidden" name="vcs_provider_id" id="vcs_provider_id" value={ props.provider.ID.String() }/>
			<input class="input" type="text" name="identifier" id="identifier" value="" placeholder="{owner}/{repository}" required/>
			<button class="btn">Connect</button>
		</form>
		@components.UnpaginatedTable(
			&connections.ReposTable{
				Actions: repoSelector{
					provider: props.provider,
				}.action,
			},
			props.repos,
			"repos-table",
		)
	}
}

type repoSelector struct {
	provider *vcsprovider.VCSProvider
}

templ (s repoSelector) action(repo string) {
	<form action={ paths.CreateModule(s.provider.Organization) } method="POST">
		<input type="hidden" name="vcs_provider_id" value={ s.provider.ID.String() }/>
		<input type="hidden" name="identifier" id="identifier" value={ repo }/>
		<button class="btn">Connect</button>
	</form>
}

type listProps struct {
	organization     organization.Name
	page             *resource.Page[*Module]
	canPublishModule bool
}

templ list(props listProps) {
	@components.Layout(components.LayoutProps{
		Title:          "Modules",
		Organization:   props.organization,
		ContentActions: listActions(props),
		Breadcrumbs: []components.Breadcrumb{
			{Name: "Modules"},
		},
	}) {
		@components.Table(&table{}, props.page, "page-results")
	}
}

templ listActions(props listProps) {
	if props.canPublishModule {
		<form action={ paths.NewModule(props.organization) } method="GET">
			<button class="btn" id="list-module-vcs-providers-button">Publish</button>
		</form>
	}
}

type table struct{}

templ (t table) Header() {
	<th>Name</th>
	<th>ID</th>
	<th>Created</th>
}

templ (t table) Row(module *Module) {
	<tr id={ "mod-item-" + module.Name } x-data={ components.BlockLink(paths.Module(module.ID)) }>
		<td>
			<a class="link" href={ paths.Module(module.ID) }>
				{ module.Name }
			</a>
		</td>
		<td>
			@components.Identifier(module.ID)
		</td>
		<td>
			@components.Ago(module.CreatedAt)
		</td>
	</tr>
}

type getProps struct {
	module           *Module
	terraformModule  *TerraformModule
	readme           template.HTML
	currentVersion   *ModuleVersion
	canPublishModule bool
	hostname         string
}

templ get(props getProps) {
	@components.Layout(components.LayoutProps{
		Title:        "modules",
		Organization: props.module.Organization,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "Modules", Link: paths.Modules(props.module.Organization)},
			{Name: props.module.Name},
		},
	}) {
		<div class="flex flex-col gap-4">
			switch props.module.Status {
				case ModuleStatusPending:
					Module status is still pending.
				case ModuleStatusNoVersionTags:
					Module source repository has no tags.
				case ModuleStatusSetupFailed:
					Module setup failed.
				case ModuleStatusSetupComplete:
					<div class="flex gap-4 items-center">
						<form class="flex gap-2 items-center" action={ paths.Module(props.module.ID) } method="GET">
							<label>Version</label>
							<select class="select w-32" name="version" id="version" onchange="this.form.submit()">
								{{ slices.Reverse(props.module.AvailableVersions()) }}
								for _, mv := range props.module.AvailableVersions() {
									if mv.Status == ModuleVersionStatusOK {
										<option value={ mv.Version } selected?={ mv.Version == props.currentVersion.Version }>{ mv.Version }</option>
									}
								}
							</select>
						</form>
						if props.module.Connection != nil {
							<div>
								Source <span class="bg-gray-200" id="vcs-repo">{ props.module.Connection.Repo }</span>
							</div>
						}
					</div>
					<div>
						<h3 class="font-semibold"></h3>
						<div class="flex flex-col gap-2">
							<label for="usage">Usage</label>
							<textarea class="textarea font-normal font-mono" id="usage" cols="60" rows="5" readonly wrap="off">
								{ `module "{ ` + props.module.Name + `}" {
	source = "{ ` + props.hostname + ` }/{ ` + props.module.Organization.String() + ` }/{ ` + props.module.Name + ` }/{ ` + props.module.Provider + ` }"
	version = "{ ` + props.currentVersion.Version + ` }"
}` }
							</textarea>
						</div>
					</div>
					<div>
						@templ.Raw(strings.TrimSpace(string(props.readme)))
					</div>
					<div>
						<h3 class="font-semibold">Resources</h3>
						for resource := range props.terraformModule.ManagedResources {
							<div>
								<span class="bg-gray-200">{ resource }</span>
							</div>
						}
					</div>
					<div>
						<h3 class="font-semibold">Variables</h3>
						for v := range props.terraformModule.Variables {
							<div>
								<span class="bg-gray-200">{ v }</span>
							</div>
						}
					</div>
					<div>
						<h3 class="font-semibold">Outputs</h3>
						for output := range props.terraformModule.Outputs {
							<div>
								<span class="bg-gray-200">{ output }</span>
							</div>
						}
					</div>
			}
			<form id="module-delete-button" action={ paths.DeleteModule(props.module.ID) } method="POST">
				<button class="btn btn-error btn-outline" onclick="return confirm('Are you sure you want to delete?')">Delete module</button>
			</form>
		</div>
	}
}
