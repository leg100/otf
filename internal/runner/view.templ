package runner

import (
	"encoding/json"
	"fmt"
	"github.com/leg100/otf/internal"
	"github.com/leg100/otf/internal/http/html/components"
	"github.com/leg100/otf/internal/http/html/components/paths"
	"github.com/leg100/otf/internal/organization"
	"github.com/leg100/otf/internal/resource"
	"time"
)

type listRunnersProps struct {
	organization organization.Name
	runners      []*RunnerMeta
}

templ listRunners(props listRunnersProps) {
	@components.Layout(components.LayoutProps{
		Title:        "runners",
		Organization: &props.organization,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "runners"},
		},
	}) {
		<div class="description max-w-2xl">
			A runner handles the execution of runs. There are two types of runners: the runner built into <span class="bg-gray-200 font-mono p-0.5 text-xs">otfd</span> which handles runs for workspaces with the <span class="font-bold">remote</span> execution mode; and <span class="bg-gray-200 font-mono p-0.5 text-xs">otf-agent</span>, which handles runs for workspaces with the <span class="font-bold">agent</span> execution mode.
		</div>
		for _, runner := range props.runners {
			@runnerListItem(runner)
		}
	}
}

var runnerStatusColors = map[RunnerStatus]string{
	RunnerIdle:    "bg-green-100",
	RunnerBusy:    "bg-blue-200",
	RunnerUnknown: "bg-gray-100",
	RunnerErrored: "bg-red-100",
	RunnerExited:  "bg-purple-100",
}

templ runnerListItem(runner *RunnerMeta) {
	<div id={ "item-" + runner.ID.String() } class="widget">
		<div>
			<div class="flex gap-2 items-center">
				if runner.Name != "" {
					<span>{ runner.Name }</span>
				}
				<div class={ runnerStatusColors[runner.Status] }>{ string(runner.Status) }</div>
				<div class="text-sm" title={ fmt.Sprintf("%d jobs are currently allocated out of a maximum of %d jobs", runner.CurrentJobs, runner.MaxJobs) }>({ fmt.Sprintf("%d/%d", runner.CurrentJobs, runner.MaxJobs) })</div>
			</div>
			<span title={ runner.LastPingAt.String() }>last seen { internal.Ago(time.Now(), runner.LastPingAt) } </span>
		</div>
		<div>
			@components.Identifier(runner.ID)
			<div>
				<span class="font-mono bg-gray-200 py-1 px-2 text-xs">{ runner.Version }</span>
				<span id="process-name" class="font-mono bg-gray-200 py-1 px-2 text-xs">
					if runner.IsAgent() {
						otf-agent
					} else {
						otfd
					}
				</span>
				<span class="font-mono bg-gray-200 py-1 px-2 text-xs">{ runner.IPAddress.String() }</span>
			</div>
		</div>
	</div>
}

type listAgentPoolProps struct {
	organization organization.Name
	pools        []*Pool
}

templ listAgentPools(props listAgentPoolProps) {
	@components.Layout(components.LayoutProps{
		Title:        "agent pools",
		Organization: &props.organization,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "agent pools"},
		},
	}) {
		<div class="description w-3/4">
			An agent pool is a group of <span class="bg-gray-200 font-mono p-0.5 text-xs">otf-agent</span> processes that can be used to communicate with isolated, private, or on-premises infrastructure. Each agent pool has its own set of tokens which are not shared across pools. When a workspace is configured to execute runs using the <span class="font-bold">agent</span> execution mode, any available agent in that workspace's associated agent pool is eligible to complete the run.
		</div>
		<details id="new-pool-details" closed>
			<summary class="cursor-pointer py-2">
				<span class="font-semibold">New agent pool</span>
			</summary>
			<form class="flex flex-col gap-5" action={ paths.CreateAgentPool(props.organization.String()) } method="POST">
				<div class="field">
					<label for="name">Name</label>
					<input class="input w-3/4" rows="3" type="text" name="name" id="new-pool-name" required/>
					<span class="description">Enter a name to help identify the pool.</span>
				</div>
				<div class="field">
					<button class="btn w-40">Create agent pool</button>
				</div>
			</form>
			<hr class="my-4"/>
		</details>
		@components.ContentList(props.pools, agentPoolListItem)
	}
}

templ agentPoolListItem(pool *Pool) {
	<div x-data={ components.BlockLink(paths.AgentPool(pool.ID.String())) } class="widget" id={ pool.ID.String() }>
		<div>
			<span>{ pool.Name }</span>
			<span>{ internal.Ago(time.Now(), pool.CreatedAt) }</span>
		</div>
		<div>
			@components.Identifier(pool.ID)
		</div>
	</div>
}

type agentPoolListAllowedProps struct {
	pools         []*Pool
	currentPoolID *resource.ID
}

templ agentPoolListAllowed(props agentPoolListAllowedProps) {
	<select class="select" id="agent-pool-id" name="agent_pool_id">
		for _, pool := range props.pools {
			<option value={ pool.ID.String() } selected?={ props.currentPoolID != nil && *props.currentPoolID == pool.ID }>{ pool.Name }</option>
		}
	</select>
}

type getAgentPoolProps struct {
	pool                           *Pool
	allowedButUnassignedWorkspaces []poolWorkspace
	assignedWorkspaces             []poolWorkspace
	availableWorkspaces            []poolWorkspace
	tokens                         []*agentToken
	agents                         []*RunnerMeta
	canDeleteAgentPool             bool
}

templ getAgentPool(props getAgentPoolProps) {
	@components.Layout(components.LayoutProps{
		Title:        props.pool.Name,
		Organization: &props.pool.Organization,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "agent pools", Link: paths.AgentPools(props.pool.Organization.String())},
			{Name: props.pool.Name},
		},
	}) {
		<div>
			@components.Identifier(props.pool.ID)
		</div>
		<form class="" action={ paths.UpdateAgentPool(props.pool.ID.String()) } method="POST">
			<div class="field mb-4">
				<label for="name">Name</label>
				<input class="input w-80" type="text" name="name" id="name" value={ props.pool.Name } required/>
			</div>
			<fieldset class="border border-slate-900 p-3 flex flex-col gap-2">
				<legend class="">Workspaces</legend>
				<span class="description">You can grant access to this agent pool globally to all current and future workspaces in this organization or grant access to specific workspaces.</span>
				<div class="mt-4 form-checkbox">
					<input type="radio" id="workspaces-all" name="organization_scoped" value="true" checked?={ props.pool.OrganizationScoped }/>
					<label for="workspaces-all">Grant access to all workspaces in this organization</label>
				</div>
				<div class="mt-4 form-checkbox">
					<input class="peer" type="radio" id="workspaces-specific" name="organization_scoped" value="false" checked?={ !props.pool.OrganizationScoped }/>
					<label for="workspaces-specific">Grant access to specific workspaces</label>
					<script src={ components.AssetPath(ctx, "/static/js/dropdown.js") }></script>
					<div
						class="hidden relative col-start-2 mt-2 w-full peer-checked:block"
						x-data={ "dropdown(" + toJSON(props.allowedButUnassignedWorkspaces) + ", " + toJSON(props.availableWorkspaces) + ")" }
						x-ref="workspace_select"
						@keydown.escape.prevent.stop="close($refs.workspace_input)"
						@focusin.window="! $refs.workspace_select.contains($event.target) && close()"
					>
						<div
							@click.outside="close()"
						>
							<input type="hidden" id="workspaces" name="allowed_workspaces" :value="JSON.stringify(existing)"/>
							<input
								class="input grow w-80"
								type="text"
								id="workspace-input"
								x-ref="workspace_input"
								x-model="search"
								placeholder="Select workspace"
								@focusin="open = true"
								@click="open = true"
							/>
							<div
								x-ref="panel"
								x-show="showPanel"
								x-cloak
								class="absolute flex flex-col w-80 mt-1 bg-white overflow-x-auto border border-black"
							>
								<template x-for="item in filterAvailable" :key="item.id">
									<button :id="item.id" @click="addItem(item)" class="text-left focus:bg-gray-200 hover:bg-gray-200 py-1 px-2" x-text="item.name"></button>
								</template>
							</div>
						</div>
						<div class="bg-gray-100 mt-2 p-2 flex flex-col gap-2">
							<div class="description">A workspace must be granted access before it can be assigned. To revoke access from an assigned workspace, first unassign the workspace and then revoke.</div>
							<h4 class="font-bold text-sm">Granted</h4>
							<div id="granted-workspaces" class="flex flex-row gap-2">
								<template x-for="item in existing">
									<div class="text-sm flex">
										<a class="bg-green-300 py-1 px-2" x-text="item.name" :href="'/app/workspaces/' + item.id + '/edit'"></a><button @click="deleteItem(item)" type="button" class="text-white bg-black py-1 px-2 hover:bg-red-500" id="button-remove-tag-{ . }" class="delete cross">revoke</button>
									</div>
								</template>
							</div>
							<h4 class="font-bold text-sm">Granted & Assigned</h4>
							<div id="granted-and-assigned-workspaces" class="flex flex-row gap-2">
								<input type="hidden" id="assigned-workspaces" name="assigned_workspaces" value={ toJSON(props.assignedWorkspaces) }/>
								for _, ws := range props.assignedWorkspaces {
									<a class="bg-blue-300 hover:text-white py-1 px-2 text-sm" href={ paths.EditWorkspace(ws.ID.String()) }>{ ws.Name }</a>
								}
							</div>
						</div>
					</div>
				</div>
			</fieldset>
			<div class="field">
				<button class="btn w-40 mt-4">Save changes</button>
			</div>
		</form>
		<hr class="my-4"/>
		<h3 class="font-semibold text-lg mb-2">Tokens</h3>
		<details id="new-token-details" closed>
			<summary class="cursor-pointer py-2">
				<span class="font-semibold">New token</span>
			</summary>
			<form class="flex flex-col gap-5" action={ paths.CreateAgentToken(props.pool.ID.String()) } method="POST">
				<div class="field">
					<label for="new-token-description">Description</label>
					<input class="input w-3/4" rows="3" type="text" name="description" id="new-token-description" required/>
					<span class="description">Enter a description to help identify the token.</span>
				</div>
				<div class="field">
					<button class="btn w-40">Create token</button>
				</div>
			</form>
		</details>
		for _, token := range props.tokens {
			<div class="widget">
				<div>
					<span>{ token.Description }</span>
					<span>created { internal.Ago(time.Now(), token.CreatedAt) }</span>
				</div>
				<div>
					@components.Identifier(token.ID)
					<form id="delete-agent-token" action={ paths.DeleteAgentToken(token.ID.String()) } method="POST">
						@components.DeleteButton()
					</form>
				</div>
			</div>
		}
		<hr class="my-4"/>
		<h3 class="font-semibold text-lg mb-2">Agents</h3>
		for _, agent := range props.agents {
			@runnerListItem(agent)
		}
		if props.canDeleteAgentPool {
			<hr class="my-4"/>
			<h3 class="font-semibold text-lg mb-2">Advanced</h3>
			if len(props.assignedWorkspaces) > 0 {
				<span class="description">Before deleting an agent pool you must unassign the pool from the following workspaces:</span>
				<ul id="unassign-workspaces-before-deletion" class="flex flex-row gap-2">
					for _, ws := range props.assignedWorkspaces {
						<a class="bg-blue-300 text-sm hover:text-white py-1 px-2" href={ paths.EditWorkspace(ws.ID.String()) }>{ ws.Name }</a>
					}
				</ul>
			}
			<form class="mt-2" action={ paths.DeleteAgentPool(props.pool.ID.String()) } method="POST">
				<button id="delete-agent-pool-button" class="btn btn-outline btn-error disabled:opacity-75" onclick="return confirm('Are you sure you want to delete?')" disabled?={ len(props.assignedWorkspaces) > 0 }>
					Delete agent pool
				</button>
			</form>
		}
	}
}

func toJSON(v any) string {
	b, _ := json.Marshal(v)
	return string(b)
}
