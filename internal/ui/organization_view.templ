package ui

import (
	"github.com/leg100/otf/internal"
	"github.com/leg100/otf/internal/http/html/components"
	"github.com/leg100/otf/internal/http/html/components/paths"
	"github.com/leg100/otf/internal/organization"
	"github.com/leg100/otf/internal/resource"
	"time"
)

templ organizationNew() {
	@components.Layout(components.LayoutProps{
		Title: "new organization",
		Breadcrumbs: []components.Breadcrumb{
			{Name: "organizations", Link: paths.Organizations()},
			{Name: "new"},
		},
	}) {
		<form class="flex flex-col gap-2" action={ paths.CreateOrganization() } method="POST">
			<div class="field">
				<label for="name">Name</label>
				<input class="input w-80" type="text" name="name" id="name" required/>
			</div>
			<div>
				<button class="btn" id="create-organization-button">Create organization</button>
			</div>
		</form>
	}
}

type organizationListProps struct {
	*resource.Page[*organization.Organization]
	CanCreate bool
}

templ organizationList(props organizationListProps) {
	{{
		layoutProps := components.LayoutProps{
			Title: "organizations",
			Breadcrumbs: []components.Breadcrumb{
				{Name: "organizations"},
			},
			ContentActions: organizationListActions(props.CanCreate),
		}
	}}
	@components.Layout(layoutProps) {
		@components.Table(&organizationTable{}, props.Page)
	}
}

type organizationTable struct{}

templ (t organizationTable) Header() {
	<th>Name</th>
	<th>ID</th>
}

templ (t organizationTable) Row(org *organization.Organization) {
	<tr id={ "org-item-" + org.Name.String() }>
		<td>
			<a class="link" href={ paths.Organization(org.Name) }>
				{ org.Name.String() }
			</a>
		</td>
		<td>
			@components.Identifier(org.ID)
		</td>
	</tr>
}

templ organizationListActions(canCreate bool) {
	<form action={ paths.NewOrganization() } method="GET">
		<button
			class="btn"
			id="new-organization-button"
			disabled?={ !canCreate }
			if canCreate {
				title="create a new organization"
			} else {
				title="organization creation has been restricted to site admins"
			}
		>
			New Organization
		</button>
	</form>
}

templ organizationEdit(org *organization.Organization) {
	@components.Layout(components.LayoutProps{
		Title:        org.Name.String(),
		Organization: org.Name,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "Settings"},
		},
	}) {
		<form class="flex flex-col gap-5" action={ paths.UpdateOrganization(org.Name) } method="POST">
			<div class="field">
				<label for="name">Name</label>
				<input class="input w-80" type="text" name="new_name" id="name" value={ org.Name.String() } required/>
			</div>
			<div class="field">
				<button class="btn w-72">Update organization name</button>
			</div>
		</form>
		<hr class="my-4"/>
		<h3 class="font-semibold text-lg mb-2">Advanced</h3>
		<form action={ paths.DeleteOrganization(org.Name) } method="POST">
			<button id="delete-organization-button" class="btn btn-error btn-outline" onclick="return confirm('Are you sure you want to delete?')">
				Delete organization
			</button>
			<input type="hidden" name="id" value={ org.ID.String() }/>
		</form>
	}
}

templ getToken(org organization.Name, token *organization.OrganizationToken) {
	@components.Layout(components.LayoutProps{
		Title:        org.String(),
		Organization: org,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "Organization Token"},
		},
	}) {
		<span class="text-base-content/60 text-sm">
			The organization API token is used to manage teams, team membership and workspaces. This token does not have permission to perform plans and applies in workspaces.
		</span>
		if token != nil {
			@components.UnpaginatedTable(
				&organizationTokenTable{},
				[]*organization.OrganizationToken{token},
			)
		} else {
			<form class="mt-2" action={ paths.CreateOrganizationToken(org) } method="POST">
				<button class="btn w-72">Create organization token</button>
			</form>
		}
	}
}

type organizationTokenTable struct{}

templ (t organizationTokenTable) Header() {
	<th>ID</th>
	<th>Created</th>
	<th>Actions</th>
}

templ (t organizationTokenTable) Row(token *organization.OrganizationToken) {
	<tr id="item-token">
		<td>
			@components.Identifier(token.ID)
		</td>
		<td>
			<span>{ internal.Ago(time.Now(), token.CreatedAt) }</span>
		</td>
		<td>
			<div class="flex gap-2">
				<form action={ paths.CreateOrganizationToken(token.Organization) } method="POST">
					<button class="btn">Regenerate</button>
				</form>
				<form action={ paths.DeleteOrganizationToken(token.Organization) } method="POST">
					@components.DeleteButton()
				</form>
			</div>
		</td>
	</tr>
}
