// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package releases

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const findLatestTerraformVersion = `-- name: FindLatestTerraformVersion :many
SELECT version, checkpoint
FROM latest_terraform_version
`

func (q *Queries) FindLatestTerraformVersion(ctx context.Context, db DBTX) ([]LatestTerraformVersion, error) {
	rows, err := db.Query(ctx, findLatestTerraformVersion)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LatestTerraformVersion
	for rows.Next() {
		var i LatestTerraformVersion
		if err := rows.Scan(&i.Version, &i.Checkpoint); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertLatestTerraformVersion = `-- name: InsertLatestTerraformVersion :exec
INSERT INTO latest_terraform_version (
    version,
    checkpoint
) VALUES (
    $1,
    current_timestamp
)
`

func (q *Queries) InsertLatestTerraformVersion(ctx context.Context, db DBTX, version pgtype.Text) error {
	_, err := db.Exec(ctx, insertLatestTerraformVersion, version)
	return err
}

const updateLatestTerraformVersion = `-- name: UpdateLatestTerraformVersion :exec
UPDATE latest_terraform_version
SET version = $1,
    checkpoint = current_timestamp
`

func (q *Queries) UpdateLatestTerraformVersion(ctx context.Context, db DBTX, version pgtype.Text) error {
	_, err := db.Exec(ctx, updateLatestTerraformVersion, version)
	return err
}
