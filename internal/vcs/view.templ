package vcs

import (
	"github.com/leg100/otf/internal"
	"github.com/leg100/otf/internal/http/html/components"
	"github.com/leg100/otf/internal/http/html/components/paths"
	"github.com/leg100/otf/internal/organization"
	"github.com/leg100/otf/internal/resource"
	"time"
)

type listProps struct {
	organization organization.Name
	providers    *resource.Page[*Provider]
	kinds        []Kind
}

templ list(props listProps) {
	@components.Layout(components.LayoutProps{
		Title:        "vcs providers",
		Organization: props.organization,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "VCS Providers"},
		},
	}) {
		<div class="text-base-content/60 text-sm">
			To connect workspaces and publish modules, OTF needs access to your version control system (VCS) provider. Use this page to create and list access to VCS providers.
		</div>
		<div class="flex flex-wrap gap-4 mt-4">
			for _, kind := range props.kinds {
				<form action={ paths.NewVCSProvider(props.organization) } method="GET">
					<button class="btn">
						@kind.Icon
						New { internal.Title(string(kind.ID)) } Provider
					</button>
					<input type="hidden" name="kind" id="kind" value={ kind.ID }/>
				</form>
			}
		</div>
		<div id="content-list">
			@components.Table(
				&Table{Actions: tableAction},
				props.providers,
				"page-results",
			)
		</div>
	}
}

type Table struct {
	Actions func(vcsProviderID resource.TfeID) templ.Component
}

templ (t Table) Header() {
	<th>Name</th>
	<th>ID</th>
	<th>Created</th>
	<th>Action</th>
}

templ (t Table) Row(provider *Provider) {
	<tr id={ "item-vcsprovider-" + provider.String() }>
		<td>
			<div class="flex gap-2 items-center">
				@provider.Kind.Icon
				{ provider.String() }
			</div>
		</td>
		<td>
			@components.Identifier(provider.ID)
		</td>
		<td>
			{ internal.Ago(time.Now(), provider.CreatedAt) }
		</td>
		<td>
			@t.Actions(provider.ID)
		</td>
	</tr>
}

templ tableAction(vcsProviderID resource.TfeID) {
	<form id="edit-vcs-provider" action={ paths.EditVCSProvider(vcsProviderID) }>
		@components.EditButton()
		<input type="hidden" name="id" value={ vcsProviderID.String() }/>
	</form>
}

templ edit(provider *Provider) {
	@components.Layout(components.LayoutProps{
		Title:        "edit vcs provider",
		Organization: provider.Organization,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "VCS Providers", Link: paths.VCSProviders(provider.Organization)},
			{Name: provider.String()},
			{Name: "Settings"},
		},
	}) {
		@form(formProps{
			edit:   true,
			action: paths.UpdateVCSProvider(provider.ID),
			kind:   provider.Kind,
		})
		<hr class="my-4"/>
		<h3 class="font-semibold text-lg mb-2">Advanced</h3>
		<form action={ paths.DeleteVCSProvider(provider.ID) } method="POST">
			<button id="delete-vcs-provider-button" class="btn btn-outline btn-error" onclick="return confirm('Are you sure you want to delete?')">
				Delete VCS provider
			</button>
		</form>
	}
}

type newProviderProps struct {
	organization organization.Name
	kind         Kind
}

templ newProvider(props newProviderProps) {
	@components.Layout(components.LayoutProps{
		Title:        "new vcs provider",
		Organization: props.organization,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "New " + internal.Title(string(props.kind.ID)) + " VCS Provider"},
		},
	}) {
		<div>
			Create a { internal.Title(string(props.kind.ID)) } VCS provider.
		</div>
		@form(formProps{
			action: paths.CreateVCSProvider(props.organization),
			kind:   props.kind,
			edit:   false,
		})
	}
}

type formProps struct {
	action templ.SafeURL
	kind   Kind
	name   string
	config Config
	edit   bool
}

templ form(props formProps) {
	<form class="flex flex-col gap-5" action={ props.action } method="POST">
		<div class="field">
			<label for="name">Name</label>
			<input
				class="input w-64"
				type="text"
				name="name"
				id="name"
				value={ props.name }
			/>
			<span class="description">An optional display name for your VCS provider.</span>
		</div>
		if props.kind.TokenKind != nil {
			<div class="field">
				<label for="token">Token</label>
				<textarea
					class="input w-96"
					rows="3"
					name="token"
					id="token"
					if props.edit {
						placeholder="*****"
					} else {
						required
					}
				></textarea>
				<span class="description">
					@props.kind.TokenKind.Description
				</span>
			</div>
		}
		<!-- User cannot edit installation -->
		if !props.edit && props.kind.InstallationKind != nil {
			{{
					result, err := props.kind.InstallationKind.ListInstallations(ctx)
					if err != nil {
						return err
					}
			}}
			if len(result.Results) > 0 {
				<div class="field">
					<label for="install_id">Installation</label>
					<select class="select w-48" name="install_id" id="select-install-id">
						for _, install := range result.Results {
							<option value={ install.ID }>
								{ install.String() }
							</option>
						}
					</select>
					<span class="description">Select an installation.</span>
				</div>
			} else {
				<span>No installations found. Install it <a class="underline" href={ result.InstallationLink }>first</a>.</span>
			}
		}
		if props.edit {
			<button class="btn w-32">Update</button>
		} else {
			<button class="btn w-32">Create</button>
			<input type="hidden" name="kind" id="kind" value={ string(props.kind.ID) }/>
		}
	</form>
}

templ IconWrapper(id KindID, icon templ.Component) {
	<div
		class="size-6"
		id={ "run-trigger-" + string(id) }
		title={ "run triggered via " + string(id) }
	>
		@icon
	</div>
}
