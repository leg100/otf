package vcs

import (
	"errors"
	"github.com/leg100/otf/internal"
	"github.com/leg100/otf/internal/http/html/components"
	"github.com/leg100/otf/internal/http/html/components/paths"
	"github.com/leg100/otf/internal/organization"
	"github.com/leg100/otf/internal/resource"
	"time"
)

type listProps struct {
	organization organization.Name
	providers    *resource.Page[*Provider]
	kinds        []Kind
}

templ list(props listProps) {
	@components.Layout(components.LayoutProps{
		Title:        "vcs providers",
		Organization: props.organization,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "VCS Providers"},
		},
	}) {
		<div class="text-base-content/60 text-sm">
			To connect workspaces and publish modules, OTF needs access to your version control system (VCS) provider. Use this page to create and list access to VCS providers.
		</div>
		<div class="flex flex-wrap gap-4 mt-4">
			for _, kind := range props.kinds {
				<form action={ paths.NewVCSProvider(props.organization) } method="GET">
					<button class="btn">
						@kind.Icon
						New { internal.Title(string(kind.ID)) } Provider
					</button>
					<input type="hidden" name="kind" id="kind" value={ kind.ID }/>
				</form>
			}
		</div>
		<div id="content-list">
			@components.Table(
				&Table{Actions: tableAction},
				props.providers,
				"page-results",
			)
		</div>
	}
}

type Table struct {
	Actions func(vcsProviderID resource.TfeID) templ.Component
}

templ (t Table) Header() {
	<th>Name</th>
	<th>ID</th>
	<th>Created</th>
	<th>Action</th>
}

templ (t Table) Row(provider *Provider) {
	<tr id={ "item-vcsprovider-" + provider.String() }>
		<td>
			<div class="flex gap-2">
				@provider.Icon
				{ provider.String() }
			</div>
		</td>
		<td>
			@components.Identifier(provider.ID)
		</td>
		<td>
			{ internal.Ago(time.Now(), provider.CreatedAt) }
		</td>
		<td>
			@t.Actions(provider.ID)
		</td>
	</tr>
}

templ tableAction(vcsProviderID resource.TfeID) {
	<form id="edit-vcs-provider" action={ paths.EditVCSProvider(vcsProviderID) }>
		@components.EditButton()
		<input type="hidden" name="id" value={ vcsProviderID.String() }/>
	</form>
}

templ edit(provider *Provider) {
	@components.Layout(components.LayoutProps{
		Title:        "edit vcs provider",
		Organization: provider.Organization,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "VCS Providers", Link: paths.VCSProviders(provider.Organization)},
			{Name: provider.String()},
			{Name: "settings"},
		},
	}) {
		@form(formProps{
			provider: provider,
			edit:     true,
			action:   paths.UpdateVCSProvider(provider.ID),
		})
		<hr class="my-4"/>
		<h3 class="font-semibold text-lg mb-2">Advanced</h3>
		<form action={ paths.DeleteVCSProvider(provider.ID) } method="POST">
			<button id="delete-vcs-provider-button" class="btn btn-outline btn-error" onclick="return confirm('Are you sure you want to delete?')">
				Delete VCS provider
			</button>
		</form>
	}
}

type newProviderProps struct {
	organization organization.Name
	kind         Kind
}

templ newProvider(props newProviderProps) {
	@components.Layout(components.LayoutProps{
		Title:        "new vcs provider",
		Organization: props.organization,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "New VCS Provider"},
		},
	}) {
		@form(formProps{
			provider: &Provider{Kind: props.kind},
			action:   paths.CreateVCSProvider(props.organization),
			edit:     false,
		})
	}
}

type formProps struct {
	provider *Provider
	action   templ.SafeURL
	edit     bool
}

templ form(props formProps) {
	<div class="mb-2 flex gap-2">
		@props.provider.Icon
		<span class="">{ internal.Title(string(props.provider.Kind.ID)) }</span>
	</div>
	{{
		var (
			app                 App
			showCreateAppNotice bool
			err                 error
		)
		if props.provider.AppKind != nil {
			app, err = props.provider.AppKind.GetApp(ctx)
			if errors.Is(err, internal.ErrResourceNotFound) {
				showCreateAppNotice = true
			} else if err != nil {
				return err
			}
		}
	}}
	if showCreateAppNotice {
		<span>
			Application not yet created. Create one <a class="link" href={ paths.NewGithubApp() }>here</a>.
		</span>
	} else {
		<form class="flex flex-col gap-5" action={ props.action } method="POST">
			<div class="field">
				<label for="name">Name</label>
				<input
					class="input w-64"
					type="text"
					name="name"
					id="name"
					value={ props.provider.String() }
				/>
				<span class="description">An optional display name for your VCS provider.</span>
			</div>
			if props.provider.TokenKind != nil {
				<div class="field">
					<label for="token">Token</label>
					<textarea
						class="input w-96"
						rows="3"
						name="token"
						id="token"
						if props.edit {
							placeholder="*****"
						} else {
							required
						}
					></textarea>
					<span class="description">
						@props.provider.TokenKind.Description
					</span>
				</div>
			}
			if app != nil {
				if props.edit {
					<!-- User cannot edit installation -->
					<div class="field">
						<label for="install_id">Installation</label>
						<input class="input" type="text" readonly disabled name="install_id" id="install-id" value={ props.provider.Installation.ID }/>
					</div>
				} else {
					{{
						installations, err := app.ListInstallations(ctx)
						if err != nil {
							return err
						}
					}}
					if len(installations) > 0 {
						<div class="field">
							<label for="install_id">Installation</label>
							<select class="select w-48" name="install_id" id="select-install-id">
								for _, install := range installations {
									<option value={ install.ID }>
										{ install.String() }
									</option>
								}
							</select>
							<span class="description">Select an installation.</span>
						</div>
					} else {
						<span>No installations found. Install it <a class="underline" href={ app.InstallationLink() }>first</a>.</span>
					}
				}
			}
			if props.edit {
				<button class="btn w-32">Update</button>
			} else {
				<button class="btn w-32">Create</button>
				<input type="hidden" name="kind" id="kind" value={ string(props.provider.Kind.ID) }/>
			}
		</form>
	}
}

templ IconWrapper(id KindID, icon templ.Component) {
	<div
		class="size-6"
		id={ "run-trigger-" + string(id) }
		title={ "run triggered via " + string(id) }
	>
		@icon
	</div>
}
