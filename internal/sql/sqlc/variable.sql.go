// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: variable.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/leg100/otf/internal/resource"
)

const deleteVariableByID = `-- name: DeleteVariableByID :one
DELETE
FROM variables
WHERE variable_id = $1
RETURNING variable_id, key, value, description, category, sensitive, hcl, version_id
`

func (q *Queries) DeleteVariableByID(ctx context.Context, variableID resource.ID) (Variable, error) {
	row := q.db.QueryRow(ctx, deleteVariableByID, variableID)
	var i Variable
	err := row.Scan(
		&i.VariableID,
		&i.Key,
		&i.Value,
		&i.Description,
		&i.Category,
		&i.Sensitive,
		&i.HCL,
		&i.VersionID,
	)
	return i, err
}

const findVariable = `-- name: FindVariable :one
SELECT variable_id, key, value, description, category, sensitive, hcl, version_id
FROM variables
WHERE variable_id = $1
`

func (q *Queries) FindVariable(ctx context.Context, variableID resource.ID) (Variable, error) {
	row := q.db.QueryRow(ctx, findVariable, variableID)
	var i Variable
	err := row.Scan(
		&i.VariableID,
		&i.Key,
		&i.Value,
		&i.Description,
		&i.Category,
		&i.Sensitive,
		&i.HCL,
		&i.VersionID,
	)
	return i, err
}

const insertVariable = `-- name: InsertVariable :exec
INSERT INTO variables (
    variable_id,
    key,
    value,
    description,
    category,
    sensitive,
    hcl,
    version_id
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8
)
`

type InsertVariableParams struct {
	VariableID  resource.ID
	Key         pgtype.Text
	Value       pgtype.Text
	Description pgtype.Text
	Category    pgtype.Text
	Sensitive   pgtype.Bool
	HCL         pgtype.Bool
	VersionID   pgtype.Text
}

func (q *Queries) InsertVariable(ctx context.Context, arg InsertVariableParams) error {
	_, err := q.db.Exec(ctx, insertVariable,
		arg.VariableID,
		arg.Key,
		arg.Value,
		arg.Description,
		arg.Category,
		arg.Sensitive,
		arg.HCL,
		arg.VersionID,
	)
	return err
}

const updateVariableByID = `-- name: UpdateVariableByID :one
UPDATE variables
SET
    key = $1,
    value = $2,
    description = $3,
    category = $4,
    sensitive = $5,
    version_id = $6,
    hcl = $7
WHERE variable_id = $8
RETURNING variable_id
`

type UpdateVariableByIDParams struct {
	Key         pgtype.Text
	Value       pgtype.Text
	Description pgtype.Text
	Category    pgtype.Text
	Sensitive   pgtype.Bool
	VersionID   pgtype.Text
	HCL         pgtype.Bool
	VariableID  resource.ID
}

func (q *Queries) UpdateVariableByID(ctx context.Context, arg UpdateVariableByIDParams) (resource.ID, error) {
	row := q.db.QueryRow(ctx, updateVariableByID,
		arg.Key,
		arg.Value,
		arg.Description,
		arg.Category,
		arg.Sensitive,
		arg.VersionID,
		arg.HCL,
		arg.VariableID,
	)
	var variable_id resource.ID
	err := row.Scan(&variable_id)
	return variable_id, err
}
