// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: batch.go

package sqlc

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const countOrganizations = `-- name: CountOrganizations :batchmany
SELECT count(*)
FROM organizations
WHERE name LIKE ANY($1)
`

type CountOrganizationsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

func (q *Queries) CountOrganizations(ctx context.Context, names []pgtype.Text) *CountOrganizationsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range names {
		vals := []interface{}{
			a,
		}
		batch.Queue(countOrganizations, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CountOrganizationsBatchResults{br, len(names), false}
}

func (b *CountOrganizationsBatchResults) Query(f func(int, []int64, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var items []int64
		if b.closed {
			if f != nil {
				f(t, items, ErrBatchAlreadyClosed)
			}
			continue
		}
		err := func() error {
			rows, err := b.br.Query()
			if err != nil {
				return err
			}
			defer rows.Close()
			for rows.Next() {
				var count int64
				if err := rows.Scan(&count); err != nil {
					return err
				}
				items = append(items, count)
			}
			return rows.Err()
		}()
		if f != nil {
			f(t, items, err)
		}
	}
}

func (b *CountOrganizationsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const findOrganizations = `-- name: FindOrganizations :batchmany
SELECT organization_id, created_at, updated_at, name, session_remember, session_timeout, email, collaborator_auth_policy, allow_force_delete_workspaces, cost_estimation_enabled
FROM organizations
WHERE name LIKE ANY($1)
ORDER BY updated_at DESC
LIMIT $3 OFFSET $2
`

type FindOrganizationsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type FindOrganizationsParams struct {
	Names  pgtype.Text
	Offset int32
	Limit  int32
}

func (q *Queries) FindOrganizations(ctx context.Context, arg []FindOrganizationsParams) *FindOrganizationsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Names,
			a.Offset,
			a.Limit,
		}
		batch.Queue(findOrganizations, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &FindOrganizationsBatchResults{br, len(arg), false}
}

func (b *FindOrganizationsBatchResults) Query(f func(int, []Organization, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var items []Organization
		if b.closed {
			if f != nil {
				f(t, items, ErrBatchAlreadyClosed)
			}
			continue
		}
		err := func() error {
			rows, err := b.br.Query()
			if err != nil {
				return err
			}
			defer rows.Close()
			for rows.Next() {
				var i Organization
				if err := rows.Scan(
					&i.OrganizationID,
					&i.CreatedAt,
					&i.UpdatedAt,
					&i.Name,
					&i.SessionRemember,
					&i.SessionTimeout,
					&i.Email,
					&i.CollaboratorAuthPolicy,
					&i.AllowForceDeleteWorkspaces,
					&i.CostEstimationEnabled,
				); err != nil {
					return err
				}
				items = append(items, i)
			}
			return rows.Err()
		}()
		if f != nil {
			f(t, items, err)
		}
	}
}

func (b *FindOrganizationsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
