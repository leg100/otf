// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: team_membership.sql

package sqlc

import (
	"context"
)

const deleteTeamMembership = `-- name: DeleteTeamMembership :many
WITH
    users AS (
        SELECT username
        FROM unnest($2::text[]) t(username)
    )
DELETE
FROM team_memberships tm
USING users
WHERE
    tm.username = users.username AND
    tm.team_id  = $1
RETURNING tm.username
`

type DeleteTeamMembershipParams struct {
	TeamID    string
	Usernames []string
}

func (q *Queries) DeleteTeamMembership(ctx context.Context, arg DeleteTeamMembershipParams) ([]string, error) {
	rows, err := q.db.Query(ctx, deleteTeamMembership, arg.TeamID, arg.Usernames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var username string
		if err := rows.Scan(&username); err != nil {
			return nil, err
		}
		items = append(items, username)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTeamMembership = `-- name: InsertTeamMembership :many
WITH
    users AS (
        SELECT username
        FROM unnest($2::text[]) t(username)
    )
INSERT INTO team_memberships (username, team_id)
SELECT username, $1
FROM users
RETURNING username
`

type InsertTeamMembershipParams struct {
	TeamID    string
	Usernames []string
}

func (q *Queries) InsertTeamMembership(ctx context.Context, arg InsertTeamMembershipParams) ([]string, error) {
	rows, err := q.db.Query(ctx, insertTeamMembership, arg.TeamID, arg.Usernames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var username string
		if err := rows.Scan(&username); err != nil {
			return nil, err
		}
		items = append(items, username)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
