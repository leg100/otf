// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: plan.sql

package sqlc

import (
	"context"

	"internal/run/run"
)

const getPlanBinByID = `-- name: GetPlanBinByID :one
SELECT plan_bin
FROM plans
WHERE run_id = $1
`

func (q *Queries) GetPlanBinByID(ctx context.Context, runID string) ([]byte, error) {
	row := q.db.QueryRow(ctx, getPlanBinByID, runID)
	var plan_bin []byte
	err := row.Scan(&plan_bin)
	return plan_bin, err
}

const getPlanJSONByID = `-- name: GetPlanJSONByID :one
SELECT plan_json
FROM plans
WHERE run_id = $1
`

func (q *Queries) GetPlanJSONByID(ctx context.Context, runID string) ([]byte, error) {
	row := q.db.QueryRow(ctx, getPlanJSONByID, runID)
	var plan_json []byte
	err := row.Scan(&plan_json)
	return plan_json, err
}

const insertPlan = `-- name: InsertPlan :exec
INSERT INTO plans (
    run_id,
    status
) VALUES (
    $1,
    $2
)
`

type InsertPlanParams struct {
	RunID  string
	Status string
}

func (q *Queries) InsertPlan(ctx context.Context, arg InsertPlanParams) error {
	_, err := q.db.Exec(ctx, insertPlan, arg.RunID, arg.Status)
	return err
}

const updatePlanBinByID = `-- name: UpdatePlanBinByID :one
UPDATE plans
SET plan_bin = $1
WHERE run_id = $2
RETURNING run_id
`

type UpdatePlanBinByIDParams struct {
	PlanBin []byte
	RunID   string
}

func (q *Queries) UpdatePlanBinByID(ctx context.Context, arg UpdatePlanBinByIDParams) (string, error) {
	row := q.db.QueryRow(ctx, updatePlanBinByID, arg.PlanBin, arg.RunID)
	var run_id string
	err := row.Scan(&run_id)
	return run_id, err
}

const updatePlanJSONByID = `-- name: UpdatePlanJSONByID :one
UPDATE plans
SET plan_json = $1
WHERE run_id = $2
RETURNING run_id
`

type UpdatePlanJSONByIDParams struct {
	PlanJson []byte
	RunID    string
}

func (q *Queries) UpdatePlanJSONByID(ctx context.Context, arg UpdatePlanJSONByIDParams) (string, error) {
	row := q.db.QueryRow(ctx, updatePlanJSONByID, arg.PlanJson, arg.RunID)
	var run_id string
	err := row.Scan(&run_id)
	return run_id, err
}

const updatePlanStatusByID = `-- name: UpdatePlanStatusByID :one
UPDATE plans
SET status = $1
WHERE run_id = $2
RETURNING run_id
`

type UpdatePlanStatusByIDParams struct {
	Status string
	RunID  string
}

func (q *Queries) UpdatePlanStatusByID(ctx context.Context, arg UpdatePlanStatusByIDParams) (string, error) {
	row := q.db.QueryRow(ctx, updatePlanStatusByID, arg.Status, arg.RunID)
	var run_id string
	err := row.Scan(&run_id)
	return run_id, err
}

const updatePlannedChangesByID = `-- name: UpdatePlannedChangesByID :one
UPDATE plans
SET resource_report = (
        $1,
        $2,
        $3
    ),
    output_report = (
        $4,
        $5,
        $6
    )
WHERE run_id = $7
RETURNING run_id
`

type UpdatePlannedChangesByIDParams struct {
	ResourceAdditions    run.Report
	ResourceChanges      run.Report
	ResourceDestructions run.Report
	OutputAdditions      run.Report
	OutputChanges        run.Report
	OutputDestructions   run.Report
	RunID                string
}

func (q *Queries) UpdatePlannedChangesByID(ctx context.Context, arg UpdatePlannedChangesByIDParams) (string, error) {
	row := q.db.QueryRow(ctx, updatePlannedChangesByID,
		arg.ResourceAdditions,
		arg.ResourceChanges,
		arg.ResourceDestructions,
		arg.OutputAdditions,
		arg.OutputChanges,
		arg.OutputDestructions,
		arg.RunID,
	)
	var run_id string
	err := row.Scan(&run_id)
	return run_id, err
}
