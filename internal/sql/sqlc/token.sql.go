// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: token.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/leg100/otf/internal/resource"
)

const deleteTokenByID = `-- name: DeleteTokenByID :one
DELETE
FROM tokens
WHERE token_id = $1
RETURNING token_id
`

func (q *Queries) DeleteTokenByID(ctx context.Context, tokenID resource.ID) (resource.ID, error) {
	row := q.db.QueryRow(ctx, deleteTokenByID, tokenID)
	var token_id resource.ID
	err := row.Scan(&token_id)
	return token_id, err
}

const findTokenByID = `-- name: FindTokenByID :one
SELECT token_id, created_at, description, username
FROM tokens
WHERE token_id = $1
`

func (q *Queries) FindTokenByID(ctx context.Context, tokenID resource.ID) (Token, error) {
	row := q.db.QueryRow(ctx, findTokenByID, tokenID)
	var i Token
	err := row.Scan(
		&i.TokenID,
		&i.CreatedAt,
		&i.Description,
		&i.Username,
	)
	return i, err
}

const findTokensByUsername = `-- name: FindTokensByUsername :many
SELECT token_id, created_at, description, username
FROM tokens
WHERE username = $1
`

func (q *Queries) FindTokensByUsername(ctx context.Context, username pgtype.Text) ([]Token, error) {
	rows, err := q.db.Query(ctx, findTokensByUsername, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Token
	for rows.Next() {
		var i Token
		if err := rows.Scan(
			&i.TokenID,
			&i.CreatedAt,
			&i.Description,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertToken = `-- name: InsertToken :exec
INSERT INTO tokens (
    token_id,
    created_at,
    description,
    username
) VALUES (
    $1,
    $2,
    $3,
    $4
)
`

type InsertTokenParams struct {
	TokenID     resource.ID
	CreatedAt   pgtype.Timestamptz
	Description pgtype.Text
	Username    pgtype.Text
}

func (q *Queries) InsertToken(ctx context.Context, arg InsertTokenParams) error {
	_, err := q.db.Exec(ctx, insertToken,
		arg.TokenID,
		arg.CreatedAt,
		arg.Description,
		arg.Username,
	)
	return err
}
