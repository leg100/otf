// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: apply.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/leg100/otf/internal/resource"
)

const insertApply = `-- name: InsertApply :exec
INSERT INTO applies (
    run_id,
    status
) VALUES (
    $1,
    $2
)
`

type InsertApplyParams struct {
	RunID  resource.ID
	Status pgtype.Text
}

func (q *Queries) InsertApply(ctx context.Context, arg InsertApplyParams) error {
	_, err := q.db.Exec(ctx, insertApply, arg.RunID, arg.Status)
	return err
}

const updateAppliedChangesByID = `-- name: UpdateAppliedChangesByID :one
UPDATE applies
SET resource_report = (
    $2::int,
    $3::int,
    $4::int
)
WHERE run_id = $1
RETURNING run_id
`

type UpdateAppliedChangesByIDParams struct {
	RunID        resource.ID
	Additions    pgtype.Int4
	Changes      pgtype.Int4
	Destructions pgtype.Int4
}

func (q *Queries) UpdateAppliedChangesByID(ctx context.Context, arg UpdateAppliedChangesByIDParams) (resource.ID, error) {
	row := q.db.QueryRow(ctx, updateAppliedChangesByID,
		arg.RunID,
		arg.Additions,
		arg.Changes,
		arg.Destructions,
	)
	var run_id resource.ID
	err := row.Scan(&run_id)
	return run_id, err
}

const updateApplyStatusByID = `-- name: UpdateApplyStatusByID :one
UPDATE applies
SET status = $2
WHERE run_id = $1
RETURNING run_id
`

type UpdateApplyStatusByIDParams struct {
	RunID  resource.ID
	Status pgtype.Text
}

func (q *Queries) UpdateApplyStatusByID(ctx context.Context, arg UpdateApplyStatusByIDParams) (resource.ID, error) {
	row := q.db.QueryRow(ctx, updateApplyStatusByID, arg.RunID, arg.Status)
	var run_id resource.ID
	err := row.Scan(&run_id)
	return run_id, err
}
