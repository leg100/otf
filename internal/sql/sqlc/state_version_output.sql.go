// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: state_version_output.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/leg100/otf/internal/resource"
)

const findStateVersionOutputByID = `-- name: FindStateVersionOutputByID :one
SELECT state_version_output_id, name, sensitive, type, value, state_version_id
FROM state_version_outputs
WHERE state_version_output_id = $1
`

func (q *Queries) FindStateVersionOutputByID(ctx context.Context, id resource.ID) (StateVersionOutput, error) {
	row := q.db.QueryRow(ctx, findStateVersionOutputByID, id)
	var i StateVersionOutput
	err := row.Scan(
		&i.StateVersionOutputID,
		&i.Name,
		&i.Sensitive,
		&i.Type,
		&i.Value,
		&i.StateVersionID,
	)
	return i, err
}

const insertStateVersionOutput = `-- name: InsertStateVersionOutput :exec
INSERT INTO state_version_outputs (
    state_version_output_id,
    name,
    sensitive,
    type,
    value,
    state_version_id
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
`

type InsertStateVersionOutputParams struct {
	ID             resource.ID
	Name           pgtype.Text
	Sensitive      pgtype.Bool
	Type           pgtype.Text
	Value          []byte
	StateVersionID resource.ID
}

func (q *Queries) InsertStateVersionOutput(ctx context.Context, arg InsertStateVersionOutputParams) error {
	_, err := q.db.Exec(ctx, insertStateVersionOutput,
		arg.ID,
		arg.Name,
		arg.Sensitive,
		arg.Type,
		arg.Value,
		arg.StateVersionID,
	)
	return err
}
