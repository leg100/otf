// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: team_token.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/leg100/otf/internal/resource"
)

const deleteTeamTokenByID = `-- name: DeleteTeamTokenByID :one
DELETE
FROM team_tokens
WHERE team_id = $1
RETURNING team_token_id
`

func (q *Queries) DeleteTeamTokenByID(ctx context.Context, teamID resource.ID) (resource.ID, error) {
	row := q.db.QueryRow(ctx, deleteTeamTokenByID, teamID)
	var team_token_id resource.ID
	err := row.Scan(&team_token_id)
	return team_token_id, err
}

const findTeamTokensByID = `-- name: FindTeamTokensByID :many
SELECT team_token_id, description, created_at, team_id, expiry
FROM team_tokens
WHERE team_id = $1
`

func (q *Queries) FindTeamTokensByID(ctx context.Context, teamID resource.ID) ([]TeamToken, error) {
	rows, err := q.db.Query(ctx, findTeamTokensByID, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeamToken
	for rows.Next() {
		var i TeamToken
		if err := rows.Scan(
			&i.TeamTokenID,
			&i.Description,
			&i.CreatedAt,
			&i.TeamID,
			&i.Expiry,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTeamToken = `-- name: InsertTeamToken :exec
INSERT INTO team_tokens (
    team_token_id,
    created_at,
    team_id,
    expiry
) VALUES (
    $1,
    $2,
    $3,
    $4
) ON CONFLICT (team_id) DO UPDATE
  SET team_token_id = $1,
      created_at    = $2,
      expiry        = $4
`

type InsertTeamTokenParams struct {
	TeamTokenID resource.ID
	CreatedAt   pgtype.Timestamptz
	TeamID      resource.ID
	Expiry      pgtype.Timestamptz
}

func (q *Queries) InsertTeamToken(ctx context.Context, arg InsertTeamTokenParams) error {
	_, err := q.db.Exec(ctx, insertTeamToken,
		arg.TeamTokenID,
		arg.CreatedAt,
		arg.TeamID,
		arg.Expiry,
	)
	return err
}
