// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: workspace_permission.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/leg100/otf/internal/resource"
)

const deleteWorkspacePermissionByID = `-- name: DeleteWorkspacePermissionByID :exec
DELETE
FROM workspace_permissions
WHERE workspace_id = $1
AND team_id = $2
`

type DeleteWorkspacePermissionByIDParams struct {
	WorkspaceID resource.ID
	TeamID      resource.ID
}

func (q *Queries) DeleteWorkspacePermissionByID(ctx context.Context, arg DeleteWorkspacePermissionByIDParams) error {
	_, err := q.db.Exec(ctx, deleteWorkspacePermissionByID, arg.WorkspaceID, arg.TeamID)
	return err
}

const findWorkspacePermissionsAndGlobalRemoteState = `-- name: FindWorkspacePermissionsAndGlobalRemoteState :one
SELECT
    w.global_remote_state,
    (
        SELECT array_agg(wp.*)::workspace_permissions[]
        FROM workspace_permissions wp
        WHERE wp.workspace_id = w.workspace_id
    ) AS workspace_permissions
FROM workspaces w
WHERE w.workspace_id = $1
`

type FindWorkspacePermissionsAndGlobalRemoteStateRow struct {
	GlobalRemoteState    pgtype.Bool
	WorkspacePermissions []WorkspacePermission
}

func (q *Queries) FindWorkspacePermissionsAndGlobalRemoteState(ctx context.Context, workspaceID resource.ID) (FindWorkspacePermissionsAndGlobalRemoteStateRow, error) {
	row := q.db.QueryRow(ctx, findWorkspacePermissionsAndGlobalRemoteState, workspaceID)
	var i FindWorkspacePermissionsAndGlobalRemoteStateRow
	err := row.Scan(&i.GlobalRemoteState, &i.WorkspacePermissions)
	return i, err
}

const upsertWorkspacePermission = `-- name: UpsertWorkspacePermission :exec
INSERT INTO workspace_permissions (
    workspace_id,
    team_id,
    role
) VALUES (
    $1,
    $2,
    $3
) ON CONFLICT (workspace_id, team_id) DO UPDATE SET role = $3
`

type UpsertWorkspacePermissionParams struct {
	WorkspaceID resource.ID
	TeamID      resource.ID
	Role        pgtype.Text
}

func (q *Queries) UpsertWorkspacePermission(ctx context.Context, arg UpsertWorkspacePermissionParams) error {
	_, err := q.db.Exec(ctx, upsertWorkspacePermission, arg.WorkspaceID, arg.TeamID, arg.Role)
	return err
}
