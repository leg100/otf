// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: workspace_permission.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/leg100/otf/internal/resource"
)

const deleteWorkspacePermissionByID = `-- name: DeleteWorkspacePermissionByID :exec
DELETE
FROM workspace_permissions
WHERE workspace_id = $1
AND team_id = $2
`

type DeleteWorkspacePermissionByIDParams struct {
	WorkspaceID resource.ID
	TeamID      resource.ID
}

func (q *Queries) DeleteWorkspacePermissionByID(ctx context.Context, arg DeleteWorkspacePermissionByIDParams) error {
	_, err := q.db.Exec(ctx, deleteWorkspacePermissionByID, arg.WorkspaceID, arg.TeamID)
	return err
}

const findWorkspacePermissionsByWorkspaceID = `-- name: FindWorkspacePermissionsByWorkspaceID :many
SELECT workspace_id, team_id, role
FROM workspace_permissions
WHERE workspace_id = $1
`

func (q *Queries) FindWorkspacePermissionsByWorkspaceID(ctx context.Context, workspaceID resource.ID) ([]WorkspacePermission, error) {
	rows, err := q.db.Query(ctx, findWorkspacePermissionsByWorkspaceID, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkspacePermission
	for rows.Next() {
		var i WorkspacePermission
		if err := rows.Scan(&i.WorkspaceID, &i.TeamID, &i.Role); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertWorkspacePermission = `-- name: UpsertWorkspacePermission :exec
INSERT INTO workspace_permissions (
    workspace_id,
    team_id,
    role
) VALUES (
    $1,
    $2,
    $3
) ON CONFLICT (workspace_id, team_id) DO UPDATE SET role = $3
`

type UpsertWorkspacePermissionParams struct {
	WorkspaceID resource.ID
	TeamID      resource.ID
	Role        pgtype.Text
}

func (q *Queries) UpsertWorkspacePermission(ctx context.Context, arg UpsertWorkspacePermissionParams) error {
	_, err := q.db.Exec(ctx, upsertWorkspacePermission, arg.WorkspaceID, arg.TeamID, arg.Role)
	return err
}
