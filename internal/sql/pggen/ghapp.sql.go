// Code generated by pggen. DO NOT EDIT.

package pggen

import (
	"context"
	"fmt"

	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

const insertGithubAppSQL = `INSERT INTO github_apps (
    github_app_id,
    webhook_secret,
    pem,
    organization_name
) VALUES (
    $1,
    $2,
    $3,
    $4
);`

type InsertGithubAppParams struct {
	GithubAppID      pgtype.Text
	WebhookSecret    pgtype.Text
	Pem              pgtype.Text
	OrganizationName pgtype.Text
}

// InsertGithubApp implements Querier.InsertGithubApp.
func (q *DBQuerier) InsertGithubApp(ctx context.Context, params InsertGithubAppParams) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertGithubApp")
	cmdTag, err := q.conn.Exec(ctx, insertGithubAppSQL, params.GithubAppID, params.WebhookSecret, params.Pem, params.OrganizationName)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query InsertGithubApp: %w", err)
	}
	return cmdTag, err
}

// InsertGithubAppBatch implements Querier.InsertGithubAppBatch.
func (q *DBQuerier) InsertGithubAppBatch(batch genericBatch, params InsertGithubAppParams) {
	batch.Queue(insertGithubAppSQL, params.GithubAppID, params.WebhookSecret, params.Pem, params.OrganizationName)
}

// InsertGithubAppScan implements Querier.InsertGithubAppScan.
func (q *DBQuerier) InsertGithubAppScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec InsertGithubAppBatch: %w", err)
	}
	return cmdTag, err
}

const findGithubAppByIDSQL = `SELECT *
FROM github_apps
WHERE github_app_id = $1;`

type FindGithubAppByIDRow struct {
	GithubAppID      pgtype.Text `json:"github_app_id"`
	WebhookSecret    pgtype.Text `json:"webhook_secret"`
	Pem              pgtype.Text `json:"pem"`
	OrganizationName pgtype.Text `json:"organization_name"`
}

// FindGithubAppByID implements Querier.FindGithubAppByID.
func (q *DBQuerier) FindGithubAppByID(ctx context.Context, githubAppID pgtype.Text) (FindGithubAppByIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindGithubAppByID")
	row := q.conn.QueryRow(ctx, findGithubAppByIDSQL, githubAppID)
	var item FindGithubAppByIDRow
	if err := row.Scan(&item.GithubAppID, &item.WebhookSecret, &item.Pem, &item.OrganizationName); err != nil {
		return item, fmt.Errorf("query FindGithubAppByID: %w", err)
	}
	return item, nil
}

// FindGithubAppByIDBatch implements Querier.FindGithubAppByIDBatch.
func (q *DBQuerier) FindGithubAppByIDBatch(batch genericBatch, githubAppID pgtype.Text) {
	batch.Queue(findGithubAppByIDSQL, githubAppID)
}

// FindGithubAppByIDScan implements Querier.FindGithubAppByIDScan.
func (q *DBQuerier) FindGithubAppByIDScan(results pgx.BatchResults) (FindGithubAppByIDRow, error) {
	row := results.QueryRow()
	var item FindGithubAppByIDRow
	if err := row.Scan(&item.GithubAppID, &item.WebhookSecret, &item.Pem, &item.OrganizationName); err != nil {
		return item, fmt.Errorf("scan FindGithubAppByIDBatch row: %w", err)
	}
	return item, nil
}

const deleteGithubAppByIDSQL = `DELETE
FROM github_apps
WHERE github_app_id = $1
RETURNING *;`

type DeleteGithubAppByIDRow struct {
	GithubAppID      pgtype.Text `json:"github_app_id"`
	WebhookSecret    pgtype.Text `json:"webhook_secret"`
	Pem              pgtype.Text `json:"pem"`
	OrganizationName pgtype.Text `json:"organization_name"`
}

// DeleteGithubAppByID implements Querier.DeleteGithubAppByID.
func (q *DBQuerier) DeleteGithubAppByID(ctx context.Context, githubAppID pgtype.Text) (DeleteGithubAppByIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteGithubAppByID")
	row := q.conn.QueryRow(ctx, deleteGithubAppByIDSQL, githubAppID)
	var item DeleteGithubAppByIDRow
	if err := row.Scan(&item.GithubAppID, &item.WebhookSecret, &item.Pem, &item.OrganizationName); err != nil {
		return item, fmt.Errorf("query DeleteGithubAppByID: %w", err)
	}
	return item, nil
}

// DeleteGithubAppByIDBatch implements Querier.DeleteGithubAppByIDBatch.
func (q *DBQuerier) DeleteGithubAppByIDBatch(batch genericBatch, githubAppID pgtype.Text) {
	batch.Queue(deleteGithubAppByIDSQL, githubAppID)
}

// DeleteGithubAppByIDScan implements Querier.DeleteGithubAppByIDScan.
func (q *DBQuerier) DeleteGithubAppByIDScan(results pgx.BatchResults) (DeleteGithubAppByIDRow, error) {
	row := results.QueryRow()
	var item DeleteGithubAppByIDRow
	if err := row.Scan(&item.GithubAppID, &item.WebhookSecret, &item.Pem, &item.OrganizationName); err != nil {
		return item, fmt.Errorf("scan DeleteGithubAppByIDBatch row: %w", err)
	}
	return item, nil
}
