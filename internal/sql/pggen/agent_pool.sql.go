// Code generated by pggen. DO NOT EDIT.

package pggen

import (
	"context"
	"fmt"

	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

const insertAgentPoolSQL = `INSERT INTO agent_pools (
    agent_pool_id,
    name,
    created_at,
    organization_name,
    organization_scoped
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
);`

type InsertAgentPoolParams struct {
	AgentPoolID        pgtype.Text
	Name               pgtype.Text
	CreatedAt          pgtype.Timestamptz
	OrganizationName   pgtype.Text
	OrganizationScoped bool
}

// InsertAgentPool implements Querier.InsertAgentPool.
func (q *DBQuerier) InsertAgentPool(ctx context.Context, params InsertAgentPoolParams) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertAgentPool")
	cmdTag, err := q.conn.Exec(ctx, insertAgentPoolSQL, params.AgentPoolID, params.Name, params.CreatedAt, params.OrganizationName, params.OrganizationScoped)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query InsertAgentPool: %w", err)
	}
	return cmdTag, err
}

// InsertAgentPoolBatch implements Querier.InsertAgentPoolBatch.
func (q *DBQuerier) InsertAgentPoolBatch(batch genericBatch, params InsertAgentPoolParams) {
	batch.Queue(insertAgentPoolSQL, params.AgentPoolID, params.Name, params.CreatedAt, params.OrganizationName, params.OrganizationScoped)
}

// InsertAgentPoolScan implements Querier.InsertAgentPoolScan.
func (q *DBQuerier) InsertAgentPoolScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec InsertAgentPoolBatch: %w", err)
	}
	return cmdTag, err
}

const findAgentPoolsSQL = `SELECT ap.*,
    (
        SELECT array_agg(w.workspace_id)
        FROM workspaces w
        WHERE w.agent_pool_id = ap.agent_pool_id
    ) AS workspace_ids,
    (
        SELECT array_agg(aw.workspace_id)
        FROM agent_pool_allowed_workspaces aw
        WHERE aw.agent_pool_id = ap.agent_pool_id
    ) AS allowed_workspace_ids
FROM agent_pools ap
LEFT JOIN (agent_pool_allowed_workspaces aw JOIN workspaces w USING (workspace_id)) ON ap.agent_pool_id = aw.agent_pool_id
WHERE ap.organization_name = $1
AND   (($2::text IS NULL) OR ap.name LIKE '%' || $2 || '%')
AND   (($3::text IS NULL) OR
        ap.organization_scoped OR w.name = $3
      )
GROUP BY ap.agent_pool_id
;`

type FindAgentPoolsParams struct {
	OrganizationName     pgtype.Text
	NameSubstring        pgtype.Text
	AllowedWorkspaceName pgtype.Text
}

type FindAgentPoolsRow struct {
	AgentPoolID         pgtype.Text        `json:"agent_pool_id"`
	Name                pgtype.Text        `json:"name"`
	CreatedAt           pgtype.Timestamptz `json:"created_at"`
	OrganizationName    pgtype.Text        `json:"organization_name"`
	OrganizationScoped  bool               `json:"organization_scoped"`
	WorkspaceIds        []string           `json:"workspace_ids"`
	AllowedWorkspaceIds []string           `json:"allowed_workspace_ids"`
}

// FindAgentPools implements Querier.FindAgentPools.
func (q *DBQuerier) FindAgentPools(ctx context.Context, params FindAgentPoolsParams) ([]FindAgentPoolsRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindAgentPools")
	rows, err := q.conn.Query(ctx, findAgentPoolsSQL, params.OrganizationName, params.NameSubstring, params.AllowedWorkspaceName)
	if err != nil {
		return nil, fmt.Errorf("query FindAgentPools: %w", err)
	}
	defer rows.Close()
	items := []FindAgentPoolsRow{}
	for rows.Next() {
		var item FindAgentPoolsRow
		if err := rows.Scan(&item.AgentPoolID, &item.Name, &item.CreatedAt, &item.OrganizationName, &item.OrganizationScoped, &item.WorkspaceIds, &item.AllowedWorkspaceIds); err != nil {
			return nil, fmt.Errorf("scan FindAgentPools row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindAgentPools rows: %w", err)
	}
	return items, err
}

// FindAgentPoolsBatch implements Querier.FindAgentPoolsBatch.
func (q *DBQuerier) FindAgentPoolsBatch(batch genericBatch, params FindAgentPoolsParams) {
	batch.Queue(findAgentPoolsSQL, params.OrganizationName, params.NameSubstring, params.AllowedWorkspaceName)
}

// FindAgentPoolsScan implements Querier.FindAgentPoolsScan.
func (q *DBQuerier) FindAgentPoolsScan(results pgx.BatchResults) ([]FindAgentPoolsRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query FindAgentPoolsBatch: %w", err)
	}
	defer rows.Close()
	items := []FindAgentPoolsRow{}
	for rows.Next() {
		var item FindAgentPoolsRow
		if err := rows.Scan(&item.AgentPoolID, &item.Name, &item.CreatedAt, &item.OrganizationName, &item.OrganizationScoped, &item.WorkspaceIds, &item.AllowedWorkspaceIds); err != nil {
			return nil, fmt.Errorf("scan FindAgentPoolsBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindAgentPoolsBatch rows: %w", err)
	}
	return items, err
}

const findAgentPoolSQL = `SELECT ap.*,
    (
        SELECT array_agg(w.workspace_id)
        FROM workspaces w
        WHERE w.agent_pool_id = ap.agent_pool_id
    ) AS workspace_ids,
    (
        SELECT array_agg(aw.workspace_id)
        FROM agent_pool_allowed_workspaces aw
        WHERE aw.agent_pool_id = ap.agent_pool_id
    ) AS allowed_workspace_ids
FROM agent_pools ap
WHERE ap.agent_pool_id = $1
GROUP BY ap.agent_pool_id
;`

type FindAgentPoolRow struct {
	AgentPoolID         pgtype.Text        `json:"agent_pool_id"`
	Name                pgtype.Text        `json:"name"`
	CreatedAt           pgtype.Timestamptz `json:"created_at"`
	OrganizationName    pgtype.Text        `json:"organization_name"`
	OrganizationScoped  bool               `json:"organization_scoped"`
	WorkspaceIds        []string           `json:"workspace_ids"`
	AllowedWorkspaceIds []string           `json:"allowed_workspace_ids"`
}

// FindAgentPool implements Querier.FindAgentPool.
func (q *DBQuerier) FindAgentPool(ctx context.Context, poolID pgtype.Text) (FindAgentPoolRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindAgentPool")
	row := q.conn.QueryRow(ctx, findAgentPoolSQL, poolID)
	var item FindAgentPoolRow
	if err := row.Scan(&item.AgentPoolID, &item.Name, &item.CreatedAt, &item.OrganizationName, &item.OrganizationScoped, &item.WorkspaceIds, &item.AllowedWorkspaceIds); err != nil {
		return item, fmt.Errorf("query FindAgentPool: %w", err)
	}
	return item, nil
}

// FindAgentPoolBatch implements Querier.FindAgentPoolBatch.
func (q *DBQuerier) FindAgentPoolBatch(batch genericBatch, poolID pgtype.Text) {
	batch.Queue(findAgentPoolSQL, poolID)
}

// FindAgentPoolScan implements Querier.FindAgentPoolScan.
func (q *DBQuerier) FindAgentPoolScan(results pgx.BatchResults) (FindAgentPoolRow, error) {
	row := results.QueryRow()
	var item FindAgentPoolRow
	if err := row.Scan(&item.AgentPoolID, &item.Name, &item.CreatedAt, &item.OrganizationName, &item.OrganizationScoped, &item.WorkspaceIds, &item.AllowedWorkspaceIds); err != nil {
		return item, fmt.Errorf("scan FindAgentPoolBatch row: %w", err)
	}
	return item, nil
}

const updateAgentPoolSQL = `UPDATE agent_pools
SET name = $1,
    organization_scoped = $2
WHERE agent_pool_id = $3
RETURNING *;`

type UpdateAgentPoolParams struct {
	Name               pgtype.Text
	OrganizationScoped bool
	PoolID             pgtype.Text
}

type UpdateAgentPoolRow struct {
	AgentPoolID        pgtype.Text        `json:"agent_pool_id"`
	Name               pgtype.Text        `json:"name"`
	CreatedAt          pgtype.Timestamptz `json:"created_at"`
	OrganizationName   pgtype.Text        `json:"organization_name"`
	OrganizationScoped bool               `json:"organization_scoped"`
}

// UpdateAgentPool implements Querier.UpdateAgentPool.
func (q *DBQuerier) UpdateAgentPool(ctx context.Context, params UpdateAgentPoolParams) (UpdateAgentPoolRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateAgentPool")
	row := q.conn.QueryRow(ctx, updateAgentPoolSQL, params.Name, params.OrganizationScoped, params.PoolID)
	var item UpdateAgentPoolRow
	if err := row.Scan(&item.AgentPoolID, &item.Name, &item.CreatedAt, &item.OrganizationName, &item.OrganizationScoped); err != nil {
		return item, fmt.Errorf("query UpdateAgentPool: %w", err)
	}
	return item, nil
}

// UpdateAgentPoolBatch implements Querier.UpdateAgentPoolBatch.
func (q *DBQuerier) UpdateAgentPoolBatch(batch genericBatch, params UpdateAgentPoolParams) {
	batch.Queue(updateAgentPoolSQL, params.Name, params.OrganizationScoped, params.PoolID)
}

// UpdateAgentPoolScan implements Querier.UpdateAgentPoolScan.
func (q *DBQuerier) UpdateAgentPoolScan(results pgx.BatchResults) (UpdateAgentPoolRow, error) {
	row := results.QueryRow()
	var item UpdateAgentPoolRow
	if err := row.Scan(&item.AgentPoolID, &item.Name, &item.CreatedAt, &item.OrganizationName, &item.OrganizationScoped); err != nil {
		return item, fmt.Errorf("scan UpdateAgentPoolBatch row: %w", err)
	}
	return item, nil
}

const deleteAgentPoolSQL = `DELETE
FROM agent_pools
WHERE agent_pool_id = $1
RETURNING organization_name
;`

// DeleteAgentPool implements Querier.DeleteAgentPool.
func (q *DBQuerier) DeleteAgentPool(ctx context.Context, poolID pgtype.Text) (pgtype.Text, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteAgentPool")
	row := q.conn.QueryRow(ctx, deleteAgentPoolSQL, poolID)
	var item pgtype.Text
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query DeleteAgentPool: %w", err)
	}
	return item, nil
}

// DeleteAgentPoolBatch implements Querier.DeleteAgentPoolBatch.
func (q *DBQuerier) DeleteAgentPoolBatch(batch genericBatch, poolID pgtype.Text) {
	batch.Queue(deleteAgentPoolSQL, poolID)
}

// DeleteAgentPoolScan implements Querier.DeleteAgentPoolScan.
func (q *DBQuerier) DeleteAgentPoolScan(results pgx.BatchResults) (pgtype.Text, error) {
	row := results.QueryRow()
	var item pgtype.Text
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan DeleteAgentPoolBatch row: %w", err)
	}
	return item, nil
}

const insertAgentPoolAllowedWorkspacesSQL = `INSERT INTO agent_pool_allowed_workspaces (
    agent_pool_id,
    workspace_id
) VALUES (
    $1,
    $2
);`

// InsertAgentPoolAllowedWorkspaces implements Querier.InsertAgentPoolAllowedWorkspaces.
func (q *DBQuerier) InsertAgentPoolAllowedWorkspaces(ctx context.Context, poolID pgtype.Text, workspaceID pgtype.Text) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertAgentPoolAllowedWorkspaces")
	cmdTag, err := q.conn.Exec(ctx, insertAgentPoolAllowedWorkspacesSQL, poolID, workspaceID)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query InsertAgentPoolAllowedWorkspaces: %w", err)
	}
	return cmdTag, err
}

// InsertAgentPoolAllowedWorkspacesBatch implements Querier.InsertAgentPoolAllowedWorkspacesBatch.
func (q *DBQuerier) InsertAgentPoolAllowedWorkspacesBatch(batch genericBatch, poolID pgtype.Text, workspaceID pgtype.Text) {
	batch.Queue(insertAgentPoolAllowedWorkspacesSQL, poolID, workspaceID)
}

// InsertAgentPoolAllowedWorkspacesScan implements Querier.InsertAgentPoolAllowedWorkspacesScan.
func (q *DBQuerier) InsertAgentPoolAllowedWorkspacesScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec InsertAgentPoolAllowedWorkspacesBatch: %w", err)
	}
	return cmdTag, err
}

const deleteAgentPoolAllowedWorkspacesSQL = `DELETE
FROM agent_pool_allowed_workspaces
WHERE agent_pool_id = $1
;`

// DeleteAgentPoolAllowedWorkspaces implements Querier.DeleteAgentPoolAllowedWorkspaces.
func (q *DBQuerier) DeleteAgentPoolAllowedWorkspaces(ctx context.Context, poolID pgtype.Text) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteAgentPoolAllowedWorkspaces")
	cmdTag, err := q.conn.Exec(ctx, deleteAgentPoolAllowedWorkspacesSQL, poolID)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query DeleteAgentPoolAllowedWorkspaces: %w", err)
	}
	return cmdTag, err
}

// DeleteAgentPoolAllowedWorkspacesBatch implements Querier.DeleteAgentPoolAllowedWorkspacesBatch.
func (q *DBQuerier) DeleteAgentPoolAllowedWorkspacesBatch(batch genericBatch, poolID pgtype.Text) {
	batch.Queue(deleteAgentPoolAllowedWorkspacesSQL, poolID)
}

// DeleteAgentPoolAllowedWorkspacesScan implements Querier.DeleteAgentPoolAllowedWorkspacesScan.
func (q *DBQuerier) DeleteAgentPoolAllowedWorkspacesScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec DeleteAgentPoolAllowedWorkspacesBatch: %w", err)
	}
	return cmdTag, err
}
