// Code generated by pggen. DO NOT EDIT.

package pggen

import (
	"context"
	"fmt"

	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

const insertAgentPoolSQL = `INSERT INTO agent_pools (
    agent_pool_id,
    name,
    created_at,
    organization_name,
    organization_scoped
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
);`

type InsertAgentPoolParams struct {
	AgentPoolID        pgtype.Text
	Name               pgtype.Text
	CreatedAt          pgtype.Timestamptz
	OrganizationName   pgtype.Text
	OrganizationScoped pgtype.Bool
}

// InsertAgentPool implements Querier.InsertAgentPool.
func (q *DBQuerier) InsertAgentPool(ctx context.Context, params InsertAgentPoolParams) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertAgentPool")
	cmdTag, err := q.conn.Exec(ctx, insertAgentPoolSQL, params.AgentPoolID, params.Name, params.CreatedAt, params.OrganizationName, params.OrganizationScoped)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query InsertAgentPool: %w", err)
	}
	return cmdTag, err
}

// InsertAgentPoolBatch implements Querier.InsertAgentPoolBatch.
func (q *DBQuerier) InsertAgentPoolBatch(batch genericBatch, params InsertAgentPoolParams) {
	batch.Queue(insertAgentPoolSQL, params.AgentPoolID, params.Name, params.CreatedAt, params.OrganizationName, params.OrganizationScoped)
}

// InsertAgentPoolScan implements Querier.InsertAgentPoolScan.
func (q *DBQuerier) InsertAgentPoolScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec InsertAgentPoolBatch: %w", err)
	}
	return cmdTag, err
}

const findAgentPoolsSQL = `SELECT ap.*,
    (
        SELECT array_agg(w.workspace_id)
        FROM workspaces w
        WHERE w.agent_pool_id = ap.agent_pool_id
    ) AS workspace_ids,
    (
        SELECT array_agg(aw.workspace_id)
        FROM agent_pool_allowed_workspaces aw
        WHERE aw.agent_pool_id = ap.agent_pool_id
    ) AS allowed_workspace_ids
FROM agent_pools ap
ORDER BY ap.created_at DESC
;`

type FindAgentPoolsRow struct {
	AgentPoolID         pgtype.Text        `json:"agent_pool_id"`
	Name                pgtype.Text        `json:"name"`
	CreatedAt           pgtype.Timestamptz `json:"created_at"`
	OrganizationName    pgtype.Text        `json:"organization_name"`
	OrganizationScoped  pgtype.Bool        `json:"organization_scoped"`
	WorkspaceIds        []string           `json:"workspace_ids"`
	AllowedWorkspaceIds []string           `json:"allowed_workspace_ids"`
}

// FindAgentPools implements Querier.FindAgentPools.
func (q *DBQuerier) FindAgentPools(ctx context.Context) ([]FindAgentPoolsRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindAgentPools")
	rows, err := q.conn.Query(ctx, findAgentPoolsSQL)
	if err != nil {
		return nil, fmt.Errorf("query FindAgentPools: %w", err)
	}
	defer rows.Close()
	items := []FindAgentPoolsRow{}
	for rows.Next() {
		var item FindAgentPoolsRow
		if err := rows.Scan(&item.AgentPoolID, &item.Name, &item.CreatedAt, &item.OrganizationName, &item.OrganizationScoped, &item.WorkspaceIds, &item.AllowedWorkspaceIds); err != nil {
			return nil, fmt.Errorf("scan FindAgentPools row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindAgentPools rows: %w", err)
	}
	return items, err
}

// FindAgentPoolsBatch implements Querier.FindAgentPoolsBatch.
func (q *DBQuerier) FindAgentPoolsBatch(batch genericBatch) {
	batch.Queue(findAgentPoolsSQL)
}

// FindAgentPoolsScan implements Querier.FindAgentPoolsScan.
func (q *DBQuerier) FindAgentPoolsScan(results pgx.BatchResults) ([]FindAgentPoolsRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query FindAgentPoolsBatch: %w", err)
	}
	defer rows.Close()
	items := []FindAgentPoolsRow{}
	for rows.Next() {
		var item FindAgentPoolsRow
		if err := rows.Scan(&item.AgentPoolID, &item.Name, &item.CreatedAt, &item.OrganizationName, &item.OrganizationScoped, &item.WorkspaceIds, &item.AllowedWorkspaceIds); err != nil {
			return nil, fmt.Errorf("scan FindAgentPoolsBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindAgentPoolsBatch rows: %w", err)
	}
	return items, err
}

const findAgentPoolsByOrganizationSQL = `SELECT ap.*,
    (
        SELECT array_agg(w.workspace_id)
        FROM workspaces w
        WHERE w.agent_pool_id = ap.agent_pool_id
    ) AS workspace_ids,
    (
        SELECT array_agg(aw.workspace_id)
        FROM agent_pool_allowed_workspaces aw
        WHERE aw.agent_pool_id = ap.agent_pool_id
    ) AS allowed_workspace_ids
FROM agent_pools ap
LEFT JOIN (agent_pool_allowed_workspaces aw JOIN workspaces w USING (workspace_id)) ON ap.agent_pool_id = aw.agent_pool_id
WHERE ap.organization_name = $1
AND   (($2::text IS NULL) OR ap.name LIKE '%' || $2 || '%')
AND   (($3::text IS NULL) OR
       ap.organization_scoped OR
       w.name = $3
      )
AND   (($4::text IS NULL) OR
       ap.organization_scoped OR
       w.workspace_id = $4
      )
GROUP BY ap.agent_pool_id
ORDER BY ap.created_at DESC
;`

type FindAgentPoolsByOrganizationParams struct {
	OrganizationName     pgtype.Text
	NameSubstring        pgtype.Text
	AllowedWorkspaceName pgtype.Text
	AllowedWorkspaceID   pgtype.Text
}

type FindAgentPoolsByOrganizationRow struct {
	AgentPoolID         pgtype.Text        `json:"agent_pool_id"`
	Name                pgtype.Text        `json:"name"`
	CreatedAt           pgtype.Timestamptz `json:"created_at"`
	OrganizationName    pgtype.Text        `json:"organization_name"`
	OrganizationScoped  pgtype.Bool        `json:"organization_scoped"`
	WorkspaceIds        []string           `json:"workspace_ids"`
	AllowedWorkspaceIds []string           `json:"allowed_workspace_ids"`
}

// FindAgentPoolsByOrganization implements Querier.FindAgentPoolsByOrganization.
func (q *DBQuerier) FindAgentPoolsByOrganization(ctx context.Context, params FindAgentPoolsByOrganizationParams) ([]FindAgentPoolsByOrganizationRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindAgentPoolsByOrganization")
	rows, err := q.conn.Query(ctx, findAgentPoolsByOrganizationSQL, params.OrganizationName, params.NameSubstring, params.AllowedWorkspaceName, params.AllowedWorkspaceID)
	if err != nil {
		return nil, fmt.Errorf("query FindAgentPoolsByOrganization: %w", err)
	}
	defer rows.Close()
	items := []FindAgentPoolsByOrganizationRow{}
	for rows.Next() {
		var item FindAgentPoolsByOrganizationRow
		if err := rows.Scan(&item.AgentPoolID, &item.Name, &item.CreatedAt, &item.OrganizationName, &item.OrganizationScoped, &item.WorkspaceIds, &item.AllowedWorkspaceIds); err != nil {
			return nil, fmt.Errorf("scan FindAgentPoolsByOrganization row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindAgentPoolsByOrganization rows: %w", err)
	}
	return items, err
}

// FindAgentPoolsByOrganizationBatch implements Querier.FindAgentPoolsByOrganizationBatch.
func (q *DBQuerier) FindAgentPoolsByOrganizationBatch(batch genericBatch, params FindAgentPoolsByOrganizationParams) {
	batch.Queue(findAgentPoolsByOrganizationSQL, params.OrganizationName, params.NameSubstring, params.AllowedWorkspaceName, params.AllowedWorkspaceID)
}

// FindAgentPoolsByOrganizationScan implements Querier.FindAgentPoolsByOrganizationScan.
func (q *DBQuerier) FindAgentPoolsByOrganizationScan(results pgx.BatchResults) ([]FindAgentPoolsByOrganizationRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query FindAgentPoolsByOrganizationBatch: %w", err)
	}
	defer rows.Close()
	items := []FindAgentPoolsByOrganizationRow{}
	for rows.Next() {
		var item FindAgentPoolsByOrganizationRow
		if err := rows.Scan(&item.AgentPoolID, &item.Name, &item.CreatedAt, &item.OrganizationName, &item.OrganizationScoped, &item.WorkspaceIds, &item.AllowedWorkspaceIds); err != nil {
			return nil, fmt.Errorf("scan FindAgentPoolsByOrganizationBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindAgentPoolsByOrganizationBatch rows: %w", err)
	}
	return items, err
}

const findAgentPoolSQL = `SELECT ap.*,
    (
        SELECT array_agg(w.workspace_id)
        FROM workspaces w
        WHERE w.agent_pool_id = ap.agent_pool_id
    ) AS workspace_ids,
    (
        SELECT array_agg(aw.workspace_id)
        FROM agent_pool_allowed_workspaces aw
        WHERE aw.agent_pool_id = ap.agent_pool_id
    ) AS allowed_workspace_ids
FROM agent_pools ap
WHERE ap.agent_pool_id = $1
GROUP BY ap.agent_pool_id
;`

type FindAgentPoolRow struct {
	AgentPoolID         pgtype.Text        `json:"agent_pool_id"`
	Name                pgtype.Text        `json:"name"`
	CreatedAt           pgtype.Timestamptz `json:"created_at"`
	OrganizationName    pgtype.Text        `json:"organization_name"`
	OrganizationScoped  pgtype.Bool        `json:"organization_scoped"`
	WorkspaceIds        []string           `json:"workspace_ids"`
	AllowedWorkspaceIds []string           `json:"allowed_workspace_ids"`
}

// FindAgentPool implements Querier.FindAgentPool.
func (q *DBQuerier) FindAgentPool(ctx context.Context, poolID pgtype.Text) (FindAgentPoolRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindAgentPool")
	row := q.conn.QueryRow(ctx, findAgentPoolSQL, poolID)
	var item FindAgentPoolRow
	if err := row.Scan(&item.AgentPoolID, &item.Name, &item.CreatedAt, &item.OrganizationName, &item.OrganizationScoped, &item.WorkspaceIds, &item.AllowedWorkspaceIds); err != nil {
		return item, fmt.Errorf("query FindAgentPool: %w", err)
	}
	return item, nil
}

// FindAgentPoolBatch implements Querier.FindAgentPoolBatch.
func (q *DBQuerier) FindAgentPoolBatch(batch genericBatch, poolID pgtype.Text) {
	batch.Queue(findAgentPoolSQL, poolID)
}

// FindAgentPoolScan implements Querier.FindAgentPoolScan.
func (q *DBQuerier) FindAgentPoolScan(results pgx.BatchResults) (FindAgentPoolRow, error) {
	row := results.QueryRow()
	var item FindAgentPoolRow
	if err := row.Scan(&item.AgentPoolID, &item.Name, &item.CreatedAt, &item.OrganizationName, &item.OrganizationScoped, &item.WorkspaceIds, &item.AllowedWorkspaceIds); err != nil {
		return item, fmt.Errorf("scan FindAgentPoolBatch row: %w", err)
	}
	return item, nil
}

const findAgentPoolByAgentTokenIDSQL = `SELECT ap.*,
    (
        SELECT array_agg(w.workspace_id)
        FROM workspaces w
        WHERE w.agent_pool_id = ap.agent_pool_id
    ) AS workspace_ids,
    (
        SELECT array_agg(aw.workspace_id)
        FROM agent_pool_allowed_workspaces aw
        WHERE aw.agent_pool_id = ap.agent_pool_id
    ) AS allowed_workspace_ids
FROM agent_pools ap
JOIN agent_tokens at USING (agent_pool_id)
WHERE at.agent_token_id = $1
GROUP BY ap.agent_pool_id
;`

type FindAgentPoolByAgentTokenIDRow struct {
	AgentPoolID         pgtype.Text        `json:"agent_pool_id"`
	Name                pgtype.Text        `json:"name"`
	CreatedAt           pgtype.Timestamptz `json:"created_at"`
	OrganizationName    pgtype.Text        `json:"organization_name"`
	OrganizationScoped  pgtype.Bool        `json:"organization_scoped"`
	WorkspaceIds        []string           `json:"workspace_ids"`
	AllowedWorkspaceIds []string           `json:"allowed_workspace_ids"`
}

// FindAgentPoolByAgentTokenID implements Querier.FindAgentPoolByAgentTokenID.
func (q *DBQuerier) FindAgentPoolByAgentTokenID(ctx context.Context, agentTokenID pgtype.Text) (FindAgentPoolByAgentTokenIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindAgentPoolByAgentTokenID")
	row := q.conn.QueryRow(ctx, findAgentPoolByAgentTokenIDSQL, agentTokenID)
	var item FindAgentPoolByAgentTokenIDRow
	if err := row.Scan(&item.AgentPoolID, &item.Name, &item.CreatedAt, &item.OrganizationName, &item.OrganizationScoped, &item.WorkspaceIds, &item.AllowedWorkspaceIds); err != nil {
		return item, fmt.Errorf("query FindAgentPoolByAgentTokenID: %w", err)
	}
	return item, nil
}

// FindAgentPoolByAgentTokenIDBatch implements Querier.FindAgentPoolByAgentTokenIDBatch.
func (q *DBQuerier) FindAgentPoolByAgentTokenIDBatch(batch genericBatch, agentTokenID pgtype.Text) {
	batch.Queue(findAgentPoolByAgentTokenIDSQL, agentTokenID)
}

// FindAgentPoolByAgentTokenIDScan implements Querier.FindAgentPoolByAgentTokenIDScan.
func (q *DBQuerier) FindAgentPoolByAgentTokenIDScan(results pgx.BatchResults) (FindAgentPoolByAgentTokenIDRow, error) {
	row := results.QueryRow()
	var item FindAgentPoolByAgentTokenIDRow
	if err := row.Scan(&item.AgentPoolID, &item.Name, &item.CreatedAt, &item.OrganizationName, &item.OrganizationScoped, &item.WorkspaceIds, &item.AllowedWorkspaceIds); err != nil {
		return item, fmt.Errorf("scan FindAgentPoolByAgentTokenIDBatch row: %w", err)
	}
	return item, nil
}

const updateAgentPoolSQL = `UPDATE agent_pools
SET name = $1,
    organization_scoped = $2
WHERE agent_pool_id = $3
RETURNING *;`

type UpdateAgentPoolParams struct {
	Name               pgtype.Text
	OrganizationScoped pgtype.Bool
	PoolID             pgtype.Text
}

type UpdateAgentPoolRow struct {
	AgentPoolID        pgtype.Text        `json:"agent_pool_id"`
	Name               pgtype.Text        `json:"name"`
	CreatedAt          pgtype.Timestamptz `json:"created_at"`
	OrganizationName   pgtype.Text        `json:"organization_name"`
	OrganizationScoped pgtype.Bool        `json:"organization_scoped"`
}

// UpdateAgentPool implements Querier.UpdateAgentPool.
func (q *DBQuerier) UpdateAgentPool(ctx context.Context, params UpdateAgentPoolParams) (UpdateAgentPoolRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateAgentPool")
	row := q.conn.QueryRow(ctx, updateAgentPoolSQL, params.Name, params.OrganizationScoped, params.PoolID)
	var item UpdateAgentPoolRow
	if err := row.Scan(&item.AgentPoolID, &item.Name, &item.CreatedAt, &item.OrganizationName, &item.OrganizationScoped); err != nil {
		return item, fmt.Errorf("query UpdateAgentPool: %w", err)
	}
	return item, nil
}

// UpdateAgentPoolBatch implements Querier.UpdateAgentPoolBatch.
func (q *DBQuerier) UpdateAgentPoolBatch(batch genericBatch, params UpdateAgentPoolParams) {
	batch.Queue(updateAgentPoolSQL, params.Name, params.OrganizationScoped, params.PoolID)
}

// UpdateAgentPoolScan implements Querier.UpdateAgentPoolScan.
func (q *DBQuerier) UpdateAgentPoolScan(results pgx.BatchResults) (UpdateAgentPoolRow, error) {
	row := results.QueryRow()
	var item UpdateAgentPoolRow
	if err := row.Scan(&item.AgentPoolID, &item.Name, &item.CreatedAt, &item.OrganizationName, &item.OrganizationScoped); err != nil {
		return item, fmt.Errorf("scan UpdateAgentPoolBatch row: %w", err)
	}
	return item, nil
}

const deleteAgentPoolSQL = `DELETE
FROM agent_pools
WHERE agent_pool_id = $1
RETURNING *
;`

type DeleteAgentPoolRow struct {
	AgentPoolID        pgtype.Text        `json:"agent_pool_id"`
	Name               pgtype.Text        `json:"name"`
	CreatedAt          pgtype.Timestamptz `json:"created_at"`
	OrganizationName   pgtype.Text        `json:"organization_name"`
	OrganizationScoped pgtype.Bool        `json:"organization_scoped"`
}

// DeleteAgentPool implements Querier.DeleteAgentPool.
func (q *DBQuerier) DeleteAgentPool(ctx context.Context, poolID pgtype.Text) (DeleteAgentPoolRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteAgentPool")
	row := q.conn.QueryRow(ctx, deleteAgentPoolSQL, poolID)
	var item DeleteAgentPoolRow
	if err := row.Scan(&item.AgentPoolID, &item.Name, &item.CreatedAt, &item.OrganizationName, &item.OrganizationScoped); err != nil {
		return item, fmt.Errorf("query DeleteAgentPool: %w", err)
	}
	return item, nil
}

// DeleteAgentPoolBatch implements Querier.DeleteAgentPoolBatch.
func (q *DBQuerier) DeleteAgentPoolBatch(batch genericBatch, poolID pgtype.Text) {
	batch.Queue(deleteAgentPoolSQL, poolID)
}

// DeleteAgentPoolScan implements Querier.DeleteAgentPoolScan.
func (q *DBQuerier) DeleteAgentPoolScan(results pgx.BatchResults) (DeleteAgentPoolRow, error) {
	row := results.QueryRow()
	var item DeleteAgentPoolRow
	if err := row.Scan(&item.AgentPoolID, &item.Name, &item.CreatedAt, &item.OrganizationName, &item.OrganizationScoped); err != nil {
		return item, fmt.Errorf("scan DeleteAgentPoolBatch row: %w", err)
	}
	return item, nil
}

const insertAgentPoolAllowedWorkspaceSQL = `INSERT INTO agent_pool_allowed_workspaces (
    agent_pool_id,
    workspace_id
) VALUES (
    $1,
    $2
);`

// InsertAgentPoolAllowedWorkspace implements Querier.InsertAgentPoolAllowedWorkspace.
func (q *DBQuerier) InsertAgentPoolAllowedWorkspace(ctx context.Context, poolID pgtype.Text, workspaceID pgtype.Text) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertAgentPoolAllowedWorkspace")
	cmdTag, err := q.conn.Exec(ctx, insertAgentPoolAllowedWorkspaceSQL, poolID, workspaceID)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query InsertAgentPoolAllowedWorkspace: %w", err)
	}
	return cmdTag, err
}

// InsertAgentPoolAllowedWorkspaceBatch implements Querier.InsertAgentPoolAllowedWorkspaceBatch.
func (q *DBQuerier) InsertAgentPoolAllowedWorkspaceBatch(batch genericBatch, poolID pgtype.Text, workspaceID pgtype.Text) {
	batch.Queue(insertAgentPoolAllowedWorkspaceSQL, poolID, workspaceID)
}

// InsertAgentPoolAllowedWorkspaceScan implements Querier.InsertAgentPoolAllowedWorkspaceScan.
func (q *DBQuerier) InsertAgentPoolAllowedWorkspaceScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec InsertAgentPoolAllowedWorkspaceBatch: %w", err)
	}
	return cmdTag, err
}

const deleteAgentPoolAllowedWorkspaceSQL = `DELETE
FROM agent_pool_allowed_workspaces
WHERE agent_pool_id = $1
AND workspace_id = $2
;`

// DeleteAgentPoolAllowedWorkspace implements Querier.DeleteAgentPoolAllowedWorkspace.
func (q *DBQuerier) DeleteAgentPoolAllowedWorkspace(ctx context.Context, poolID pgtype.Text, workspaceID pgtype.Text) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteAgentPoolAllowedWorkspace")
	cmdTag, err := q.conn.Exec(ctx, deleteAgentPoolAllowedWorkspaceSQL, poolID, workspaceID)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query DeleteAgentPoolAllowedWorkspace: %w", err)
	}
	return cmdTag, err
}

// DeleteAgentPoolAllowedWorkspaceBatch implements Querier.DeleteAgentPoolAllowedWorkspaceBatch.
func (q *DBQuerier) DeleteAgentPoolAllowedWorkspaceBatch(batch genericBatch, poolID pgtype.Text, workspaceID pgtype.Text) {
	batch.Queue(deleteAgentPoolAllowedWorkspaceSQL, poolID, workspaceID)
}

// DeleteAgentPoolAllowedWorkspaceScan implements Querier.DeleteAgentPoolAllowedWorkspaceScan.
func (q *DBQuerier) DeleteAgentPoolAllowedWorkspaceScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec DeleteAgentPoolAllowedWorkspaceBatch: %w", err)
	}
	return cmdTag, err
}
