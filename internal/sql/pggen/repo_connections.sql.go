// Code generated by pggen. DO NOT EDIT.

package pggen

import (
	"context"
	"fmt"

	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

const insertRepoConnectionSQL = `INSERT INTO repo_connections (
    webhook_id,
    workspace_id,
    module_id
) VALUES (
    $1,
    $2,
    $3
);`

type InsertRepoConnectionParams struct {
	WebhookID   pgtype.UUID
	WorkspaceID pgtype.Text
	ModuleID    pgtype.Text
}

// InsertRepoConnection implements Querier.InsertRepoConnection.
func (q *DBQuerier) InsertRepoConnection(ctx context.Context, params InsertRepoConnectionParams) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertRepoConnection")
	cmdTag, err := q.conn.Exec(ctx, insertRepoConnectionSQL, params.WebhookID, params.WorkspaceID, params.ModuleID)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query InsertRepoConnection: %w", err)
	}
	return cmdTag, err
}

// InsertRepoConnectionBatch implements Querier.InsertRepoConnectionBatch.
func (q *DBQuerier) InsertRepoConnectionBatch(batch genericBatch, params InsertRepoConnectionParams) {
	batch.Queue(insertRepoConnectionSQL, params.WebhookID, params.WorkspaceID, params.ModuleID)
}

// InsertRepoConnectionScan implements Querier.InsertRepoConnectionScan.
func (q *DBQuerier) InsertRepoConnectionScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec InsertRepoConnectionBatch: %w", err)
	}
	return cmdTag, err
}

const deleteWorkspaceConnectionByIDSQL = `DELETE
FROM repo_connections
WHERE workspace_id = $1
RETURNING webhook_id;`

// DeleteWorkspaceConnectionByID implements Querier.DeleteWorkspaceConnectionByID.
func (q *DBQuerier) DeleteWorkspaceConnectionByID(ctx context.Context, workspaceID pgtype.Text) (pgtype.UUID, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteWorkspaceConnectionByID")
	row := q.conn.QueryRow(ctx, deleteWorkspaceConnectionByIDSQL, workspaceID)
	var item pgtype.UUID
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query DeleteWorkspaceConnectionByID: %w", err)
	}
	return item, nil
}

// DeleteWorkspaceConnectionByIDBatch implements Querier.DeleteWorkspaceConnectionByIDBatch.
func (q *DBQuerier) DeleteWorkspaceConnectionByIDBatch(batch genericBatch, workspaceID pgtype.Text) {
	batch.Queue(deleteWorkspaceConnectionByIDSQL, workspaceID)
}

// DeleteWorkspaceConnectionByIDScan implements Querier.DeleteWorkspaceConnectionByIDScan.
func (q *DBQuerier) DeleteWorkspaceConnectionByIDScan(results pgx.BatchResults) (pgtype.UUID, error) {
	row := results.QueryRow()
	var item pgtype.UUID
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan DeleteWorkspaceConnectionByIDBatch row: %w", err)
	}
	return item, nil
}

const deleteModuleConnectionByIDSQL = `DELETE
FROM repo_connections
WHERE module_id = $1
RETURNING webhook_id;`

// DeleteModuleConnectionByID implements Querier.DeleteModuleConnectionByID.
func (q *DBQuerier) DeleteModuleConnectionByID(ctx context.Context, moduleID pgtype.Text) (pgtype.UUID, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteModuleConnectionByID")
	row := q.conn.QueryRow(ctx, deleteModuleConnectionByIDSQL, moduleID)
	var item pgtype.UUID
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query DeleteModuleConnectionByID: %w", err)
	}
	return item, nil
}

// DeleteModuleConnectionByIDBatch implements Querier.DeleteModuleConnectionByIDBatch.
func (q *DBQuerier) DeleteModuleConnectionByIDBatch(batch genericBatch, moduleID pgtype.Text) {
	batch.Queue(deleteModuleConnectionByIDSQL, moduleID)
}

// DeleteModuleConnectionByIDScan implements Querier.DeleteModuleConnectionByIDScan.
func (q *DBQuerier) DeleteModuleConnectionByIDScan(results pgx.BatchResults) (pgtype.UUID, error) {
	row := results.QueryRow()
	var item pgtype.UUID
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan DeleteModuleConnectionByIDBatch row: %w", err)
	}
	return item, nil
}
