// Code generated by pggen. DO NOT EDIT.

package pggen

import (
	"context"
	"fmt"

	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

const insertWebhookSQL = `WITH inserted AS (
    INSERT INTO webhooks (
        webhook_id,
        vcs_id,
        vcs_provider_id,
        secret,
        identifier
    ) VALUES (
        $1,
        $2,
        $3,
        $4,
        $5
    )
    RETURNING *
)
SELECT
    w.webhook_id,
    w.vcs_id,
    w.vcs_provider_id,
    w.secret,
    w.identifier,
    v.cloud
FROM inserted w
JOIN vcs_providers v USING (vcs_provider_id);`

type InsertWebhookParams struct {
	WebhookID     pgtype.UUID
	VCSID         pgtype.Text
	VCSProviderID pgtype.Text
	Secret        pgtype.Text
	Identifier    pgtype.Text
}

type InsertWebhookRow struct {
	WebhookID     pgtype.UUID `json:"webhook_id"`
	VCSID         pgtype.Text `json:"vcs_id"`
	VCSProviderID pgtype.Text `json:"vcs_provider_id"`
	Secret        pgtype.Text `json:"secret"`
	Identifier    pgtype.Text `json:"identifier"`
	Cloud         pgtype.Text `json:"cloud"`
}

// InsertWebhook implements Querier.InsertWebhook.
func (q *DBQuerier) InsertWebhook(ctx context.Context, params InsertWebhookParams) (InsertWebhookRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertWebhook")
	row := q.conn.QueryRow(ctx, insertWebhookSQL, params.WebhookID, params.VCSID, params.VCSProviderID, params.Secret, params.Identifier)
	var item InsertWebhookRow
	if err := row.Scan(&item.WebhookID, &item.VCSID, &item.VCSProviderID, &item.Secret, &item.Identifier, &item.Cloud); err != nil {
		return item, fmt.Errorf("query InsertWebhook: %w", err)
	}
	return item, nil
}

// InsertWebhookBatch implements Querier.InsertWebhookBatch.
func (q *DBQuerier) InsertWebhookBatch(batch genericBatch, params InsertWebhookParams) {
	batch.Queue(insertWebhookSQL, params.WebhookID, params.VCSID, params.VCSProviderID, params.Secret, params.Identifier)
}

// InsertWebhookScan implements Querier.InsertWebhookScan.
func (q *DBQuerier) InsertWebhookScan(results pgx.BatchResults) (InsertWebhookRow, error) {
	row := results.QueryRow()
	var item InsertWebhookRow
	if err := row.Scan(&item.WebhookID, &item.VCSID, &item.VCSProviderID, &item.Secret, &item.Identifier, &item.Cloud); err != nil {
		return item, fmt.Errorf("scan InsertWebhookBatch row: %w", err)
	}
	return item, nil
}

const updateWebhookVCSIDSQL = `UPDATE webhooks
SET vcs_id = $1
WHERE webhook_id = $2
RETURNING *;`

type UpdateWebhookVCSIDRow struct {
	WebhookID     pgtype.UUID `json:"webhook_id"`
	VCSID         pgtype.Text `json:"vcs_id"`
	Secret        pgtype.Text `json:"secret"`
	Identifier    pgtype.Text `json:"identifier"`
	VCSProviderID pgtype.Text `json:"vcs_provider_id"`
}

// UpdateWebhookVCSID implements Querier.UpdateWebhookVCSID.
func (q *DBQuerier) UpdateWebhookVCSID(ctx context.Context, vcsID pgtype.Text, webhookID pgtype.UUID) (UpdateWebhookVCSIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateWebhookVCSID")
	row := q.conn.QueryRow(ctx, updateWebhookVCSIDSQL, vcsID, webhookID)
	var item UpdateWebhookVCSIDRow
	if err := row.Scan(&item.WebhookID, &item.VCSID, &item.Secret, &item.Identifier, &item.VCSProviderID); err != nil {
		return item, fmt.Errorf("query UpdateWebhookVCSID: %w", err)
	}
	return item, nil
}

// UpdateWebhookVCSIDBatch implements Querier.UpdateWebhookVCSIDBatch.
func (q *DBQuerier) UpdateWebhookVCSIDBatch(batch genericBatch, vcsID pgtype.Text, webhookID pgtype.UUID) {
	batch.Queue(updateWebhookVCSIDSQL, vcsID, webhookID)
}

// UpdateWebhookVCSIDScan implements Querier.UpdateWebhookVCSIDScan.
func (q *DBQuerier) UpdateWebhookVCSIDScan(results pgx.BatchResults) (UpdateWebhookVCSIDRow, error) {
	row := results.QueryRow()
	var item UpdateWebhookVCSIDRow
	if err := row.Scan(&item.WebhookID, &item.VCSID, &item.Secret, &item.Identifier, &item.VCSProviderID); err != nil {
		return item, fmt.Errorf("scan UpdateWebhookVCSIDBatch row: %w", err)
	}
	return item, nil
}

const findWebhooksSQL = `SELECT
    w.webhook_id,
    w.vcs_id,
    w.vcs_provider_id,
    w.secret,
    w.identifier,
    v.cloud
FROM webhooks w
JOIN vcs_providers v USING (vcs_provider_id);`

type FindWebhooksRow struct {
	WebhookID     pgtype.UUID `json:"webhook_id"`
	VCSID         pgtype.Text `json:"vcs_id"`
	VCSProviderID pgtype.Text `json:"vcs_provider_id"`
	Secret        pgtype.Text `json:"secret"`
	Identifier    pgtype.Text `json:"identifier"`
	Cloud         pgtype.Text `json:"cloud"`
}

// FindWebhooks implements Querier.FindWebhooks.
func (q *DBQuerier) FindWebhooks(ctx context.Context) ([]FindWebhooksRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindWebhooks")
	rows, err := q.conn.Query(ctx, findWebhooksSQL)
	if err != nil {
		return nil, fmt.Errorf("query FindWebhooks: %w", err)
	}
	defer rows.Close()
	items := []FindWebhooksRow{}
	for rows.Next() {
		var item FindWebhooksRow
		if err := rows.Scan(&item.WebhookID, &item.VCSID, &item.VCSProviderID, &item.Secret, &item.Identifier, &item.Cloud); err != nil {
			return nil, fmt.Errorf("scan FindWebhooks row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindWebhooks rows: %w", err)
	}
	return items, err
}

// FindWebhooksBatch implements Querier.FindWebhooksBatch.
func (q *DBQuerier) FindWebhooksBatch(batch genericBatch) {
	batch.Queue(findWebhooksSQL)
}

// FindWebhooksScan implements Querier.FindWebhooksScan.
func (q *DBQuerier) FindWebhooksScan(results pgx.BatchResults) ([]FindWebhooksRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query FindWebhooksBatch: %w", err)
	}
	defer rows.Close()
	items := []FindWebhooksRow{}
	for rows.Next() {
		var item FindWebhooksRow
		if err := rows.Scan(&item.WebhookID, &item.VCSID, &item.VCSProviderID, &item.Secret, &item.Identifier, &item.Cloud); err != nil {
			return nil, fmt.Errorf("scan FindWebhooksBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindWebhooksBatch rows: %w", err)
	}
	return items, err
}

const findWebhookByIDSQL = `SELECT
    w.webhook_id,
    w.vcs_id,
    w.vcs_provider_id,
    w.secret,
    w.identifier,
    v.cloud
FROM webhooks w
JOIN vcs_providers v USING (vcs_provider_id)
WHERE w.webhook_id = $1;`

type FindWebhookByIDRow struct {
	WebhookID     pgtype.UUID `json:"webhook_id"`
	VCSID         pgtype.Text `json:"vcs_id"`
	VCSProviderID pgtype.Text `json:"vcs_provider_id"`
	Secret        pgtype.Text `json:"secret"`
	Identifier    pgtype.Text `json:"identifier"`
	Cloud         pgtype.Text `json:"cloud"`
}

// FindWebhookByID implements Querier.FindWebhookByID.
func (q *DBQuerier) FindWebhookByID(ctx context.Context, webhookID pgtype.UUID) (FindWebhookByIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindWebhookByID")
	row := q.conn.QueryRow(ctx, findWebhookByIDSQL, webhookID)
	var item FindWebhookByIDRow
	if err := row.Scan(&item.WebhookID, &item.VCSID, &item.VCSProviderID, &item.Secret, &item.Identifier, &item.Cloud); err != nil {
		return item, fmt.Errorf("query FindWebhookByID: %w", err)
	}
	return item, nil
}

// FindWebhookByIDBatch implements Querier.FindWebhookByIDBatch.
func (q *DBQuerier) FindWebhookByIDBatch(batch genericBatch, webhookID pgtype.UUID) {
	batch.Queue(findWebhookByIDSQL, webhookID)
}

// FindWebhookByIDScan implements Querier.FindWebhookByIDScan.
func (q *DBQuerier) FindWebhookByIDScan(results pgx.BatchResults) (FindWebhookByIDRow, error) {
	row := results.QueryRow()
	var item FindWebhookByIDRow
	if err := row.Scan(&item.WebhookID, &item.VCSID, &item.VCSProviderID, &item.Secret, &item.Identifier, &item.Cloud); err != nil {
		return item, fmt.Errorf("scan FindWebhookByIDBatch row: %w", err)
	}
	return item, nil
}

const findWebhookByRepoSQL = `SELECT
    w.webhook_id,
    w.vcs_id,
    w.vcs_provider_id,
    w.secret,
    w.identifier,
    v.cloud
FROM webhooks w
JOIN vcs_providers v USING (vcs_provider_id)
WHERE identifier = $1
AND   cloud = $2
AND   vcs_provider_id = $3;`

type FindWebhookByRepoParams struct {
	Identifier    pgtype.Text
	Cloud         pgtype.Text
	VCSProviderID pgtype.Text
}

type FindWebhookByRepoRow struct {
	WebhookID     pgtype.UUID `json:"webhook_id"`
	VCSID         pgtype.Text `json:"vcs_id"`
	VCSProviderID pgtype.Text `json:"vcs_provider_id"`
	Secret        pgtype.Text `json:"secret"`
	Identifier    pgtype.Text `json:"identifier"`
	Cloud         pgtype.Text `json:"cloud"`
}

// FindWebhookByRepo implements Querier.FindWebhookByRepo.
func (q *DBQuerier) FindWebhookByRepo(ctx context.Context, params FindWebhookByRepoParams) ([]FindWebhookByRepoRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindWebhookByRepo")
	rows, err := q.conn.Query(ctx, findWebhookByRepoSQL, params.Identifier, params.Cloud, params.VCSProviderID)
	if err != nil {
		return nil, fmt.Errorf("query FindWebhookByRepo: %w", err)
	}
	defer rows.Close()
	items := []FindWebhookByRepoRow{}
	for rows.Next() {
		var item FindWebhookByRepoRow
		if err := rows.Scan(&item.WebhookID, &item.VCSID, &item.VCSProviderID, &item.Secret, &item.Identifier, &item.Cloud); err != nil {
			return nil, fmt.Errorf("scan FindWebhookByRepo row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindWebhookByRepo rows: %w", err)
	}
	return items, err
}

// FindWebhookByRepoBatch implements Querier.FindWebhookByRepoBatch.
func (q *DBQuerier) FindWebhookByRepoBatch(batch genericBatch, params FindWebhookByRepoParams) {
	batch.Queue(findWebhookByRepoSQL, params.Identifier, params.Cloud, params.VCSProviderID)
}

// FindWebhookByRepoScan implements Querier.FindWebhookByRepoScan.
func (q *DBQuerier) FindWebhookByRepoScan(results pgx.BatchResults) ([]FindWebhookByRepoRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query FindWebhookByRepoBatch: %w", err)
	}
	defer rows.Close()
	items := []FindWebhookByRepoRow{}
	for rows.Next() {
		var item FindWebhookByRepoRow
		if err := rows.Scan(&item.WebhookID, &item.VCSID, &item.VCSProviderID, &item.Secret, &item.Identifier, &item.Cloud); err != nil {
			return nil, fmt.Errorf("scan FindWebhookByRepoBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindWebhookByRepoBatch rows: %w", err)
	}
	return items, err
}

const deleteWebhookByIDSQL = `DELETE
FROM webhooks
WHERE webhook_id = $1
RETURNING *;`

type DeleteWebhookByIDRow struct {
	WebhookID     pgtype.UUID `json:"webhook_id"`
	VCSID         pgtype.Text `json:"vcs_id"`
	Secret        pgtype.Text `json:"secret"`
	Identifier    pgtype.Text `json:"identifier"`
	VCSProviderID pgtype.Text `json:"vcs_provider_id"`
}

// DeleteWebhookByID implements Querier.DeleteWebhookByID.
func (q *DBQuerier) DeleteWebhookByID(ctx context.Context, webhookID pgtype.UUID) (DeleteWebhookByIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteWebhookByID")
	row := q.conn.QueryRow(ctx, deleteWebhookByIDSQL, webhookID)
	var item DeleteWebhookByIDRow
	if err := row.Scan(&item.WebhookID, &item.VCSID, &item.Secret, &item.Identifier, &item.VCSProviderID); err != nil {
		return item, fmt.Errorf("query DeleteWebhookByID: %w", err)
	}
	return item, nil
}

// DeleteWebhookByIDBatch implements Querier.DeleteWebhookByIDBatch.
func (q *DBQuerier) DeleteWebhookByIDBatch(batch genericBatch, webhookID pgtype.UUID) {
	batch.Queue(deleteWebhookByIDSQL, webhookID)
}

// DeleteWebhookByIDScan implements Querier.DeleteWebhookByIDScan.
func (q *DBQuerier) DeleteWebhookByIDScan(results pgx.BatchResults) (DeleteWebhookByIDRow, error) {
	row := results.QueryRow()
	var item DeleteWebhookByIDRow
	if err := row.Scan(&item.WebhookID, &item.VCSID, &item.Secret, &item.Identifier, &item.VCSProviderID); err != nil {
		return item, fmt.Errorf("scan DeleteWebhookByIDBatch row: %w", err)
	}
	return item, nil
}
