// Code generated by pggen. DO NOT EDIT.

package pggen

import (
	"context"
	"fmt"

	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

const insertTeamTokenSQL = `INSERT INTO team_tokens (
    team_token_id,
    description,
    created_at,
    team_id,
    expiry
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
);`

type InsertTeamTokenParams struct {
	TeamTokenID pgtype.Text
	Description pgtype.Text
	CreatedAt   pgtype.Timestamptz
	TeamID      pgtype.Text
	Expiry      pgtype.Timestamptz
}

// InsertTeamToken implements Querier.InsertTeamToken.
func (q *DBQuerier) InsertTeamToken(ctx context.Context, params InsertTeamTokenParams) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertTeamToken")
	cmdTag, err := q.conn.Exec(ctx, insertTeamTokenSQL, params.TeamTokenID, params.Description, params.CreatedAt, params.TeamID, params.Expiry)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query InsertTeamToken: %w", err)
	}
	return cmdTag, err
}

// InsertTeamTokenBatch implements Querier.InsertTeamTokenBatch.
func (q *DBQuerier) InsertTeamTokenBatch(batch genericBatch, params InsertTeamTokenParams) {
	batch.Queue(insertTeamTokenSQL, params.TeamTokenID, params.Description, params.CreatedAt, params.TeamID, params.Expiry)
}

// InsertTeamTokenScan implements Querier.InsertTeamTokenScan.
func (q *DBQuerier) InsertTeamTokenScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec InsertTeamTokenBatch: %w", err)
	}
	return cmdTag, err
}

const findTeamTokensByTeamSQL = `SELECT *
FROM team_tokens
where team_id = $1
;`

type FindTeamTokensByTeamRow struct {
	TeamTokenID pgtype.Text        `json:"team_token_id"`
	Description pgtype.Text        `json:"description"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	TeamID      pgtype.Text        `json:"team_id"`
	Expiry      pgtype.Timestamptz `json:"expiry"`
}

// FindTeamTokensByTeam implements Querier.FindTeamTokensByTeam.
func (q *DBQuerier) FindTeamTokensByTeam(ctx context.Context, teamID pgtype.Text) ([]FindTeamTokensByTeamRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindTeamTokensByTeam")
	rows, err := q.conn.Query(ctx, findTeamTokensByTeamSQL, teamID)
	if err != nil {
		return nil, fmt.Errorf("query FindTeamTokensByTeam: %w", err)
	}
	defer rows.Close()
	items := []FindTeamTokensByTeamRow{}
	for rows.Next() {
		var item FindTeamTokensByTeamRow
		if err := rows.Scan(&item.TeamTokenID, &item.Description, &item.CreatedAt, &item.TeamID, &item.Expiry); err != nil {
			return nil, fmt.Errorf("scan FindTeamTokensByTeam row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindTeamTokensByTeam rows: %w", err)
	}
	return items, err
}

// FindTeamTokensByTeamBatch implements Querier.FindTeamTokensByTeamBatch.
func (q *DBQuerier) FindTeamTokensByTeamBatch(batch genericBatch, teamID pgtype.Text) {
	batch.Queue(findTeamTokensByTeamSQL, teamID)
}

// FindTeamTokensByTeamScan implements Querier.FindTeamTokensByTeamScan.
func (q *DBQuerier) FindTeamTokensByTeamScan(results pgx.BatchResults) ([]FindTeamTokensByTeamRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query FindTeamTokensByTeamBatch: %w", err)
	}
	defer rows.Close()
	items := []FindTeamTokensByTeamRow{}
	for rows.Next() {
		var item FindTeamTokensByTeamRow
		if err := rows.Scan(&item.TeamTokenID, &item.Description, &item.CreatedAt, &item.TeamID, &item.Expiry); err != nil {
			return nil, fmt.Errorf("scan FindTeamTokensByTeamBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindTeamTokensByTeamBatch rows: %w", err)
	}
	return items, err
}

const findTeamTokenByIDSQL = `SELECT *
FROM team_tokens
WHERE team_token_id = $1
;`

type FindTeamTokenByIDRow struct {
	TeamTokenID pgtype.Text        `json:"team_token_id"`
	Description pgtype.Text        `json:"description"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	TeamID      pgtype.Text        `json:"team_id"`
	Expiry      pgtype.Timestamptz `json:"expiry"`
}

// FindTeamTokenByID implements Querier.FindTeamTokenByID.
func (q *DBQuerier) FindTeamTokenByID(ctx context.Context, teamTokenID pgtype.Text) (FindTeamTokenByIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindTeamTokenByID")
	row := q.conn.QueryRow(ctx, findTeamTokenByIDSQL, teamTokenID)
	var item FindTeamTokenByIDRow
	if err := row.Scan(&item.TeamTokenID, &item.Description, &item.CreatedAt, &item.TeamID, &item.Expiry); err != nil {
		return item, fmt.Errorf("query FindTeamTokenByID: %w", err)
	}
	return item, nil
}

// FindTeamTokenByIDBatch implements Querier.FindTeamTokenByIDBatch.
func (q *DBQuerier) FindTeamTokenByIDBatch(batch genericBatch, teamTokenID pgtype.Text) {
	batch.Queue(findTeamTokenByIDSQL, teamTokenID)
}

// FindTeamTokenByIDScan implements Querier.FindTeamTokenByIDScan.
func (q *DBQuerier) FindTeamTokenByIDScan(results pgx.BatchResults) (FindTeamTokenByIDRow, error) {
	row := results.QueryRow()
	var item FindTeamTokenByIDRow
	if err := row.Scan(&item.TeamTokenID, &item.Description, &item.CreatedAt, &item.TeamID, &item.Expiry); err != nil {
		return item, fmt.Errorf("scan FindTeamTokenByIDBatch row: %w", err)
	}
	return item, nil
}

const deleteTeamTokenByNameSQL = `DELETE
FROM team_tokens
WHERE team_id = $1
RETURNING team_token_id
;`

// DeleteTeamTokenByName implements Querier.DeleteTeamTokenByName.
func (q *DBQuerier) DeleteTeamTokenByName(ctx context.Context, teamID pgtype.Text) (pgtype.Text, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteTeamTokenByName")
	row := q.conn.QueryRow(ctx, deleteTeamTokenByNameSQL, teamID)
	var item pgtype.Text
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query DeleteTeamTokenByName: %w", err)
	}
	return item, nil
}

// DeleteTeamTokenByNameBatch implements Querier.DeleteTeamTokenByNameBatch.
func (q *DBQuerier) DeleteTeamTokenByNameBatch(batch genericBatch, teamID pgtype.Text) {
	batch.Queue(deleteTeamTokenByNameSQL, teamID)
}

// DeleteTeamTokenByNameScan implements Querier.DeleteTeamTokenByNameScan.
func (q *DBQuerier) DeleteTeamTokenByNameScan(results pgx.BatchResults) (pgtype.Text, error) {
	row := results.QueryRow()
	var item pgtype.Text
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan DeleteTeamTokenByNameBatch row: %w", err)
	}
	return item, nil
}
