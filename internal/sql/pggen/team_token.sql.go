// Code generated by pggen. DO NOT EDIT.

package pggen

import (
	"context"
	"fmt"

	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

const insertTeamTokenSQL = `INSERT INTO team_tokens (
    team_token_id,
    created_at,
    team_id,
    expiry
) VALUES (
    $1,
    $2,
    $3,
    $4
) ON CONFLICT (team_id) DO UPDATE
  SET team_token_id = $1,
      created_at    = $2,
      expiry        = $4;`

type InsertTeamTokenParams struct {
	TeamTokenID pgtype.Text
	CreatedAt   pgtype.Timestamptz
	TeamID      pgtype.Text
	Expiry      pgtype.Timestamptz
}

// InsertTeamToken implements Querier.InsertTeamToken.
func (q *DBQuerier) InsertTeamToken(ctx context.Context, params InsertTeamTokenParams) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertTeamToken")
	cmdTag, err := q.conn.Exec(ctx, insertTeamTokenSQL, params.TeamTokenID, params.CreatedAt, params.TeamID, params.Expiry)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query InsertTeamToken: %w", err)
	}
	return cmdTag, err
}

// InsertTeamTokenBatch implements Querier.InsertTeamTokenBatch.
func (q *DBQuerier) InsertTeamTokenBatch(batch genericBatch, params InsertTeamTokenParams) {
	batch.Queue(insertTeamTokenSQL, params.TeamTokenID, params.CreatedAt, params.TeamID, params.Expiry)
}

// InsertTeamTokenScan implements Querier.InsertTeamTokenScan.
func (q *DBQuerier) InsertTeamTokenScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec InsertTeamTokenBatch: %w", err)
	}
	return cmdTag, err
}

const findTeamTokensByIDSQL = `SELECT *
FROM team_tokens
WHERE team_id = $1
;`

type FindTeamTokensByIDRow struct {
	TeamTokenID pgtype.Text        `json:"team_token_id"`
	Description pgtype.Text        `json:"description"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	TeamID      pgtype.Text        `json:"team_id"`
	Expiry      pgtype.Timestamptz `json:"expiry"`
}

// FindTeamTokensByID implements Querier.FindTeamTokensByID.
func (q *DBQuerier) FindTeamTokensByID(ctx context.Context, teamID pgtype.Text) ([]FindTeamTokensByIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindTeamTokensByID")
	rows, err := q.conn.Query(ctx, findTeamTokensByIDSQL, teamID)
	if err != nil {
		return nil, fmt.Errorf("query FindTeamTokensByID: %w", err)
	}
	defer rows.Close()
	items := []FindTeamTokensByIDRow{}
	for rows.Next() {
		var item FindTeamTokensByIDRow
		if err := rows.Scan(&item.TeamTokenID, &item.Description, &item.CreatedAt, &item.TeamID, &item.Expiry); err != nil {
			return nil, fmt.Errorf("scan FindTeamTokensByID row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindTeamTokensByID rows: %w", err)
	}
	return items, err
}

// FindTeamTokensByIDBatch implements Querier.FindTeamTokensByIDBatch.
func (q *DBQuerier) FindTeamTokensByIDBatch(batch genericBatch, teamID pgtype.Text) {
	batch.Queue(findTeamTokensByIDSQL, teamID)
}

// FindTeamTokensByIDScan implements Querier.FindTeamTokensByIDScan.
func (q *DBQuerier) FindTeamTokensByIDScan(results pgx.BatchResults) ([]FindTeamTokensByIDRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query FindTeamTokensByIDBatch: %w", err)
	}
	defer rows.Close()
	items := []FindTeamTokensByIDRow{}
	for rows.Next() {
		var item FindTeamTokensByIDRow
		if err := rows.Scan(&item.TeamTokenID, &item.Description, &item.CreatedAt, &item.TeamID, &item.Expiry); err != nil {
			return nil, fmt.Errorf("scan FindTeamTokensByIDBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindTeamTokensByIDBatch rows: %w", err)
	}
	return items, err
}

const deleteTeamTokenByIDSQL = `DELETE
FROM team_tokens
WHERE team_id = $1
RETURNING team_token_id
;`

// DeleteTeamTokenByID implements Querier.DeleteTeamTokenByID.
func (q *DBQuerier) DeleteTeamTokenByID(ctx context.Context, teamID pgtype.Text) (pgtype.Text, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteTeamTokenByID")
	row := q.conn.QueryRow(ctx, deleteTeamTokenByIDSQL, teamID)
	var item pgtype.Text
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query DeleteTeamTokenByID: %w", err)
	}
	return item, nil
}

// DeleteTeamTokenByIDBatch implements Querier.DeleteTeamTokenByIDBatch.
func (q *DBQuerier) DeleteTeamTokenByIDBatch(batch genericBatch, teamID pgtype.Text) {
	batch.Queue(deleteTeamTokenByIDSQL, teamID)
}

// DeleteTeamTokenByIDScan implements Querier.DeleteTeamTokenByIDScan.
func (q *DBQuerier) DeleteTeamTokenByIDScan(results pgx.BatchResults) (pgtype.Text, error) {
	row := results.QueryRow()
	var item pgtype.Text
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan DeleteTeamTokenByIDBatch row: %w", err)
	}
	return item, nil
}
