// Code generated by pggen. DO NOT EDIT.

package pggen

import (
	"context"
	"fmt"

	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

const insertNotificationConfigurationSQL = `INSERT INTO notification_configurations (
    notification_configuration_id,
    created_at,
    updated_at,
    name,
    url,
    triggers,
    destination_type,
    enabled,
    workspace_id
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9
)
;`

type InsertNotificationConfigurationParams struct {
	NotificationConfigurationID pgtype.Text
	CreatedAt                   pgtype.Timestamptz
	UpdatedAt                   pgtype.Timestamptz
	Name                        pgtype.Text
	URL                         pgtype.Text
	Triggers                    []string
	DestinationType             pgtype.Text
	Enabled                     bool
	WorkspaceID                 pgtype.Text
}

// InsertNotificationConfiguration implements Querier.InsertNotificationConfiguration.
func (q *DBQuerier) InsertNotificationConfiguration(ctx context.Context, params InsertNotificationConfigurationParams) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertNotificationConfiguration")
	cmdTag, err := q.conn.Exec(ctx, insertNotificationConfigurationSQL, params.NotificationConfigurationID, params.CreatedAt, params.UpdatedAt, params.Name, params.URL, params.Triggers, params.DestinationType, params.Enabled, params.WorkspaceID)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query InsertNotificationConfiguration: %w", err)
	}
	return cmdTag, err
}

// InsertNotificationConfigurationBatch implements Querier.InsertNotificationConfigurationBatch.
func (q *DBQuerier) InsertNotificationConfigurationBatch(batch genericBatch, params InsertNotificationConfigurationParams) {
	batch.Queue(insertNotificationConfigurationSQL, params.NotificationConfigurationID, params.CreatedAt, params.UpdatedAt, params.Name, params.URL, params.Triggers, params.DestinationType, params.Enabled, params.WorkspaceID)
}

// InsertNotificationConfigurationScan implements Querier.InsertNotificationConfigurationScan.
func (q *DBQuerier) InsertNotificationConfigurationScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec InsertNotificationConfigurationBatch: %w", err)
	}
	return cmdTag, err
}

const findNotificationConfigurationsSQL = `SELECT * FROM notification_configurations;`

type FindNotificationConfigurationsRow struct {
	NotificationConfigurationID pgtype.Text        `json:"notification_configuration_id"`
	CreatedAt                   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt                   pgtype.Timestamptz `json:"updated_at"`
	Name                        pgtype.Text        `json:"name"`
	URL                         pgtype.Text        `json:"url"`
	Triggers                    []string           `json:"triggers"`
	DestinationType             pgtype.Text        `json:"destination_type"`
	WorkspaceID                 pgtype.Text        `json:"workspace_id"`
	Enabled                     bool               `json:"enabled"`
}

// FindNotificationConfigurations implements Querier.FindNotificationConfigurations.
func (q *DBQuerier) FindNotificationConfigurations(ctx context.Context) ([]FindNotificationConfigurationsRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindNotificationConfigurations")
	rows, err := q.conn.Query(ctx, findNotificationConfigurationsSQL)
	if err != nil {
		return nil, fmt.Errorf("query FindNotificationConfigurations: %w", err)
	}
	defer rows.Close()
	items := []FindNotificationConfigurationsRow{}
	for rows.Next() {
		var item FindNotificationConfigurationsRow
		if err := rows.Scan(&item.NotificationConfigurationID, &item.CreatedAt, &item.UpdatedAt, &item.Name, &item.URL, &item.Triggers, &item.DestinationType, &item.WorkspaceID, &item.Enabled); err != nil {
			return nil, fmt.Errorf("scan FindNotificationConfigurations row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindNotificationConfigurations rows: %w", err)
	}
	return items, err
}

// FindNotificationConfigurationsBatch implements Querier.FindNotificationConfigurationsBatch.
func (q *DBQuerier) FindNotificationConfigurationsBatch(batch genericBatch) {
	batch.Queue(findNotificationConfigurationsSQL)
}

// FindNotificationConfigurationsScan implements Querier.FindNotificationConfigurationsScan.
func (q *DBQuerier) FindNotificationConfigurationsScan(results pgx.BatchResults) ([]FindNotificationConfigurationsRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query FindNotificationConfigurationsBatch: %w", err)
	}
	defer rows.Close()
	items := []FindNotificationConfigurationsRow{}
	for rows.Next() {
		var item FindNotificationConfigurationsRow
		if err := rows.Scan(&item.NotificationConfigurationID, &item.CreatedAt, &item.UpdatedAt, &item.Name, &item.URL, &item.Triggers, &item.DestinationType, &item.WorkspaceID, &item.Enabled); err != nil {
			return nil, fmt.Errorf("scan FindNotificationConfigurationsBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindNotificationConfigurationsBatch rows: %w", err)
	}
	return items, err
}

const findNotificationConfigurationSQL = `SELECT *
FROM notification_configurations
WHERE notification_configuration_id = $1
;`

type FindNotificationConfigurationRow struct {
	NotificationConfigurationID pgtype.Text        `json:"notification_configuration_id"`
	CreatedAt                   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt                   pgtype.Timestamptz `json:"updated_at"`
	Name                        pgtype.Text        `json:"name"`
	URL                         pgtype.Text        `json:"url"`
	Triggers                    []string           `json:"triggers"`
	DestinationType             pgtype.Text        `json:"destination_type"`
	WorkspaceID                 pgtype.Text        `json:"workspace_id"`
	Enabled                     bool               `json:"enabled"`
}

// FindNotificationConfiguration implements Querier.FindNotificationConfiguration.
func (q *DBQuerier) FindNotificationConfiguration(ctx context.Context, notificationConfigurationID pgtype.Text) (FindNotificationConfigurationRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindNotificationConfiguration")
	row := q.conn.QueryRow(ctx, findNotificationConfigurationSQL, notificationConfigurationID)
	var item FindNotificationConfigurationRow
	if err := row.Scan(&item.NotificationConfigurationID, &item.CreatedAt, &item.UpdatedAt, &item.Name, &item.URL, &item.Triggers, &item.DestinationType, &item.WorkspaceID, &item.Enabled); err != nil {
		return item, fmt.Errorf("query FindNotificationConfiguration: %w", err)
	}
	return item, nil
}

// FindNotificationConfigurationBatch implements Querier.FindNotificationConfigurationBatch.
func (q *DBQuerier) FindNotificationConfigurationBatch(batch genericBatch, notificationConfigurationID pgtype.Text) {
	batch.Queue(findNotificationConfigurationSQL, notificationConfigurationID)
}

// FindNotificationConfigurationScan implements Querier.FindNotificationConfigurationScan.
func (q *DBQuerier) FindNotificationConfigurationScan(results pgx.BatchResults) (FindNotificationConfigurationRow, error) {
	row := results.QueryRow()
	var item FindNotificationConfigurationRow
	if err := row.Scan(&item.NotificationConfigurationID, &item.CreatedAt, &item.UpdatedAt, &item.Name, &item.URL, &item.Triggers, &item.DestinationType, &item.WorkspaceID, &item.Enabled); err != nil {
		return item, fmt.Errorf("scan FindNotificationConfigurationBatch row: %w", err)
	}
	return item, nil
}

const updateNotificationConfigurationSQL = `UPDATE notification_configurations
SET
    enabled    = $1,
    name       = $2,
    triggers   = $3,
    url        = $4
WHERE notification_configuration_id = $5
RETURNING notification_configuration_id
;`

type UpdateNotificationConfigurationParams struct {
	Enabled                     bool
	Name                        pgtype.Text
	Triggers                    []string
	URL                         pgtype.Text
	NotificationConfigurationID pgtype.Text
}

// UpdateNotificationConfiguration implements Querier.UpdateNotificationConfiguration.
func (q *DBQuerier) UpdateNotificationConfiguration(ctx context.Context, params UpdateNotificationConfigurationParams) (pgtype.Text, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateNotificationConfiguration")
	row := q.conn.QueryRow(ctx, updateNotificationConfigurationSQL, params.Enabled, params.Name, params.Triggers, params.URL, params.NotificationConfigurationID)
	var item pgtype.Text
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query UpdateNotificationConfiguration: %w", err)
	}
	return item, nil
}

// UpdateNotificationConfigurationBatch implements Querier.UpdateNotificationConfigurationBatch.
func (q *DBQuerier) UpdateNotificationConfigurationBatch(batch genericBatch, params UpdateNotificationConfigurationParams) {
	batch.Queue(updateNotificationConfigurationSQL, params.Enabled, params.Name, params.Triggers, params.URL, params.NotificationConfigurationID)
}

// UpdateNotificationConfigurationScan implements Querier.UpdateNotificationConfigurationScan.
func (q *DBQuerier) UpdateNotificationConfigurationScan(results pgx.BatchResults) (pgtype.Text, error) {
	row := results.QueryRow()
	var item pgtype.Text
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan UpdateNotificationConfigurationBatch row: %w", err)
	}
	return item, nil
}

const deleteNotificationConfigurationSQL = `DELETE FROM notification_configurations
WHERE notification_configuration_id = $1
RETURNING notification_configuration_id
;`

// DeleteNotificationConfiguration implements Querier.DeleteNotificationConfiguration.
func (q *DBQuerier) DeleteNotificationConfiguration(ctx context.Context, notificationConfigurationID pgtype.Text) (pgtype.Text, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteNotificationConfiguration")
	row := q.conn.QueryRow(ctx, deleteNotificationConfigurationSQL, notificationConfigurationID)
	var item pgtype.Text
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query DeleteNotificationConfiguration: %w", err)
	}
	return item, nil
}

// DeleteNotificationConfigurationBatch implements Querier.DeleteNotificationConfigurationBatch.
func (q *DBQuerier) DeleteNotificationConfigurationBatch(batch genericBatch, notificationConfigurationID pgtype.Text) {
	batch.Queue(deleteNotificationConfigurationSQL, notificationConfigurationID)
}

// DeleteNotificationConfigurationScan implements Querier.DeleteNotificationConfigurationScan.
func (q *DBQuerier) DeleteNotificationConfigurationScan(results pgx.BatchResults) (pgtype.Text, error) {
	row := results.QueryRow()
	var item pgtype.Text
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan DeleteNotificationConfigurationBatch row: %w", err)
	}
	return item, nil
}
