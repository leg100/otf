// Code generated by pggen. DO NOT EDIT.

package pggen

import (
	"context"
	"fmt"

	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

// Querier is a typesafe Go interface backed by SQL queries.
//
// Methods ending with Batch enqueue a query to run later in a pgx.Batch. After
// calling SendBatch on pgx.Conn, pgxpool.Pool, or pgx.Tx, use the Scan methods
// to parse the results.
type Querier interface {
	InsertAgentToken(ctx context.Context, params InsertAgentTokenParams) (pgconn.CommandTag, error)
	// InsertAgentTokenBatch enqueues a InsertAgentToken query into batch to be executed
	// later by the batch.
	InsertAgentTokenBatch(batch genericBatch, params InsertAgentTokenParams)
	// InsertAgentTokenScan scans the result of an executed InsertAgentTokenBatch query.
	InsertAgentTokenScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindAgentTokenByID(ctx context.Context, tokenID pgtype.Text) (FindAgentTokenByIDRow, error)
	// FindAgentTokenByIDBatch enqueues a FindAgentTokenByID query into batch to be executed
	// later by the batch.
	FindAgentTokenByIDBatch(batch genericBatch, tokenID pgtype.Text)
	// FindAgentTokenByIDScan scans the result of an executed FindAgentTokenByIDBatch query.
	FindAgentTokenByIDScan(results pgx.BatchResults) (FindAgentTokenByIDRow, error)

	FindAgentTokens(ctx context.Context, organizationName pgtype.Text) ([]FindAgentTokensRow, error)
	// FindAgentTokensBatch enqueues a FindAgentTokens query into batch to be executed
	// later by the batch.
	FindAgentTokensBatch(batch genericBatch, organizationName pgtype.Text)
	// FindAgentTokensScan scans the result of an executed FindAgentTokensBatch query.
	FindAgentTokensScan(results pgx.BatchResults) ([]FindAgentTokensRow, error)

	DeleteAgentTokenByID(ctx context.Context, tokenID pgtype.Text) (pgtype.Text, error)
	// DeleteAgentTokenByIDBatch enqueues a DeleteAgentTokenByID query into batch to be executed
	// later by the batch.
	DeleteAgentTokenByIDBatch(batch genericBatch, tokenID pgtype.Text)
	// DeleteAgentTokenByIDScan scans the result of an executed DeleteAgentTokenByIDBatch query.
	DeleteAgentTokenByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertApply(ctx context.Context, runID pgtype.Text, status pgtype.Text) (pgconn.CommandTag, error)
	// InsertApplyBatch enqueues a InsertApply query into batch to be executed
	// later by the batch.
	InsertApplyBatch(batch genericBatch, runID pgtype.Text, status pgtype.Text)
	// InsertApplyScan scans the result of an executed InsertApplyBatch query.
	InsertApplyScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	UpdateAppliedChangesByID(ctx context.Context, params UpdateAppliedChangesByIDParams) (pgtype.Text, error)
	// UpdateAppliedChangesByIDBatch enqueues a UpdateAppliedChangesByID query into batch to be executed
	// later by the batch.
	UpdateAppliedChangesByIDBatch(batch genericBatch, params UpdateAppliedChangesByIDParams)
	// UpdateAppliedChangesByIDScan scans the result of an executed UpdateAppliedChangesByIDBatch query.
	UpdateAppliedChangesByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	UpdateApplyStatusByID(ctx context.Context, status pgtype.Text, runID pgtype.Text) (pgtype.Text, error)
	// UpdateApplyStatusByIDBatch enqueues a UpdateApplyStatusByID query into batch to be executed
	// later by the batch.
	UpdateApplyStatusByIDBatch(batch genericBatch, status pgtype.Text, runID pgtype.Text)
	// UpdateApplyStatusByIDScan scans the result of an executed UpdateApplyStatusByIDBatch query.
	UpdateApplyStatusByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertConfigurationVersion(ctx context.Context, params InsertConfigurationVersionParams) (pgconn.CommandTag, error)
	// InsertConfigurationVersionBatch enqueues a InsertConfigurationVersion query into batch to be executed
	// later by the batch.
	InsertConfigurationVersionBatch(batch genericBatch, params InsertConfigurationVersionParams)
	// InsertConfigurationVersionScan scans the result of an executed InsertConfigurationVersionBatch query.
	InsertConfigurationVersionScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	InsertConfigurationVersionStatusTimestamp(ctx context.Context, params InsertConfigurationVersionStatusTimestampParams) (InsertConfigurationVersionStatusTimestampRow, error)
	// InsertConfigurationVersionStatusTimestampBatch enqueues a InsertConfigurationVersionStatusTimestamp query into batch to be executed
	// later by the batch.
	InsertConfigurationVersionStatusTimestampBatch(batch genericBatch, params InsertConfigurationVersionStatusTimestampParams)
	// InsertConfigurationVersionStatusTimestampScan scans the result of an executed InsertConfigurationVersionStatusTimestampBatch query.
	InsertConfigurationVersionStatusTimestampScan(results pgx.BatchResults) (InsertConfigurationVersionStatusTimestampRow, error)

	// FindConfigurationVersions finds configuration_versions for a given workspace.
	// Results are paginated with limit and offset, and total count is returned.
	//
	FindConfigurationVersionsByWorkspaceID(ctx context.Context, params FindConfigurationVersionsByWorkspaceIDParams) ([]FindConfigurationVersionsByWorkspaceIDRow, error)
	// FindConfigurationVersionsByWorkspaceIDBatch enqueues a FindConfigurationVersionsByWorkspaceID query into batch to be executed
	// later by the batch.
	FindConfigurationVersionsByWorkspaceIDBatch(batch genericBatch, params FindConfigurationVersionsByWorkspaceIDParams)
	// FindConfigurationVersionsByWorkspaceIDScan scans the result of an executed FindConfigurationVersionsByWorkspaceIDBatch query.
	FindConfigurationVersionsByWorkspaceIDScan(results pgx.BatchResults) ([]FindConfigurationVersionsByWorkspaceIDRow, error)

	CountConfigurationVersionsByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) (int, error)
	// CountConfigurationVersionsByWorkspaceIDBatch enqueues a CountConfigurationVersionsByWorkspaceID query into batch to be executed
	// later by the batch.
	CountConfigurationVersionsByWorkspaceIDBatch(batch genericBatch, workspaceID pgtype.Text)
	// CountConfigurationVersionsByWorkspaceIDScan scans the result of an executed CountConfigurationVersionsByWorkspaceIDBatch query.
	CountConfigurationVersionsByWorkspaceIDScan(results pgx.BatchResults) (int, error)

	// FindConfigurationVersionByID finds a configuration_version by its id.
	//
	FindConfigurationVersionByID(ctx context.Context, configurationVersionID pgtype.Text) (FindConfigurationVersionByIDRow, error)
	// FindConfigurationVersionByIDBatch enqueues a FindConfigurationVersionByID query into batch to be executed
	// later by the batch.
	FindConfigurationVersionByIDBatch(batch genericBatch, configurationVersionID pgtype.Text)
	// FindConfigurationVersionByIDScan scans the result of an executed FindConfigurationVersionByIDBatch query.
	FindConfigurationVersionByIDScan(results pgx.BatchResults) (FindConfigurationVersionByIDRow, error)

	FindConfigurationVersionLatestByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) (FindConfigurationVersionLatestByWorkspaceIDRow, error)
	// FindConfigurationVersionLatestByWorkspaceIDBatch enqueues a FindConfigurationVersionLatestByWorkspaceID query into batch to be executed
	// later by the batch.
	FindConfigurationVersionLatestByWorkspaceIDBatch(batch genericBatch, workspaceID pgtype.Text)
	// FindConfigurationVersionLatestByWorkspaceIDScan scans the result of an executed FindConfigurationVersionLatestByWorkspaceIDBatch query.
	FindConfigurationVersionLatestByWorkspaceIDScan(results pgx.BatchResults) (FindConfigurationVersionLatestByWorkspaceIDRow, error)

	FindConfigurationVersionByIDForUpdate(ctx context.Context, configurationVersionID pgtype.Text) (FindConfigurationVersionByIDForUpdateRow, error)
	// FindConfigurationVersionByIDForUpdateBatch enqueues a FindConfigurationVersionByIDForUpdate query into batch to be executed
	// later by the batch.
	FindConfigurationVersionByIDForUpdateBatch(batch genericBatch, configurationVersionID pgtype.Text)
	// FindConfigurationVersionByIDForUpdateScan scans the result of an executed FindConfigurationVersionByIDForUpdateBatch query.
	FindConfigurationVersionByIDForUpdateScan(results pgx.BatchResults) (FindConfigurationVersionByIDForUpdateRow, error)

	// DownloadConfigurationVersion gets a configuration_version config
	// tarball.
	//
	DownloadConfigurationVersion(ctx context.Context, configurationVersionID pgtype.Text) ([]byte, error)
	// DownloadConfigurationVersionBatch enqueues a DownloadConfigurationVersion query into batch to be executed
	// later by the batch.
	DownloadConfigurationVersionBatch(batch genericBatch, configurationVersionID pgtype.Text)
	// DownloadConfigurationVersionScan scans the result of an executed DownloadConfigurationVersionBatch query.
	DownloadConfigurationVersionScan(results pgx.BatchResults) ([]byte, error)

	UpdateConfigurationVersionErroredByID(ctx context.Context, id pgtype.Text) (pgtype.Text, error)
	// UpdateConfigurationVersionErroredByIDBatch enqueues a UpdateConfigurationVersionErroredByID query into batch to be executed
	// later by the batch.
	UpdateConfigurationVersionErroredByIDBatch(batch genericBatch, id pgtype.Text)
	// UpdateConfigurationVersionErroredByIDScan scans the result of an executed UpdateConfigurationVersionErroredByIDBatch query.
	UpdateConfigurationVersionErroredByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	UpdateConfigurationVersionConfigByID(ctx context.Context, config []byte, id pgtype.Text) (pgtype.Text, error)
	// UpdateConfigurationVersionConfigByIDBatch enqueues a UpdateConfigurationVersionConfigByID query into batch to be executed
	// later by the batch.
	UpdateConfigurationVersionConfigByIDBatch(batch genericBatch, config []byte, id pgtype.Text)
	// UpdateConfigurationVersionConfigByIDScan scans the result of an executed UpdateConfigurationVersionConfigByIDBatch query.
	UpdateConfigurationVersionConfigByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	DeleteConfigurationVersionByID(ctx context.Context, id pgtype.Text) (pgtype.Text, error)
	// DeleteConfigurationVersionByIDBatch enqueues a DeleteConfigurationVersionByID query into batch to be executed
	// later by the batch.
	DeleteConfigurationVersionByIDBatch(batch genericBatch, id pgtype.Text)
	// DeleteConfigurationVersionByIDScan scans the result of an executed DeleteConfigurationVersionByIDBatch query.
	DeleteConfigurationVersionByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertIngressAttributes(ctx context.Context, params InsertIngressAttributesParams) (pgconn.CommandTag, error)
	// InsertIngressAttributesBatch enqueues a InsertIngressAttributes query into batch to be executed
	// later by the batch.
	InsertIngressAttributesBatch(batch genericBatch, params InsertIngressAttributesParams)
	// InsertIngressAttributesScan scans the result of an executed InsertIngressAttributesBatch query.
	InsertIngressAttributesScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	InsertModule(ctx context.Context, params InsertModuleParams) (pgconn.CommandTag, error)
	// InsertModuleBatch enqueues a InsertModule query into batch to be executed
	// later by the batch.
	InsertModuleBatch(batch genericBatch, params InsertModuleParams)
	// InsertModuleScan scans the result of an executed InsertModuleBatch query.
	InsertModuleScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	InsertModuleVersion(ctx context.Context, params InsertModuleVersionParams) (InsertModuleVersionRow, error)
	// InsertModuleVersionBatch enqueues a InsertModuleVersion query into batch to be executed
	// later by the batch.
	InsertModuleVersionBatch(batch genericBatch, params InsertModuleVersionParams)
	// InsertModuleVersionScan scans the result of an executed InsertModuleVersionBatch query.
	InsertModuleVersionScan(results pgx.BatchResults) (InsertModuleVersionRow, error)

	ListModulesByOrganization(ctx context.Context, organizationName pgtype.Text) ([]ListModulesByOrganizationRow, error)
	// ListModulesByOrganizationBatch enqueues a ListModulesByOrganization query into batch to be executed
	// later by the batch.
	ListModulesByOrganizationBatch(batch genericBatch, organizationName pgtype.Text)
	// ListModulesByOrganizationScan scans the result of an executed ListModulesByOrganizationBatch query.
	ListModulesByOrganizationScan(results pgx.BatchResults) ([]ListModulesByOrganizationRow, error)

	FindModuleByName(ctx context.Context, params FindModuleByNameParams) (FindModuleByNameRow, error)
	// FindModuleByNameBatch enqueues a FindModuleByName query into batch to be executed
	// later by the batch.
	FindModuleByNameBatch(batch genericBatch, params FindModuleByNameParams)
	// FindModuleByNameScan scans the result of an executed FindModuleByNameBatch query.
	FindModuleByNameScan(results pgx.BatchResults) (FindModuleByNameRow, error)

	FindModuleByID(ctx context.Context, id pgtype.Text) (FindModuleByIDRow, error)
	// FindModuleByIDBatch enqueues a FindModuleByID query into batch to be executed
	// later by the batch.
	FindModuleByIDBatch(batch genericBatch, id pgtype.Text)
	// FindModuleByIDScan scans the result of an executed FindModuleByIDBatch query.
	FindModuleByIDScan(results pgx.BatchResults) (FindModuleByIDRow, error)

	FindModuleByWebhookID(ctx context.Context, webhookID pgtype.UUID) (FindModuleByWebhookIDRow, error)
	// FindModuleByWebhookIDBatch enqueues a FindModuleByWebhookID query into batch to be executed
	// later by the batch.
	FindModuleByWebhookIDBatch(batch genericBatch, webhookID pgtype.UUID)
	// FindModuleByWebhookIDScan scans the result of an executed FindModuleByWebhookIDBatch query.
	FindModuleByWebhookIDScan(results pgx.BatchResults) (FindModuleByWebhookIDRow, error)

	FindModuleByModuleVersionID(ctx context.Context, moduleVersionID pgtype.Text) (FindModuleByModuleVersionIDRow, error)
	// FindModuleByModuleVersionIDBatch enqueues a FindModuleByModuleVersionID query into batch to be executed
	// later by the batch.
	FindModuleByModuleVersionIDBatch(batch genericBatch, moduleVersionID pgtype.Text)
	// FindModuleByModuleVersionIDScan scans the result of an executed FindModuleByModuleVersionIDBatch query.
	FindModuleByModuleVersionIDScan(results pgx.BatchResults) (FindModuleByModuleVersionIDRow, error)

	UpdateModuleStatusByID(ctx context.Context, status pgtype.Text, moduleID pgtype.Text) (pgtype.Text, error)
	// UpdateModuleStatusByIDBatch enqueues a UpdateModuleStatusByID query into batch to be executed
	// later by the batch.
	UpdateModuleStatusByIDBatch(batch genericBatch, status pgtype.Text, moduleID pgtype.Text)
	// UpdateModuleStatusByIDScan scans the result of an executed UpdateModuleStatusByIDBatch query.
	UpdateModuleStatusByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertModuleTarball(ctx context.Context, tarball []byte, moduleVersionID pgtype.Text) (pgtype.Text, error)
	// InsertModuleTarballBatch enqueues a InsertModuleTarball query into batch to be executed
	// later by the batch.
	InsertModuleTarballBatch(batch genericBatch, tarball []byte, moduleVersionID pgtype.Text)
	// InsertModuleTarballScan scans the result of an executed InsertModuleTarballBatch query.
	InsertModuleTarballScan(results pgx.BatchResults) (pgtype.Text, error)

	FindModuleTarball(ctx context.Context, moduleVersionID pgtype.Text) ([]byte, error)
	// FindModuleTarballBatch enqueues a FindModuleTarball query into batch to be executed
	// later by the batch.
	FindModuleTarballBatch(batch genericBatch, moduleVersionID pgtype.Text)
	// FindModuleTarballScan scans the result of an executed FindModuleTarballBatch query.
	FindModuleTarballScan(results pgx.BatchResults) ([]byte, error)

	UpdateModuleVersionStatusByID(ctx context.Context, params UpdateModuleVersionStatusByIDParams) (UpdateModuleVersionStatusByIDRow, error)
	// UpdateModuleVersionStatusByIDBatch enqueues a UpdateModuleVersionStatusByID query into batch to be executed
	// later by the batch.
	UpdateModuleVersionStatusByIDBatch(batch genericBatch, params UpdateModuleVersionStatusByIDParams)
	// UpdateModuleVersionStatusByIDScan scans the result of an executed UpdateModuleVersionStatusByIDBatch query.
	UpdateModuleVersionStatusByIDScan(results pgx.BatchResults) (UpdateModuleVersionStatusByIDRow, error)

	DeleteModuleByID(ctx context.Context, moduleID pgtype.Text) (pgtype.Text, error)
	// DeleteModuleByIDBatch enqueues a DeleteModuleByID query into batch to be executed
	// later by the batch.
	DeleteModuleByIDBatch(batch genericBatch, moduleID pgtype.Text)
	// DeleteModuleByIDScan scans the result of an executed DeleteModuleByIDBatch query.
	DeleteModuleByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	DeleteModuleVersionByID(ctx context.Context, moduleVersionID pgtype.Text) (pgtype.Text, error)
	// DeleteModuleVersionByIDBatch enqueues a DeleteModuleVersionByID query into batch to be executed
	// later by the batch.
	DeleteModuleVersionByIDBatch(batch genericBatch, moduleVersionID pgtype.Text)
	// DeleteModuleVersionByIDScan scans the result of an executed DeleteModuleVersionByIDBatch query.
	DeleteModuleVersionByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertNotificationConfiguration(ctx context.Context, params InsertNotificationConfigurationParams) (pgconn.CommandTag, error)
	// InsertNotificationConfigurationBatch enqueues a InsertNotificationConfiguration query into batch to be executed
	// later by the batch.
	InsertNotificationConfigurationBatch(batch genericBatch, params InsertNotificationConfigurationParams)
	// InsertNotificationConfigurationScan scans the result of an executed InsertNotificationConfigurationBatch query.
	InsertNotificationConfigurationScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindNotificationConfigurationsByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) ([]FindNotificationConfigurationsByWorkspaceIDRow, error)
	// FindNotificationConfigurationsByWorkspaceIDBatch enqueues a FindNotificationConfigurationsByWorkspaceID query into batch to be executed
	// later by the batch.
	FindNotificationConfigurationsByWorkspaceIDBatch(batch genericBatch, workspaceID pgtype.Text)
	// FindNotificationConfigurationsByWorkspaceIDScan scans the result of an executed FindNotificationConfigurationsByWorkspaceIDBatch query.
	FindNotificationConfigurationsByWorkspaceIDScan(results pgx.BatchResults) ([]FindNotificationConfigurationsByWorkspaceIDRow, error)

	FindAllNotificationConfigurations(ctx context.Context) ([]FindAllNotificationConfigurationsRow, error)
	// FindAllNotificationConfigurationsBatch enqueues a FindAllNotificationConfigurations query into batch to be executed
	// later by the batch.
	FindAllNotificationConfigurationsBatch(batch genericBatch)
	// FindAllNotificationConfigurationsScan scans the result of an executed FindAllNotificationConfigurationsBatch query.
	FindAllNotificationConfigurationsScan(results pgx.BatchResults) ([]FindAllNotificationConfigurationsRow, error)

	FindNotificationConfiguration(ctx context.Context, notificationConfigurationID pgtype.Text) (FindNotificationConfigurationRow, error)
	// FindNotificationConfigurationBatch enqueues a FindNotificationConfiguration query into batch to be executed
	// later by the batch.
	FindNotificationConfigurationBatch(batch genericBatch, notificationConfigurationID pgtype.Text)
	// FindNotificationConfigurationScan scans the result of an executed FindNotificationConfigurationBatch query.
	FindNotificationConfigurationScan(results pgx.BatchResults) (FindNotificationConfigurationRow, error)

	FindNotificationConfigurationForUpdate(ctx context.Context, notificationConfigurationID pgtype.Text) (FindNotificationConfigurationForUpdateRow, error)
	// FindNotificationConfigurationForUpdateBatch enqueues a FindNotificationConfigurationForUpdate query into batch to be executed
	// later by the batch.
	FindNotificationConfigurationForUpdateBatch(batch genericBatch, notificationConfigurationID pgtype.Text)
	// FindNotificationConfigurationForUpdateScan scans the result of an executed FindNotificationConfigurationForUpdateBatch query.
	FindNotificationConfigurationForUpdateScan(results pgx.BatchResults) (FindNotificationConfigurationForUpdateRow, error)

	UpdateNotificationConfigurationByID(ctx context.Context, params UpdateNotificationConfigurationByIDParams) (pgtype.Text, error)
	// UpdateNotificationConfigurationByIDBatch enqueues a UpdateNotificationConfigurationByID query into batch to be executed
	// later by the batch.
	UpdateNotificationConfigurationByIDBatch(batch genericBatch, params UpdateNotificationConfigurationByIDParams)
	// UpdateNotificationConfigurationByIDScan scans the result of an executed UpdateNotificationConfigurationByIDBatch query.
	UpdateNotificationConfigurationByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	DeleteNotificationConfigurationByID(ctx context.Context, notificationConfigurationID pgtype.Text) (pgtype.Text, error)
	// DeleteNotificationConfigurationByIDBatch enqueues a DeleteNotificationConfigurationByID query into batch to be executed
	// later by the batch.
	DeleteNotificationConfigurationByIDBatch(batch genericBatch, notificationConfigurationID pgtype.Text)
	// DeleteNotificationConfigurationByIDScan scans the result of an executed DeleteNotificationConfigurationByIDBatch query.
	DeleteNotificationConfigurationByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	FindOrganizationNameByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) (pgtype.Text, error)
	// FindOrganizationNameByWorkspaceIDBatch enqueues a FindOrganizationNameByWorkspaceID query into batch to be executed
	// later by the batch.
	FindOrganizationNameByWorkspaceIDBatch(batch genericBatch, workspaceID pgtype.Text)
	// FindOrganizationNameByWorkspaceIDScan scans the result of an executed FindOrganizationNameByWorkspaceIDBatch query.
	FindOrganizationNameByWorkspaceIDScan(results pgx.BatchResults) (pgtype.Text, error)

	FindOrganizationByName(ctx context.Context, name pgtype.Text) (FindOrganizationByNameRow, error)
	// FindOrganizationByNameBatch enqueues a FindOrganizationByName query into batch to be executed
	// later by the batch.
	FindOrganizationByNameBatch(batch genericBatch, name pgtype.Text)
	// FindOrganizationByNameScan scans the result of an executed FindOrganizationByNameBatch query.
	FindOrganizationByNameScan(results pgx.BatchResults) (FindOrganizationByNameRow, error)

	FindOrganizationByID(ctx context.Context, organizationID pgtype.Text) (FindOrganizationByIDRow, error)
	// FindOrganizationByIDBatch enqueues a FindOrganizationByID query into batch to be executed
	// later by the batch.
	FindOrganizationByIDBatch(batch genericBatch, organizationID pgtype.Text)
	// FindOrganizationByIDScan scans the result of an executed FindOrganizationByIDBatch query.
	FindOrganizationByIDScan(results pgx.BatchResults) (FindOrganizationByIDRow, error)

	FindOrganizationByNameForUpdate(ctx context.Context, name pgtype.Text) (FindOrganizationByNameForUpdateRow, error)
	// FindOrganizationByNameForUpdateBatch enqueues a FindOrganizationByNameForUpdate query into batch to be executed
	// later by the batch.
	FindOrganizationByNameForUpdateBatch(batch genericBatch, name pgtype.Text)
	// FindOrganizationByNameForUpdateScan scans the result of an executed FindOrganizationByNameForUpdateBatch query.
	FindOrganizationByNameForUpdateScan(results pgx.BatchResults) (FindOrganizationByNameForUpdateRow, error)

	FindOrganizations(ctx context.Context, params FindOrganizationsParams) ([]FindOrganizationsRow, error)
	// FindOrganizationsBatch enqueues a FindOrganizations query into batch to be executed
	// later by the batch.
	FindOrganizationsBatch(batch genericBatch, params FindOrganizationsParams)
	// FindOrganizationsScan scans the result of an executed FindOrganizationsBatch query.
	FindOrganizationsScan(results pgx.BatchResults) ([]FindOrganizationsRow, error)

	CountOrganizations(ctx context.Context, names []string) (int, error)
	// CountOrganizationsBatch enqueues a CountOrganizations query into batch to be executed
	// later by the batch.
	CountOrganizationsBatch(batch genericBatch, names []string)
	// CountOrganizationsScan scans the result of an executed CountOrganizationsBatch query.
	CountOrganizationsScan(results pgx.BatchResults) (int, error)

	InsertOrganization(ctx context.Context, params InsertOrganizationParams) (pgconn.CommandTag, error)
	// InsertOrganizationBatch enqueues a InsertOrganization query into batch to be executed
	// later by the batch.
	InsertOrganizationBatch(batch genericBatch, params InsertOrganizationParams)
	// InsertOrganizationScan scans the result of an executed InsertOrganizationBatch query.
	InsertOrganizationScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	UpdateOrganizationByName(ctx context.Context, params UpdateOrganizationByNameParams) (pgtype.Text, error)
	// UpdateOrganizationByNameBatch enqueues a UpdateOrganizationByName query into batch to be executed
	// later by the batch.
	UpdateOrganizationByNameBatch(batch genericBatch, params UpdateOrganizationByNameParams)
	// UpdateOrganizationByNameScan scans the result of an executed UpdateOrganizationByNameBatch query.
	UpdateOrganizationByNameScan(results pgx.BatchResults) (pgtype.Text, error)

	DeleteOrganizationByName(ctx context.Context, name pgtype.Text) (pgtype.Text, error)
	// DeleteOrganizationByNameBatch enqueues a DeleteOrganizationByName query into batch to be executed
	// later by the batch.
	DeleteOrganizationByNameBatch(batch genericBatch, name pgtype.Text)
	// DeleteOrganizationByNameScan scans the result of an executed DeleteOrganizationByNameBatch query.
	DeleteOrganizationByNameScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertPhaseStatusTimestamp(ctx context.Context, params InsertPhaseStatusTimestampParams) (pgconn.CommandTag, error)
	// InsertPhaseStatusTimestampBatch enqueues a InsertPhaseStatusTimestamp query into batch to be executed
	// later by the batch.
	InsertPhaseStatusTimestampBatch(batch genericBatch, params InsertPhaseStatusTimestampParams)
	// InsertPhaseStatusTimestampScan scans the result of an executed InsertPhaseStatusTimestampBatch query.
	InsertPhaseStatusTimestampScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	InsertLogChunk(ctx context.Context, params InsertLogChunkParams) (int, error)
	// InsertLogChunkBatch enqueues a InsertLogChunk query into batch to be executed
	// later by the batch.
	InsertLogChunkBatch(batch genericBatch, params InsertLogChunkParams)
	// InsertLogChunkScan scans the result of an executed InsertLogChunkBatch query.
	InsertLogChunkScan(results pgx.BatchResults) (int, error)

	// FindLogs retrieves all the logs for the given run and phase.
	//
	FindLogs(ctx context.Context, runID pgtype.Text, phase pgtype.Text) ([]byte, error)
	// FindLogsBatch enqueues a FindLogs query into batch to be executed
	// later by the batch.
	FindLogsBatch(batch genericBatch, runID pgtype.Text, phase pgtype.Text)
	// FindLogsScan scans the result of an executed FindLogsBatch query.
	FindLogsScan(results pgx.BatchResults) ([]byte, error)

	FindLogChunkByID(ctx context.Context, chunkID int) (FindLogChunkByIDRow, error)
	// FindLogChunkByIDBatch enqueues a FindLogChunkByID query into batch to be executed
	// later by the batch.
	FindLogChunkByIDBatch(batch genericBatch, chunkID int)
	// FindLogChunkByIDScan scans the result of an executed FindLogChunkByIDBatch query.
	FindLogChunkByIDScan(results pgx.BatchResults) (FindLogChunkByIDRow, error)

	InsertPlan(ctx context.Context, runID pgtype.Text, status pgtype.Text) (pgconn.CommandTag, error)
	// InsertPlanBatch enqueues a InsertPlan query into batch to be executed
	// later by the batch.
	InsertPlanBatch(batch genericBatch, runID pgtype.Text, status pgtype.Text)
	// InsertPlanScan scans the result of an executed InsertPlanBatch query.
	InsertPlanScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	UpdatePlanStatusByID(ctx context.Context, status pgtype.Text, runID pgtype.Text) (pgtype.Text, error)
	// UpdatePlanStatusByIDBatch enqueues a UpdatePlanStatusByID query into batch to be executed
	// later by the batch.
	UpdatePlanStatusByIDBatch(batch genericBatch, status pgtype.Text, runID pgtype.Text)
	// UpdatePlanStatusByIDScan scans the result of an executed UpdatePlanStatusByIDBatch query.
	UpdatePlanStatusByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	UpdatePlannedChangesByID(ctx context.Context, params UpdatePlannedChangesByIDParams) (pgtype.Text, error)
	// UpdatePlannedChangesByIDBatch enqueues a UpdatePlannedChangesByID query into batch to be executed
	// later by the batch.
	UpdatePlannedChangesByIDBatch(batch genericBatch, params UpdatePlannedChangesByIDParams)
	// UpdatePlannedChangesByIDScan scans the result of an executed UpdatePlannedChangesByIDBatch query.
	UpdatePlannedChangesByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	GetPlanBinByID(ctx context.Context, runID pgtype.Text) ([]byte, error)
	// GetPlanBinByIDBatch enqueues a GetPlanBinByID query into batch to be executed
	// later by the batch.
	GetPlanBinByIDBatch(batch genericBatch, runID pgtype.Text)
	// GetPlanBinByIDScan scans the result of an executed GetPlanBinByIDBatch query.
	GetPlanBinByIDScan(results pgx.BatchResults) ([]byte, error)

	GetPlanJSONByID(ctx context.Context, runID pgtype.Text) ([]byte, error)
	// GetPlanJSONByIDBatch enqueues a GetPlanJSONByID query into batch to be executed
	// later by the batch.
	GetPlanJSONByIDBatch(batch genericBatch, runID pgtype.Text)
	// GetPlanJSONByIDScan scans the result of an executed GetPlanJSONByIDBatch query.
	GetPlanJSONByIDScan(results pgx.BatchResults) ([]byte, error)

	UpdatePlanBinByID(ctx context.Context, planBin []byte, runID pgtype.Text) (pgtype.Text, error)
	// UpdatePlanBinByIDBatch enqueues a UpdatePlanBinByID query into batch to be executed
	// later by the batch.
	UpdatePlanBinByIDBatch(batch genericBatch, planBin []byte, runID pgtype.Text)
	// UpdatePlanBinByIDScan scans the result of an executed UpdatePlanBinByIDBatch query.
	UpdatePlanBinByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	UpdatePlanJSONByID(ctx context.Context, planJSON []byte, runID pgtype.Text) (pgtype.Text, error)
	// UpdatePlanJSONByIDBatch enqueues a UpdatePlanJSONByID query into batch to be executed
	// later by the batch.
	UpdatePlanJSONByIDBatch(batch genericBatch, planJSON []byte, runID pgtype.Text)
	// UpdatePlanJSONByIDScan scans the result of an executed UpdatePlanJSONByIDBatch query.
	UpdatePlanJSONByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertRepoConnection(ctx context.Context, params InsertRepoConnectionParams) (pgconn.CommandTag, error)
	// InsertRepoConnectionBatch enqueues a InsertRepoConnection query into batch to be executed
	// later by the batch.
	InsertRepoConnectionBatch(batch genericBatch, params InsertRepoConnectionParams)
	// InsertRepoConnectionScan scans the result of an executed InsertRepoConnectionBatch query.
	InsertRepoConnectionScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	CountRepoConnectionsByID(ctx context.Context, webhookID pgtype.UUID) (int, error)
	// CountRepoConnectionsByIDBatch enqueues a CountRepoConnectionsByID query into batch to be executed
	// later by the batch.
	CountRepoConnectionsByIDBatch(batch genericBatch, webhookID pgtype.UUID)
	// CountRepoConnectionsByIDScan scans the result of an executed CountRepoConnectionsByIDBatch query.
	CountRepoConnectionsByIDScan(results pgx.BatchResults) (int, error)

	DeleteWorkspaceConnectionByID(ctx context.Context, workspaceID pgtype.Text) (DeleteWorkspaceConnectionByIDRow, error)
	// DeleteWorkspaceConnectionByIDBatch enqueues a DeleteWorkspaceConnectionByID query into batch to be executed
	// later by the batch.
	DeleteWorkspaceConnectionByIDBatch(batch genericBatch, workspaceID pgtype.Text)
	// DeleteWorkspaceConnectionByIDScan scans the result of an executed DeleteWorkspaceConnectionByIDBatch query.
	DeleteWorkspaceConnectionByIDScan(results pgx.BatchResults) (DeleteWorkspaceConnectionByIDRow, error)

	DeleteModuleConnectionByID(ctx context.Context, id pgtype.Text) (DeleteModuleConnectionByIDRow, error)
	// DeleteModuleConnectionByIDBatch enqueues a DeleteModuleConnectionByID query into batch to be executed
	// later by the batch.
	DeleteModuleConnectionByIDBatch(batch genericBatch, id pgtype.Text)
	// DeleteModuleConnectionByIDScan scans the result of an executed DeleteModuleConnectionByIDBatch query.
	DeleteModuleConnectionByIDScan(results pgx.BatchResults) (DeleteModuleConnectionByIDRow, error)

	InsertRun(ctx context.Context, params InsertRunParams) (pgconn.CommandTag, error)
	// InsertRunBatch enqueues a InsertRun query into batch to be executed
	// later by the batch.
	InsertRunBatch(batch genericBatch, params InsertRunParams)
	// InsertRunScan scans the result of an executed InsertRunBatch query.
	InsertRunScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	InsertRunStatusTimestamp(ctx context.Context, params InsertRunStatusTimestampParams) (pgconn.CommandTag, error)
	// InsertRunStatusTimestampBatch enqueues a InsertRunStatusTimestamp query into batch to be executed
	// later by the batch.
	InsertRunStatusTimestampBatch(batch genericBatch, params InsertRunStatusTimestampParams)
	// InsertRunStatusTimestampScan scans the result of an executed InsertRunStatusTimestampBatch query.
	InsertRunStatusTimestampScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindRuns(ctx context.Context, params FindRunsParams) ([]FindRunsRow, error)
	// FindRunsBatch enqueues a FindRuns query into batch to be executed
	// later by the batch.
	FindRunsBatch(batch genericBatch, params FindRunsParams)
	// FindRunsScan scans the result of an executed FindRunsBatch query.
	FindRunsScan(results pgx.BatchResults) ([]FindRunsRow, error)

	CountRuns(ctx context.Context, params CountRunsParams) (int, error)
	// CountRunsBatch enqueues a CountRuns query into batch to be executed
	// later by the batch.
	CountRunsBatch(batch genericBatch, params CountRunsParams)
	// CountRunsScan scans the result of an executed CountRunsBatch query.
	CountRunsScan(results pgx.BatchResults) (int, error)

	FindRunByID(ctx context.Context, runID pgtype.Text) (FindRunByIDRow, error)
	// FindRunByIDBatch enqueues a FindRunByID query into batch to be executed
	// later by the batch.
	FindRunByIDBatch(batch genericBatch, runID pgtype.Text)
	// FindRunByIDScan scans the result of an executed FindRunByIDBatch query.
	FindRunByIDScan(results pgx.BatchResults) (FindRunByIDRow, error)

	FindRunByIDForUpdate(ctx context.Context, runID pgtype.Text) (FindRunByIDForUpdateRow, error)
	// FindRunByIDForUpdateBatch enqueues a FindRunByIDForUpdate query into batch to be executed
	// later by the batch.
	FindRunByIDForUpdateBatch(batch genericBatch, runID pgtype.Text)
	// FindRunByIDForUpdateScan scans the result of an executed FindRunByIDForUpdateBatch query.
	FindRunByIDForUpdateScan(results pgx.BatchResults) (FindRunByIDForUpdateRow, error)

	PutLockFile(ctx context.Context, lockFile []byte, runID pgtype.Text) (pgtype.Text, error)
	// PutLockFileBatch enqueues a PutLockFile query into batch to be executed
	// later by the batch.
	PutLockFileBatch(batch genericBatch, lockFile []byte, runID pgtype.Text)
	// PutLockFileScan scans the result of an executed PutLockFileBatch query.
	PutLockFileScan(results pgx.BatchResults) (pgtype.Text, error)

	GetLockFileByID(ctx context.Context, runID pgtype.Text) ([]byte, error)
	// GetLockFileByIDBatch enqueues a GetLockFileByID query into batch to be executed
	// later by the batch.
	GetLockFileByIDBatch(batch genericBatch, runID pgtype.Text)
	// GetLockFileByIDScan scans the result of an executed GetLockFileByIDBatch query.
	GetLockFileByIDScan(results pgx.BatchResults) ([]byte, error)

	UpdateRunStatus(ctx context.Context, status pgtype.Text, id pgtype.Text) (pgtype.Text, error)
	// UpdateRunStatusBatch enqueues a UpdateRunStatus query into batch to be executed
	// later by the batch.
	UpdateRunStatusBatch(batch genericBatch, status pgtype.Text, id pgtype.Text)
	// UpdateRunStatusScan scans the result of an executed UpdateRunStatusBatch query.
	UpdateRunStatusScan(results pgx.BatchResults) (pgtype.Text, error)

	UpdateRunForceCancelAvailableAt(ctx context.Context, forceCancelAvailableAt pgtype.Timestamptz, id pgtype.Text) (pgtype.Text, error)
	// UpdateRunForceCancelAvailableAtBatch enqueues a UpdateRunForceCancelAvailableAt query into batch to be executed
	// later by the batch.
	UpdateRunForceCancelAvailableAtBatch(batch genericBatch, forceCancelAvailableAt pgtype.Timestamptz, id pgtype.Text)
	// UpdateRunForceCancelAvailableAtScan scans the result of an executed UpdateRunForceCancelAvailableAtBatch query.
	UpdateRunForceCancelAvailableAtScan(results pgx.BatchResults) (pgtype.Text, error)

	DeleteRunByID(ctx context.Context, runID pgtype.Text) (pgtype.Text, error)
	// DeleteRunByIDBatch enqueues a DeleteRunByID query into batch to be executed
	// later by the batch.
	DeleteRunByIDBatch(batch genericBatch, runID pgtype.Text)
	// DeleteRunByIDScan scans the result of an executed DeleteRunByIDBatch query.
	DeleteRunByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertStateVersion(ctx context.Context, params InsertStateVersionParams) (pgconn.CommandTag, error)
	// InsertStateVersionBatch enqueues a InsertStateVersion query into batch to be executed
	// later by the batch.
	InsertStateVersionBatch(batch genericBatch, params InsertStateVersionParams)
	// InsertStateVersionScan scans the result of an executed InsertStateVersionBatch query.
	InsertStateVersionScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindStateVersionsByWorkspaceID(ctx context.Context, params FindStateVersionsByWorkspaceIDParams) ([]FindStateVersionsByWorkspaceIDRow, error)
	// FindStateVersionsByWorkspaceIDBatch enqueues a FindStateVersionsByWorkspaceID query into batch to be executed
	// later by the batch.
	FindStateVersionsByWorkspaceIDBatch(batch genericBatch, params FindStateVersionsByWorkspaceIDParams)
	// FindStateVersionsByWorkspaceIDScan scans the result of an executed FindStateVersionsByWorkspaceIDBatch query.
	FindStateVersionsByWorkspaceIDScan(results pgx.BatchResults) ([]FindStateVersionsByWorkspaceIDRow, error)

	CountStateVersionsByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) (int, error)
	// CountStateVersionsByWorkspaceIDBatch enqueues a CountStateVersionsByWorkspaceID query into batch to be executed
	// later by the batch.
	CountStateVersionsByWorkspaceIDBatch(batch genericBatch, workspaceID pgtype.Text)
	// CountStateVersionsByWorkspaceIDScan scans the result of an executed CountStateVersionsByWorkspaceIDBatch query.
	CountStateVersionsByWorkspaceIDScan(results pgx.BatchResults) (int, error)

	FindStateVersionByID(ctx context.Context, id pgtype.Text) (FindStateVersionByIDRow, error)
	// FindStateVersionByIDBatch enqueues a FindStateVersionByID query into batch to be executed
	// later by the batch.
	FindStateVersionByIDBatch(batch genericBatch, id pgtype.Text)
	// FindStateVersionByIDScan scans the result of an executed FindStateVersionByIDBatch query.
	FindStateVersionByIDScan(results pgx.BatchResults) (FindStateVersionByIDRow, error)

	FindCurrentStateVersionByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) (FindCurrentStateVersionByWorkspaceIDRow, error)
	// FindCurrentStateVersionByWorkspaceIDBatch enqueues a FindCurrentStateVersionByWorkspaceID query into batch to be executed
	// later by the batch.
	FindCurrentStateVersionByWorkspaceIDBatch(batch genericBatch, workspaceID pgtype.Text)
	// FindCurrentStateVersionByWorkspaceIDScan scans the result of an executed FindCurrentStateVersionByWorkspaceIDBatch query.
	FindCurrentStateVersionByWorkspaceIDScan(results pgx.BatchResults) (FindCurrentStateVersionByWorkspaceIDRow, error)

	FindStateVersionStateByID(ctx context.Context, id pgtype.Text) ([]byte, error)
	// FindStateVersionStateByIDBatch enqueues a FindStateVersionStateByID query into batch to be executed
	// later by the batch.
	FindStateVersionStateByIDBatch(batch genericBatch, id pgtype.Text)
	// FindStateVersionStateByIDScan scans the result of an executed FindStateVersionStateByIDBatch query.
	FindStateVersionStateByIDScan(results pgx.BatchResults) ([]byte, error)

	DeleteStateVersionByID(ctx context.Context, stateVersionID pgtype.Text) (pgtype.Text, error)
	// DeleteStateVersionByIDBatch enqueues a DeleteStateVersionByID query into batch to be executed
	// later by the batch.
	DeleteStateVersionByIDBatch(batch genericBatch, stateVersionID pgtype.Text)
	// DeleteStateVersionByIDScan scans the result of an executed DeleteStateVersionByIDBatch query.
	DeleteStateVersionByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertStateVersionOutput(ctx context.Context, params InsertStateVersionOutputParams) (pgconn.CommandTag, error)
	// InsertStateVersionOutputBatch enqueues a InsertStateVersionOutput query into batch to be executed
	// later by the batch.
	InsertStateVersionOutputBatch(batch genericBatch, params InsertStateVersionOutputParams)
	// InsertStateVersionOutputScan scans the result of an executed InsertStateVersionOutputBatch query.
	InsertStateVersionOutputScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindStateVersionOutputByID(ctx context.Context, id pgtype.Text) (FindStateVersionOutputByIDRow, error)
	// FindStateVersionOutputByIDBatch enqueues a FindStateVersionOutputByID query into batch to be executed
	// later by the batch.
	FindStateVersionOutputByIDBatch(batch genericBatch, id pgtype.Text)
	// FindStateVersionOutputByIDScan scans the result of an executed FindStateVersionOutputByIDBatch query.
	FindStateVersionOutputByIDScan(results pgx.BatchResults) (FindStateVersionOutputByIDRow, error)

	InsertTag(ctx context.Context, params InsertTagParams) (pgconn.CommandTag, error)
	// InsertTagBatch enqueues a InsertTag query into batch to be executed
	// later by the batch.
	InsertTagBatch(batch genericBatch, params InsertTagParams)
	// InsertTagScan scans the result of an executed InsertTagBatch query.
	InsertTagScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	InsertWorkspaceTag(ctx context.Context, tagID pgtype.Text, workspaceID pgtype.Text) (pgtype.Text, error)
	// InsertWorkspaceTagBatch enqueues a InsertWorkspaceTag query into batch to be executed
	// later by the batch.
	InsertWorkspaceTagBatch(batch genericBatch, tagID pgtype.Text, workspaceID pgtype.Text)
	// InsertWorkspaceTagScan scans the result of an executed InsertWorkspaceTagBatch query.
	InsertWorkspaceTagScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertWorkspaceTagByName(ctx context.Context, workspaceID pgtype.Text, tagName pgtype.Text) (pgtype.Text, error)
	// InsertWorkspaceTagByNameBatch enqueues a InsertWorkspaceTagByName query into batch to be executed
	// later by the batch.
	InsertWorkspaceTagByNameBatch(batch genericBatch, workspaceID pgtype.Text, tagName pgtype.Text)
	// InsertWorkspaceTagByNameScan scans the result of an executed InsertWorkspaceTagByNameBatch query.
	InsertWorkspaceTagByNameScan(results pgx.BatchResults) (pgtype.Text, error)

	FindTags(ctx context.Context, params FindTagsParams) ([]FindTagsRow, error)
	// FindTagsBatch enqueues a FindTags query into batch to be executed
	// later by the batch.
	FindTagsBatch(batch genericBatch, params FindTagsParams)
	// FindTagsScan scans the result of an executed FindTagsBatch query.
	FindTagsScan(results pgx.BatchResults) ([]FindTagsRow, error)

	FindWorkspaceTags(ctx context.Context, params FindWorkspaceTagsParams) ([]FindWorkspaceTagsRow, error)
	// FindWorkspaceTagsBatch enqueues a FindWorkspaceTags query into batch to be executed
	// later by the batch.
	FindWorkspaceTagsBatch(batch genericBatch, params FindWorkspaceTagsParams)
	// FindWorkspaceTagsScan scans the result of an executed FindWorkspaceTagsBatch query.
	FindWorkspaceTagsScan(results pgx.BatchResults) ([]FindWorkspaceTagsRow, error)

	FindTagByName(ctx context.Context, name pgtype.Text, organizationName pgtype.Text) (FindTagByNameRow, error)
	// FindTagByNameBatch enqueues a FindTagByName query into batch to be executed
	// later by the batch.
	FindTagByNameBatch(batch genericBatch, name pgtype.Text, organizationName pgtype.Text)
	// FindTagByNameScan scans the result of an executed FindTagByNameBatch query.
	FindTagByNameScan(results pgx.BatchResults) (FindTagByNameRow, error)

	FindTagByID(ctx context.Context, tagID pgtype.Text, organizationName pgtype.Text) (FindTagByIDRow, error)
	// FindTagByIDBatch enqueues a FindTagByID query into batch to be executed
	// later by the batch.
	FindTagByIDBatch(batch genericBatch, tagID pgtype.Text, organizationName pgtype.Text)
	// FindTagByIDScan scans the result of an executed FindTagByIDBatch query.
	FindTagByIDScan(results pgx.BatchResults) (FindTagByIDRow, error)

	CountTags(ctx context.Context, organizationName pgtype.Text) (int, error)
	// CountTagsBatch enqueues a CountTags query into batch to be executed
	// later by the batch.
	CountTagsBatch(batch genericBatch, organizationName pgtype.Text)
	// CountTagsScan scans the result of an executed CountTagsBatch query.
	CountTagsScan(results pgx.BatchResults) (int, error)

	CountWorkspaceTags(ctx context.Context, workspaceID pgtype.Text) (int, error)
	// CountWorkspaceTagsBatch enqueues a CountWorkspaceTags query into batch to be executed
	// later by the batch.
	CountWorkspaceTagsBatch(batch genericBatch, workspaceID pgtype.Text)
	// CountWorkspaceTagsScan scans the result of an executed CountWorkspaceTagsBatch query.
	CountWorkspaceTagsScan(results pgx.BatchResults) (int, error)

	DeleteTag(ctx context.Context, tagID pgtype.Text, organizationName pgtype.Text) (pgtype.Text, error)
	// DeleteTagBatch enqueues a DeleteTag query into batch to be executed
	// later by the batch.
	DeleteTagBatch(batch genericBatch, tagID pgtype.Text, organizationName pgtype.Text)
	// DeleteTagScan scans the result of an executed DeleteTagBatch query.
	DeleteTagScan(results pgx.BatchResults) (pgtype.Text, error)

	DeleteWorkspaceTag(ctx context.Context, workspaceID pgtype.Text, tagID pgtype.Text) (pgtype.Text, error)
	// DeleteWorkspaceTagBatch enqueues a DeleteWorkspaceTag query into batch to be executed
	// later by the batch.
	DeleteWorkspaceTagBatch(batch genericBatch, workspaceID pgtype.Text, tagID pgtype.Text)
	// DeleteWorkspaceTagScan scans the result of an executed DeleteWorkspaceTagBatch query.
	DeleteWorkspaceTagScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertTeam(ctx context.Context, params InsertTeamParams) (pgconn.CommandTag, error)
	// InsertTeamBatch enqueues a InsertTeam query into batch to be executed
	// later by the batch.
	InsertTeamBatch(batch genericBatch, params InsertTeamParams)
	// InsertTeamScan scans the result of an executed InsertTeamBatch query.
	InsertTeamScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindTeamsByOrg(ctx context.Context, organizationName pgtype.Text) ([]FindTeamsByOrgRow, error)
	// FindTeamsByOrgBatch enqueues a FindTeamsByOrg query into batch to be executed
	// later by the batch.
	FindTeamsByOrgBatch(batch genericBatch, organizationName pgtype.Text)
	// FindTeamsByOrgScan scans the result of an executed FindTeamsByOrgBatch query.
	FindTeamsByOrgScan(results pgx.BatchResults) ([]FindTeamsByOrgRow, error)

	FindTeamByName(ctx context.Context, name pgtype.Text, organizationName pgtype.Text) (FindTeamByNameRow, error)
	// FindTeamByNameBatch enqueues a FindTeamByName query into batch to be executed
	// later by the batch.
	FindTeamByNameBatch(batch genericBatch, name pgtype.Text, organizationName pgtype.Text)
	// FindTeamByNameScan scans the result of an executed FindTeamByNameBatch query.
	FindTeamByNameScan(results pgx.BatchResults) (FindTeamByNameRow, error)

	FindTeamByID(ctx context.Context, teamID pgtype.Text) (FindTeamByIDRow, error)
	// FindTeamByIDBatch enqueues a FindTeamByID query into batch to be executed
	// later by the batch.
	FindTeamByIDBatch(batch genericBatch, teamID pgtype.Text)
	// FindTeamByIDScan scans the result of an executed FindTeamByIDBatch query.
	FindTeamByIDScan(results pgx.BatchResults) (FindTeamByIDRow, error)

	FindTeamByIDForUpdate(ctx context.Context, teamID pgtype.Text) (FindTeamByIDForUpdateRow, error)
	// FindTeamByIDForUpdateBatch enqueues a FindTeamByIDForUpdate query into batch to be executed
	// later by the batch.
	FindTeamByIDForUpdateBatch(batch genericBatch, teamID pgtype.Text)
	// FindTeamByIDForUpdateScan scans the result of an executed FindTeamByIDForUpdateBatch query.
	FindTeamByIDForUpdateScan(results pgx.BatchResults) (FindTeamByIDForUpdateRow, error)

	UpdateTeamByID(ctx context.Context, params UpdateTeamByIDParams) (pgtype.Text, error)
	// UpdateTeamByIDBatch enqueues a UpdateTeamByID query into batch to be executed
	// later by the batch.
	UpdateTeamByIDBatch(batch genericBatch, params UpdateTeamByIDParams)
	// UpdateTeamByIDScan scans the result of an executed UpdateTeamByIDBatch query.
	UpdateTeamByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	DeleteTeamByID(ctx context.Context, teamID pgtype.Text) (pgtype.Text, error)
	// DeleteTeamByIDBatch enqueues a DeleteTeamByID query into batch to be executed
	// later by the batch.
	DeleteTeamByIDBatch(batch genericBatch, teamID pgtype.Text)
	// DeleteTeamByIDScan scans the result of an executed DeleteTeamByIDBatch query.
	DeleteTeamByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertTeamMembership(ctx context.Context, usernames []string, teamID pgtype.Text) ([]pgtype.Text, error)
	// InsertTeamMembershipBatch enqueues a InsertTeamMembership query into batch to be executed
	// later by the batch.
	InsertTeamMembershipBatch(batch genericBatch, usernames []string, teamID pgtype.Text)
	// InsertTeamMembershipScan scans the result of an executed InsertTeamMembershipBatch query.
	InsertTeamMembershipScan(results pgx.BatchResults) ([]pgtype.Text, error)

	DeleteTeamMembership(ctx context.Context, usernames []string, teamID pgtype.Text) ([]pgtype.Text, error)
	// DeleteTeamMembershipBatch enqueues a DeleteTeamMembership query into batch to be executed
	// later by the batch.
	DeleteTeamMembershipBatch(batch genericBatch, usernames []string, teamID pgtype.Text)
	// DeleteTeamMembershipScan scans the result of an executed DeleteTeamMembershipBatch query.
	DeleteTeamMembershipScan(results pgx.BatchResults) ([]pgtype.Text, error)

	InsertToken(ctx context.Context, params InsertTokenParams) (pgconn.CommandTag, error)
	// InsertTokenBatch enqueues a InsertToken query into batch to be executed
	// later by the batch.
	InsertTokenBatch(batch genericBatch, params InsertTokenParams)
	// InsertTokenScan scans the result of an executed InsertTokenBatch query.
	InsertTokenScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindTokensByUsername(ctx context.Context, username pgtype.Text) ([]FindTokensByUsernameRow, error)
	// FindTokensByUsernameBatch enqueues a FindTokensByUsername query into batch to be executed
	// later by the batch.
	FindTokensByUsernameBatch(batch genericBatch, username pgtype.Text)
	// FindTokensByUsernameScan scans the result of an executed FindTokensByUsernameBatch query.
	FindTokensByUsernameScan(results pgx.BatchResults) ([]FindTokensByUsernameRow, error)

	FindTokenByID(ctx context.Context, tokenID pgtype.Text) (FindTokenByIDRow, error)
	// FindTokenByIDBatch enqueues a FindTokenByID query into batch to be executed
	// later by the batch.
	FindTokenByIDBatch(batch genericBatch, tokenID pgtype.Text)
	// FindTokenByIDScan scans the result of an executed FindTokenByIDBatch query.
	FindTokenByIDScan(results pgx.BatchResults) (FindTokenByIDRow, error)

	DeleteTokenByID(ctx context.Context, tokenID pgtype.Text) (pgtype.Text, error)
	// DeleteTokenByIDBatch enqueues a DeleteTokenByID query into batch to be executed
	// later by the batch.
	DeleteTokenByIDBatch(batch genericBatch, tokenID pgtype.Text)
	// DeleteTokenByIDScan scans the result of an executed DeleteTokenByIDBatch query.
	DeleteTokenByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertUser(ctx context.Context, params InsertUserParams) (pgconn.CommandTag, error)
	// InsertUserBatch enqueues a InsertUser query into batch to be executed
	// later by the batch.
	InsertUserBatch(batch genericBatch, params InsertUserParams)
	// InsertUserScan scans the result of an executed InsertUserBatch query.
	InsertUserScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindUsers(ctx context.Context) ([]FindUsersRow, error)
	// FindUsersBatch enqueues a FindUsers query into batch to be executed
	// later by the batch.
	FindUsersBatch(batch genericBatch)
	// FindUsersScan scans the result of an executed FindUsersBatch query.
	FindUsersScan(results pgx.BatchResults) ([]FindUsersRow, error)

	FindUsersByOrganization(ctx context.Context, organizationName pgtype.Text) ([]FindUsersByOrganizationRow, error)
	// FindUsersByOrganizationBatch enqueues a FindUsersByOrganization query into batch to be executed
	// later by the batch.
	FindUsersByOrganizationBatch(batch genericBatch, organizationName pgtype.Text)
	// FindUsersByOrganizationScan scans the result of an executed FindUsersByOrganizationBatch query.
	FindUsersByOrganizationScan(results pgx.BatchResults) ([]FindUsersByOrganizationRow, error)

	FindUsersByTeamID(ctx context.Context, teamID pgtype.Text) ([]FindUsersByTeamIDRow, error)
	// FindUsersByTeamIDBatch enqueues a FindUsersByTeamID query into batch to be executed
	// later by the batch.
	FindUsersByTeamIDBatch(batch genericBatch, teamID pgtype.Text)
	// FindUsersByTeamIDScan scans the result of an executed FindUsersByTeamIDBatch query.
	FindUsersByTeamIDScan(results pgx.BatchResults) ([]FindUsersByTeamIDRow, error)

	FindUserByID(ctx context.Context, userID pgtype.Text) (FindUserByIDRow, error)
	// FindUserByIDBatch enqueues a FindUserByID query into batch to be executed
	// later by the batch.
	FindUserByIDBatch(batch genericBatch, userID pgtype.Text)
	// FindUserByIDScan scans the result of an executed FindUserByIDBatch query.
	FindUserByIDScan(results pgx.BatchResults) (FindUserByIDRow, error)

	FindUserByUsername(ctx context.Context, username pgtype.Text) (FindUserByUsernameRow, error)
	// FindUserByUsernameBatch enqueues a FindUserByUsername query into batch to be executed
	// later by the batch.
	FindUserByUsernameBatch(batch genericBatch, username pgtype.Text)
	// FindUserByUsernameScan scans the result of an executed FindUserByUsernameBatch query.
	FindUserByUsernameScan(results pgx.BatchResults) (FindUserByUsernameRow, error)

	FindUserByAuthenticationTokenID(ctx context.Context, tokenID pgtype.Text) (FindUserByAuthenticationTokenIDRow, error)
	// FindUserByAuthenticationTokenIDBatch enqueues a FindUserByAuthenticationTokenID query into batch to be executed
	// later by the batch.
	FindUserByAuthenticationTokenIDBatch(batch genericBatch, tokenID pgtype.Text)
	// FindUserByAuthenticationTokenIDScan scans the result of an executed FindUserByAuthenticationTokenIDBatch query.
	FindUserByAuthenticationTokenIDScan(results pgx.BatchResults) (FindUserByAuthenticationTokenIDRow, error)

	UpdateUserSiteAdmins(ctx context.Context, usernames []string) ([]pgtype.Text, error)
	// UpdateUserSiteAdminsBatch enqueues a UpdateUserSiteAdmins query into batch to be executed
	// later by the batch.
	UpdateUserSiteAdminsBatch(batch genericBatch, usernames []string)
	// UpdateUserSiteAdminsScan scans the result of an executed UpdateUserSiteAdminsBatch query.
	UpdateUserSiteAdminsScan(results pgx.BatchResults) ([]pgtype.Text, error)

	ResetUserSiteAdmins(ctx context.Context) ([]pgtype.Text, error)
	// ResetUserSiteAdminsBatch enqueues a ResetUserSiteAdmins query into batch to be executed
	// later by the batch.
	ResetUserSiteAdminsBatch(batch genericBatch)
	// ResetUserSiteAdminsScan scans the result of an executed ResetUserSiteAdminsBatch query.
	ResetUserSiteAdminsScan(results pgx.BatchResults) ([]pgtype.Text, error)

	DeleteUserByID(ctx context.Context, userID pgtype.Text) (pgtype.Text, error)
	// DeleteUserByIDBatch enqueues a DeleteUserByID query into batch to be executed
	// later by the batch.
	DeleteUserByIDBatch(batch genericBatch, userID pgtype.Text)
	// DeleteUserByIDScan scans the result of an executed DeleteUserByIDBatch query.
	DeleteUserByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	DeleteUserByUsername(ctx context.Context, username pgtype.Text) (pgtype.Text, error)
	// DeleteUserByUsernameBatch enqueues a DeleteUserByUsername query into batch to be executed
	// later by the batch.
	DeleteUserByUsernameBatch(batch genericBatch, username pgtype.Text)
	// DeleteUserByUsernameScan scans the result of an executed DeleteUserByUsernameBatch query.
	DeleteUserByUsernameScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertVariable(ctx context.Context, params InsertVariableParams) (pgconn.CommandTag, error)
	// InsertVariableBatch enqueues a InsertVariable query into batch to be executed
	// later by the batch.
	InsertVariableBatch(batch genericBatch, params InsertVariableParams)
	// InsertVariableScan scans the result of an executed InsertVariableBatch query.
	InsertVariableScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindVariables(ctx context.Context, workspaceID pgtype.Text) ([]FindVariablesRow, error)
	// FindVariablesBatch enqueues a FindVariables query into batch to be executed
	// later by the batch.
	FindVariablesBatch(batch genericBatch, workspaceID pgtype.Text)
	// FindVariablesScan scans the result of an executed FindVariablesBatch query.
	FindVariablesScan(results pgx.BatchResults) ([]FindVariablesRow, error)

	FindVariable(ctx context.Context, variableID pgtype.Text) (FindVariableRow, error)
	// FindVariableBatch enqueues a FindVariable query into batch to be executed
	// later by the batch.
	FindVariableBatch(batch genericBatch, variableID pgtype.Text)
	// FindVariableScan scans the result of an executed FindVariableBatch query.
	FindVariableScan(results pgx.BatchResults) (FindVariableRow, error)

	FindVariableForUpdate(ctx context.Context, variableID pgtype.Text) (FindVariableForUpdateRow, error)
	// FindVariableForUpdateBatch enqueues a FindVariableForUpdate query into batch to be executed
	// later by the batch.
	FindVariableForUpdateBatch(batch genericBatch, variableID pgtype.Text)
	// FindVariableForUpdateScan scans the result of an executed FindVariableForUpdateBatch query.
	FindVariableForUpdateScan(results pgx.BatchResults) (FindVariableForUpdateRow, error)

	UpdateVariableByID(ctx context.Context, params UpdateVariableByIDParams) (pgtype.Text, error)
	// UpdateVariableByIDBatch enqueues a UpdateVariableByID query into batch to be executed
	// later by the batch.
	UpdateVariableByIDBatch(batch genericBatch, params UpdateVariableByIDParams)
	// UpdateVariableByIDScan scans the result of an executed UpdateVariableByIDBatch query.
	UpdateVariableByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	DeleteVariableByID(ctx context.Context, variableID pgtype.Text) (DeleteVariableByIDRow, error)
	// DeleteVariableByIDBatch enqueues a DeleteVariableByID query into batch to be executed
	// later by the batch.
	DeleteVariableByIDBatch(batch genericBatch, variableID pgtype.Text)
	// DeleteVariableByIDScan scans the result of an executed DeleteVariableByIDBatch query.
	DeleteVariableByIDScan(results pgx.BatchResults) (DeleteVariableByIDRow, error)

	InsertVCSProvider(ctx context.Context, params InsertVCSProviderParams) (pgconn.CommandTag, error)
	// InsertVCSProviderBatch enqueues a InsertVCSProvider query into batch to be executed
	// later by the batch.
	InsertVCSProviderBatch(batch genericBatch, params InsertVCSProviderParams)
	// InsertVCSProviderScan scans the result of an executed InsertVCSProviderBatch query.
	InsertVCSProviderScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindVCSProviders(ctx context.Context, organizationName pgtype.Text) ([]FindVCSProvidersRow, error)
	// FindVCSProvidersBatch enqueues a FindVCSProviders query into batch to be executed
	// later by the batch.
	FindVCSProvidersBatch(batch genericBatch, organizationName pgtype.Text)
	// FindVCSProvidersScan scans the result of an executed FindVCSProvidersBatch query.
	FindVCSProvidersScan(results pgx.BatchResults) ([]FindVCSProvidersRow, error)

	FindVCSProvider(ctx context.Context, vcsProviderID pgtype.Text) (FindVCSProviderRow, error)
	// FindVCSProviderBatch enqueues a FindVCSProvider query into batch to be executed
	// later by the batch.
	FindVCSProviderBatch(batch genericBatch, vcsProviderID pgtype.Text)
	// FindVCSProviderScan scans the result of an executed FindVCSProviderBatch query.
	FindVCSProviderScan(results pgx.BatchResults) (FindVCSProviderRow, error)

	DeleteVCSProviderByID(ctx context.Context, vcsProviderID pgtype.Text) (pgtype.Text, error)
	// DeleteVCSProviderByIDBatch enqueues a DeleteVCSProviderByID query into batch to be executed
	// later by the batch.
	DeleteVCSProviderByIDBatch(batch genericBatch, vcsProviderID pgtype.Text)
	// DeleteVCSProviderByIDScan scans the result of an executed DeleteVCSProviderByIDBatch query.
	DeleteVCSProviderByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertWebhook(ctx context.Context, params InsertWebhookParams) (InsertWebhookRow, error)
	// InsertWebhookBatch enqueues a InsertWebhook query into batch to be executed
	// later by the batch.
	InsertWebhookBatch(batch genericBatch, params InsertWebhookParams)
	// InsertWebhookScan scans the result of an executed InsertWebhookBatch query.
	InsertWebhookScan(results pgx.BatchResults) (InsertWebhookRow, error)

	UpdateWebhookVCSID(ctx context.Context, vcsID pgtype.Text, webhookID pgtype.UUID) (UpdateWebhookVCSIDRow, error)
	// UpdateWebhookVCSIDBatch enqueues a UpdateWebhookVCSID query into batch to be executed
	// later by the batch.
	UpdateWebhookVCSIDBatch(batch genericBatch, vcsID pgtype.Text, webhookID pgtype.UUID)
	// UpdateWebhookVCSIDScan scans the result of an executed UpdateWebhookVCSIDBatch query.
	UpdateWebhookVCSIDScan(results pgx.BatchResults) (UpdateWebhookVCSIDRow, error)

	FindWebhookByID(ctx context.Context, webhookID pgtype.UUID) (FindWebhookByIDRow, error)
	// FindWebhookByIDBatch enqueues a FindWebhookByID query into batch to be executed
	// later by the batch.
	FindWebhookByIDBatch(batch genericBatch, webhookID pgtype.UUID)
	// FindWebhookByIDScan scans the result of an executed FindWebhookByIDBatch query.
	FindWebhookByIDScan(results pgx.BatchResults) (FindWebhookByIDRow, error)

	FindWebhookByIDForUpdate(ctx context.Context, webhookID pgtype.UUID) (FindWebhookByIDForUpdateRow, error)
	// FindWebhookByIDForUpdateBatch enqueues a FindWebhookByIDForUpdate query into batch to be executed
	// later by the batch.
	FindWebhookByIDForUpdateBatch(batch genericBatch, webhookID pgtype.UUID)
	// FindWebhookByIDForUpdateScan scans the result of an executed FindWebhookByIDForUpdateBatch query.
	FindWebhookByIDForUpdateScan(results pgx.BatchResults) (FindWebhookByIDForUpdateRow, error)

	FindWebhookByRepoForUpdate(ctx context.Context, identifier pgtype.Text, cloud pgtype.Text) (FindWebhookByRepoForUpdateRow, error)
	// FindWebhookByRepoForUpdateBatch enqueues a FindWebhookByRepoForUpdate query into batch to be executed
	// later by the batch.
	FindWebhookByRepoForUpdateBatch(batch genericBatch, identifier pgtype.Text, cloud pgtype.Text)
	// FindWebhookByRepoForUpdateScan scans the result of an executed FindWebhookByRepoForUpdateBatch query.
	FindWebhookByRepoForUpdateScan(results pgx.BatchResults) (FindWebhookByRepoForUpdateRow, error)

	FindWebhookByRepo(ctx context.Context, identifier pgtype.Text, cloud pgtype.Text) ([]FindWebhookByRepoRow, error)
	// FindWebhookByRepoBatch enqueues a FindWebhookByRepo query into batch to be executed
	// later by the batch.
	FindWebhookByRepoBatch(batch genericBatch, identifier pgtype.Text, cloud pgtype.Text)
	// FindWebhookByRepoScan scans the result of an executed FindWebhookByRepoBatch query.
	FindWebhookByRepoScan(results pgx.BatchResults) ([]FindWebhookByRepoRow, error)

	DeleteWebhookByID(ctx context.Context, webhookID pgtype.UUID) (DeleteWebhookByIDRow, error)
	// DeleteWebhookByIDBatch enqueues a DeleteWebhookByID query into batch to be executed
	// later by the batch.
	DeleteWebhookByIDBatch(batch genericBatch, webhookID pgtype.UUID)
	// DeleteWebhookByIDScan scans the result of an executed DeleteWebhookByIDBatch query.
	DeleteWebhookByIDScan(results pgx.BatchResults) (DeleteWebhookByIDRow, error)

	InsertWorkspace(ctx context.Context, params InsertWorkspaceParams) (pgconn.CommandTag, error)
	// InsertWorkspaceBatch enqueues a InsertWorkspace query into batch to be executed
	// later by the batch.
	InsertWorkspaceBatch(batch genericBatch, params InsertWorkspaceParams)
	// InsertWorkspaceScan scans the result of an executed InsertWorkspaceBatch query.
	InsertWorkspaceScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindWorkspaces(ctx context.Context, params FindWorkspacesParams) ([]FindWorkspacesRow, error)
	// FindWorkspacesBatch enqueues a FindWorkspaces query into batch to be executed
	// later by the batch.
	FindWorkspacesBatch(batch genericBatch, params FindWorkspacesParams)
	// FindWorkspacesScan scans the result of an executed FindWorkspacesBatch query.
	FindWorkspacesScan(results pgx.BatchResults) ([]FindWorkspacesRow, error)

	CountWorkspaces(ctx context.Context, params CountWorkspacesParams) (int, error)
	// CountWorkspacesBatch enqueues a CountWorkspaces query into batch to be executed
	// later by the batch.
	CountWorkspacesBatch(batch genericBatch, params CountWorkspacesParams)
	// CountWorkspacesScan scans the result of an executed CountWorkspacesBatch query.
	CountWorkspacesScan(results pgx.BatchResults) (int, error)

	FindWorkspacesByWebhookID(ctx context.Context, webhookID pgtype.UUID) ([]FindWorkspacesByWebhookIDRow, error)
	// FindWorkspacesByWebhookIDBatch enqueues a FindWorkspacesByWebhookID query into batch to be executed
	// later by the batch.
	FindWorkspacesByWebhookIDBatch(batch genericBatch, webhookID pgtype.UUID)
	// FindWorkspacesByWebhookIDScan scans the result of an executed FindWorkspacesByWebhookIDBatch query.
	FindWorkspacesByWebhookIDScan(results pgx.BatchResults) ([]FindWorkspacesByWebhookIDRow, error)

	FindWorkspacesByUsername(ctx context.Context, params FindWorkspacesByUsernameParams) ([]FindWorkspacesByUsernameRow, error)
	// FindWorkspacesByUsernameBatch enqueues a FindWorkspacesByUsername query into batch to be executed
	// later by the batch.
	FindWorkspacesByUsernameBatch(batch genericBatch, params FindWorkspacesByUsernameParams)
	// FindWorkspacesByUsernameScan scans the result of an executed FindWorkspacesByUsernameBatch query.
	FindWorkspacesByUsernameScan(results pgx.BatchResults) ([]FindWorkspacesByUsernameRow, error)

	CountWorkspacesByUsername(ctx context.Context, organizationName pgtype.Text, username pgtype.Text) (int, error)
	// CountWorkspacesByUsernameBatch enqueues a CountWorkspacesByUsername query into batch to be executed
	// later by the batch.
	CountWorkspacesByUsernameBatch(batch genericBatch, organizationName pgtype.Text, username pgtype.Text)
	// CountWorkspacesByUsernameScan scans the result of an executed CountWorkspacesByUsernameBatch query.
	CountWorkspacesByUsernameScan(results pgx.BatchResults) (int, error)

	FindWorkspaceByName(ctx context.Context, name pgtype.Text, organizationName pgtype.Text) (FindWorkspaceByNameRow, error)
	// FindWorkspaceByNameBatch enqueues a FindWorkspaceByName query into batch to be executed
	// later by the batch.
	FindWorkspaceByNameBatch(batch genericBatch, name pgtype.Text, organizationName pgtype.Text)
	// FindWorkspaceByNameScan scans the result of an executed FindWorkspaceByNameBatch query.
	FindWorkspaceByNameScan(results pgx.BatchResults) (FindWorkspaceByNameRow, error)

	FindWorkspaceByID(ctx context.Context, id pgtype.Text) (FindWorkspaceByIDRow, error)
	// FindWorkspaceByIDBatch enqueues a FindWorkspaceByID query into batch to be executed
	// later by the batch.
	FindWorkspaceByIDBatch(batch genericBatch, id pgtype.Text)
	// FindWorkspaceByIDScan scans the result of an executed FindWorkspaceByIDBatch query.
	FindWorkspaceByIDScan(results pgx.BatchResults) (FindWorkspaceByIDRow, error)

	FindWorkspaceByIDForUpdate(ctx context.Context, id pgtype.Text) (FindWorkspaceByIDForUpdateRow, error)
	// FindWorkspaceByIDForUpdateBatch enqueues a FindWorkspaceByIDForUpdate query into batch to be executed
	// later by the batch.
	FindWorkspaceByIDForUpdateBatch(batch genericBatch, id pgtype.Text)
	// FindWorkspaceByIDForUpdateScan scans the result of an executed FindWorkspaceByIDForUpdateBatch query.
	FindWorkspaceByIDForUpdateScan(results pgx.BatchResults) (FindWorkspaceByIDForUpdateRow, error)

	UpdateWorkspaceByID(ctx context.Context, params UpdateWorkspaceByIDParams) (pgtype.Text, error)
	// UpdateWorkspaceByIDBatch enqueues a UpdateWorkspaceByID query into batch to be executed
	// later by the batch.
	UpdateWorkspaceByIDBatch(batch genericBatch, params UpdateWorkspaceByIDParams)
	// UpdateWorkspaceByIDScan scans the result of an executed UpdateWorkspaceByIDBatch query.
	UpdateWorkspaceByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	UpdateWorkspaceLockByID(ctx context.Context, params UpdateWorkspaceLockByIDParams) (pgconn.CommandTag, error)
	// UpdateWorkspaceLockByIDBatch enqueues a UpdateWorkspaceLockByID query into batch to be executed
	// later by the batch.
	UpdateWorkspaceLockByIDBatch(batch genericBatch, params UpdateWorkspaceLockByIDParams)
	// UpdateWorkspaceLockByIDScan scans the result of an executed UpdateWorkspaceLockByIDBatch query.
	UpdateWorkspaceLockByIDScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	UpdateWorkspaceLatestRun(ctx context.Context, runID pgtype.Text, workspaceID pgtype.Text) (pgconn.CommandTag, error)
	// UpdateWorkspaceLatestRunBatch enqueues a UpdateWorkspaceLatestRun query into batch to be executed
	// later by the batch.
	UpdateWorkspaceLatestRunBatch(batch genericBatch, runID pgtype.Text, workspaceID pgtype.Text)
	// UpdateWorkspaceLatestRunScan scans the result of an executed UpdateWorkspaceLatestRunBatch query.
	UpdateWorkspaceLatestRunScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	UpdateWorkspaceCurrentStateVersionID(ctx context.Context, stateVersionID pgtype.Text, workspaceID pgtype.Text) (pgtype.Text, error)
	// UpdateWorkspaceCurrentStateVersionIDBatch enqueues a UpdateWorkspaceCurrentStateVersionID query into batch to be executed
	// later by the batch.
	UpdateWorkspaceCurrentStateVersionIDBatch(batch genericBatch, stateVersionID pgtype.Text, workspaceID pgtype.Text)
	// UpdateWorkspaceCurrentStateVersionIDScan scans the result of an executed UpdateWorkspaceCurrentStateVersionIDBatch query.
	UpdateWorkspaceCurrentStateVersionIDScan(results pgx.BatchResults) (pgtype.Text, error)

	DeleteWorkspaceByID(ctx context.Context, workspaceID pgtype.Text) (pgconn.CommandTag, error)
	// DeleteWorkspaceByIDBatch enqueues a DeleteWorkspaceByID query into batch to be executed
	// later by the batch.
	DeleteWorkspaceByIDBatch(batch genericBatch, workspaceID pgtype.Text)
	// DeleteWorkspaceByIDScan scans the result of an executed DeleteWorkspaceByIDBatch query.
	DeleteWorkspaceByIDScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	UpsertWorkspacePermission(ctx context.Context, params UpsertWorkspacePermissionParams) (pgconn.CommandTag, error)
	// UpsertWorkspacePermissionBatch enqueues a UpsertWorkspacePermission query into batch to be executed
	// later by the batch.
	UpsertWorkspacePermissionBatch(batch genericBatch, params UpsertWorkspacePermissionParams)
	// UpsertWorkspacePermissionScan scans the result of an executed UpsertWorkspacePermissionBatch query.
	UpsertWorkspacePermissionScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindWorkspacePermissionsByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) ([]FindWorkspacePermissionsByWorkspaceIDRow, error)
	// FindWorkspacePermissionsByWorkspaceIDBatch enqueues a FindWorkspacePermissionsByWorkspaceID query into batch to be executed
	// later by the batch.
	FindWorkspacePermissionsByWorkspaceIDBatch(batch genericBatch, workspaceID pgtype.Text)
	// FindWorkspacePermissionsByWorkspaceIDScan scans the result of an executed FindWorkspacePermissionsByWorkspaceIDBatch query.
	FindWorkspacePermissionsByWorkspaceIDScan(results pgx.BatchResults) ([]FindWorkspacePermissionsByWorkspaceIDRow, error)

	DeleteWorkspacePermissionByID(ctx context.Context, workspaceID pgtype.Text, teamName pgtype.Text) (pgconn.CommandTag, error)
	// DeleteWorkspacePermissionByIDBatch enqueues a DeleteWorkspacePermissionByID query into batch to be executed
	// later by the batch.
	DeleteWorkspacePermissionByIDBatch(batch genericBatch, workspaceID pgtype.Text, teamName pgtype.Text)
	// DeleteWorkspacePermissionByIDScan scans the result of an executed DeleteWorkspacePermissionByIDBatch query.
	DeleteWorkspacePermissionByIDScan(results pgx.BatchResults) (pgconn.CommandTag, error)
}

type DBQuerier struct {
	conn  genericConn   // underlying Postgres transport to use
	types *typeResolver // resolve types by name
}

var _ Querier = &DBQuerier{}

// genericConn is a connection to a Postgres database. This is usually backed by
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	// Query executes sql with args. If there is an error the returned Rows will
	// be returned in an error state. So it is allowed to ignore the error
	// returned from Query and handle it in Rows.
	Query(ctx context.Context, sql string, args ...interface{}) (pgx.Rows, error)

	// QueryRow is a convenience wrapper over Query. Any error that occurs while
	// querying is deferred until calling Scan on the returned Row. That Row will
	// error with pgx.ErrNoRows if no rows are returned.
	QueryRow(ctx context.Context, sql string, args ...interface{}) pgx.Row

	// Exec executes sql. sql can be either a prepared statement name or an SQL
	// string. arguments should be referenced positionally from the sql string
	// as $1, $2, etc.
	Exec(ctx context.Context, sql string, arguments ...interface{}) (pgconn.CommandTag, error)
}

// genericBatch batches queries to send in a single network request to a
// Postgres server. This is usually backed by *pgx.Batch.
type genericBatch interface {
	// Queue queues a query to batch b. query can be an SQL query or the name of a
	// prepared statement. See Queue on *pgx.Batch.
	Queue(query string, arguments ...interface{})
}

// NewQuerier creates a DBQuerier that implements Querier. conn is typically
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerier(conn genericConn) *DBQuerier {
	return NewQuerierConfig(conn, QuerierConfig{})
}

type QuerierConfig struct {
	// DataTypes contains pgtype.Value to use for encoding and decoding instead
	// of pggen-generated pgtype.ValueTranscoder.
	//
	// If OIDs are available for an input parameter type and all of its
	// transitive dependencies, pggen will use the binary encoding format for
	// the input parameter.
	DataTypes []pgtype.DataType
}

// NewQuerierConfig creates a DBQuerier that implements Querier with the given
// config. conn is typically *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerierConfig(conn genericConn, cfg QuerierConfig) *DBQuerier {
	return &DBQuerier{conn: conn, types: newTypeResolver(cfg.DataTypes)}
}

// WithTx creates a new DBQuerier that uses the transaction to run all queries.
func (q *DBQuerier) WithTx(tx pgx.Tx) (*DBQuerier, error) {
	return &DBQuerier{conn: tx}, nil
}

// preparer is any Postgres connection transport that provides a way to prepare
// a statement, most commonly *pgx.Conn.
type preparer interface {
	Prepare(ctx context.Context, name, sql string) (sd *pgconn.StatementDescription, err error)
}

// PrepareAllQueries executes a PREPARE statement for all pggen generated SQL
// queries in querier files. Typical usage is as the AfterConnect callback
// for pgxpool.Config
//
// pgx will use the prepared statement if available. Calling PrepareAllQueries
// is an optional optimization to avoid a network round-trip the first time pgx
// runs a query if pgx statement caching is enabled.
func PrepareAllQueries(ctx context.Context, p preparer) error {
	if _, err := p.Prepare(ctx, insertAgentTokenSQL, insertAgentTokenSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertAgentToken': %w", err)
	}
	if _, err := p.Prepare(ctx, findAgentTokenByIDSQL, findAgentTokenByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindAgentTokenByID': %w", err)
	}
	if _, err := p.Prepare(ctx, findAgentTokensSQL, findAgentTokensSQL); err != nil {
		return fmt.Errorf("prepare query 'FindAgentTokens': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteAgentTokenByIDSQL, deleteAgentTokenByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteAgentTokenByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertApplySQL, insertApplySQL); err != nil {
		return fmt.Errorf("prepare query 'InsertApply': %w", err)
	}
	if _, err := p.Prepare(ctx, updateAppliedChangesByIDSQL, updateAppliedChangesByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateAppliedChangesByID': %w", err)
	}
	if _, err := p.Prepare(ctx, updateApplyStatusByIDSQL, updateApplyStatusByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateApplyStatusByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertConfigurationVersionSQL, insertConfigurationVersionSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertConfigurationVersion': %w", err)
	}
	if _, err := p.Prepare(ctx, insertConfigurationVersionStatusTimestampSQL, insertConfigurationVersionStatusTimestampSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertConfigurationVersionStatusTimestamp': %w", err)
	}
	if _, err := p.Prepare(ctx, findConfigurationVersionsByWorkspaceIDSQL, findConfigurationVersionsByWorkspaceIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindConfigurationVersionsByWorkspaceID': %w", err)
	}
	if _, err := p.Prepare(ctx, countConfigurationVersionsByWorkspaceIDSQL, countConfigurationVersionsByWorkspaceIDSQL); err != nil {
		return fmt.Errorf("prepare query 'CountConfigurationVersionsByWorkspaceID': %w", err)
	}
	if _, err := p.Prepare(ctx, findConfigurationVersionByIDSQL, findConfigurationVersionByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindConfigurationVersionByID': %w", err)
	}
	if _, err := p.Prepare(ctx, findConfigurationVersionLatestByWorkspaceIDSQL, findConfigurationVersionLatestByWorkspaceIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindConfigurationVersionLatestByWorkspaceID': %w", err)
	}
	if _, err := p.Prepare(ctx, findConfigurationVersionByIDForUpdateSQL, findConfigurationVersionByIDForUpdateSQL); err != nil {
		return fmt.Errorf("prepare query 'FindConfigurationVersionByIDForUpdate': %w", err)
	}
	if _, err := p.Prepare(ctx, downloadConfigurationVersionSQL, downloadConfigurationVersionSQL); err != nil {
		return fmt.Errorf("prepare query 'DownloadConfigurationVersion': %w", err)
	}
	if _, err := p.Prepare(ctx, updateConfigurationVersionErroredByIDSQL, updateConfigurationVersionErroredByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateConfigurationVersionErroredByID': %w", err)
	}
	if _, err := p.Prepare(ctx, updateConfigurationVersionConfigByIDSQL, updateConfigurationVersionConfigByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateConfigurationVersionConfigByID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteConfigurationVersionByIDSQL, deleteConfigurationVersionByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteConfigurationVersionByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertIngressAttributesSQL, insertIngressAttributesSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertIngressAttributes': %w", err)
	}
	if _, err := p.Prepare(ctx, insertModuleSQL, insertModuleSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertModule': %w", err)
	}
	if _, err := p.Prepare(ctx, insertModuleVersionSQL, insertModuleVersionSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertModuleVersion': %w", err)
	}
	if _, err := p.Prepare(ctx, listModulesByOrganizationSQL, listModulesByOrganizationSQL); err != nil {
		return fmt.Errorf("prepare query 'ListModulesByOrganization': %w", err)
	}
	if _, err := p.Prepare(ctx, findModuleByNameSQL, findModuleByNameSQL); err != nil {
		return fmt.Errorf("prepare query 'FindModuleByName': %w", err)
	}
	if _, err := p.Prepare(ctx, findModuleByIDSQL, findModuleByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindModuleByID': %w", err)
	}
	if _, err := p.Prepare(ctx, findModuleByWebhookIDSQL, findModuleByWebhookIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindModuleByWebhookID': %w", err)
	}
	if _, err := p.Prepare(ctx, findModuleByModuleVersionIDSQL, findModuleByModuleVersionIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindModuleByModuleVersionID': %w", err)
	}
	if _, err := p.Prepare(ctx, updateModuleStatusByIDSQL, updateModuleStatusByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateModuleStatusByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertModuleTarballSQL, insertModuleTarballSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertModuleTarball': %w", err)
	}
	if _, err := p.Prepare(ctx, findModuleTarballSQL, findModuleTarballSQL); err != nil {
		return fmt.Errorf("prepare query 'FindModuleTarball': %w", err)
	}
	if _, err := p.Prepare(ctx, updateModuleVersionStatusByIDSQL, updateModuleVersionStatusByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateModuleVersionStatusByID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteModuleByIDSQL, deleteModuleByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteModuleByID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteModuleVersionByIDSQL, deleteModuleVersionByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteModuleVersionByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertNotificationConfigurationSQL, insertNotificationConfigurationSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertNotificationConfiguration': %w", err)
	}
	if _, err := p.Prepare(ctx, findNotificationConfigurationsByWorkspaceIDSQL, findNotificationConfigurationsByWorkspaceIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindNotificationConfigurationsByWorkspaceID': %w", err)
	}
	if _, err := p.Prepare(ctx, findAllNotificationConfigurationsSQL, findAllNotificationConfigurationsSQL); err != nil {
		return fmt.Errorf("prepare query 'FindAllNotificationConfigurations': %w", err)
	}
	if _, err := p.Prepare(ctx, findNotificationConfigurationSQL, findNotificationConfigurationSQL); err != nil {
		return fmt.Errorf("prepare query 'FindNotificationConfiguration': %w", err)
	}
	if _, err := p.Prepare(ctx, findNotificationConfigurationForUpdateSQL, findNotificationConfigurationForUpdateSQL); err != nil {
		return fmt.Errorf("prepare query 'FindNotificationConfigurationForUpdate': %w", err)
	}
	if _, err := p.Prepare(ctx, updateNotificationConfigurationByIDSQL, updateNotificationConfigurationByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateNotificationConfigurationByID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteNotificationConfigurationByIDSQL, deleteNotificationConfigurationByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteNotificationConfigurationByID': %w", err)
	}
	if _, err := p.Prepare(ctx, findOrganizationNameByWorkspaceIDSQL, findOrganizationNameByWorkspaceIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindOrganizationNameByWorkspaceID': %w", err)
	}
	if _, err := p.Prepare(ctx, findOrganizationByNameSQL, findOrganizationByNameSQL); err != nil {
		return fmt.Errorf("prepare query 'FindOrganizationByName': %w", err)
	}
	if _, err := p.Prepare(ctx, findOrganizationByIDSQL, findOrganizationByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindOrganizationByID': %w", err)
	}
	if _, err := p.Prepare(ctx, findOrganizationByNameForUpdateSQL, findOrganizationByNameForUpdateSQL); err != nil {
		return fmt.Errorf("prepare query 'FindOrganizationByNameForUpdate': %w", err)
	}
	if _, err := p.Prepare(ctx, findOrganizationsSQL, findOrganizationsSQL); err != nil {
		return fmt.Errorf("prepare query 'FindOrganizations': %w", err)
	}
	if _, err := p.Prepare(ctx, countOrganizationsSQL, countOrganizationsSQL); err != nil {
		return fmt.Errorf("prepare query 'CountOrganizations': %w", err)
	}
	if _, err := p.Prepare(ctx, insertOrganizationSQL, insertOrganizationSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertOrganization': %w", err)
	}
	if _, err := p.Prepare(ctx, updateOrganizationByNameSQL, updateOrganizationByNameSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateOrganizationByName': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteOrganizationByNameSQL, deleteOrganizationByNameSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteOrganizationByName': %w", err)
	}
	if _, err := p.Prepare(ctx, insertPhaseStatusTimestampSQL, insertPhaseStatusTimestampSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertPhaseStatusTimestamp': %w", err)
	}
	if _, err := p.Prepare(ctx, insertLogChunkSQL, insertLogChunkSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertLogChunk': %w", err)
	}
	if _, err := p.Prepare(ctx, findLogsSQL, findLogsSQL); err != nil {
		return fmt.Errorf("prepare query 'FindLogs': %w", err)
	}
	if _, err := p.Prepare(ctx, findLogChunkByIDSQL, findLogChunkByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindLogChunkByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertPlanSQL, insertPlanSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertPlan': %w", err)
	}
	if _, err := p.Prepare(ctx, updatePlanStatusByIDSQL, updatePlanStatusByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdatePlanStatusByID': %w", err)
	}
	if _, err := p.Prepare(ctx, updatePlannedChangesByIDSQL, updatePlannedChangesByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdatePlannedChangesByID': %w", err)
	}
	if _, err := p.Prepare(ctx, getPlanBinByIDSQL, getPlanBinByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'GetPlanBinByID': %w", err)
	}
	if _, err := p.Prepare(ctx, getPlanJSONByIDSQL, getPlanJSONByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'GetPlanJSONByID': %w", err)
	}
	if _, err := p.Prepare(ctx, updatePlanBinByIDSQL, updatePlanBinByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdatePlanBinByID': %w", err)
	}
	if _, err := p.Prepare(ctx, updatePlanJSONByIDSQL, updatePlanJSONByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdatePlanJSONByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertRepoConnectionSQL, insertRepoConnectionSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertRepoConnection': %w", err)
	}
	if _, err := p.Prepare(ctx, countRepoConnectionsByIDSQL, countRepoConnectionsByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'CountRepoConnectionsByID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteWorkspaceConnectionByIDSQL, deleteWorkspaceConnectionByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteWorkspaceConnectionByID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteModuleConnectionByIDSQL, deleteModuleConnectionByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteModuleConnectionByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertRunSQL, insertRunSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertRun': %w", err)
	}
	if _, err := p.Prepare(ctx, insertRunStatusTimestampSQL, insertRunStatusTimestampSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertRunStatusTimestamp': %w", err)
	}
	if _, err := p.Prepare(ctx, findRunsSQL, findRunsSQL); err != nil {
		return fmt.Errorf("prepare query 'FindRuns': %w", err)
	}
	if _, err := p.Prepare(ctx, countRunsSQL, countRunsSQL); err != nil {
		return fmt.Errorf("prepare query 'CountRuns': %w", err)
	}
	if _, err := p.Prepare(ctx, findRunByIDSQL, findRunByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindRunByID': %w", err)
	}
	if _, err := p.Prepare(ctx, findRunByIDForUpdateSQL, findRunByIDForUpdateSQL); err != nil {
		return fmt.Errorf("prepare query 'FindRunByIDForUpdate': %w", err)
	}
	if _, err := p.Prepare(ctx, putLockFileSQL, putLockFileSQL); err != nil {
		return fmt.Errorf("prepare query 'PutLockFile': %w", err)
	}
	if _, err := p.Prepare(ctx, getLockFileByIDSQL, getLockFileByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'GetLockFileByID': %w", err)
	}
	if _, err := p.Prepare(ctx, updateRunStatusSQL, updateRunStatusSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateRunStatus': %w", err)
	}
	if _, err := p.Prepare(ctx, updateRunForceCancelAvailableAtSQL, updateRunForceCancelAvailableAtSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateRunForceCancelAvailableAt': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteRunByIDSQL, deleteRunByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteRunByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertStateVersionSQL, insertStateVersionSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertStateVersion': %w", err)
	}
	if _, err := p.Prepare(ctx, findStateVersionsByWorkspaceIDSQL, findStateVersionsByWorkspaceIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindStateVersionsByWorkspaceID': %w", err)
	}
	if _, err := p.Prepare(ctx, countStateVersionsByWorkspaceIDSQL, countStateVersionsByWorkspaceIDSQL); err != nil {
		return fmt.Errorf("prepare query 'CountStateVersionsByWorkspaceID': %w", err)
	}
	if _, err := p.Prepare(ctx, findStateVersionByIDSQL, findStateVersionByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindStateVersionByID': %w", err)
	}
	if _, err := p.Prepare(ctx, findCurrentStateVersionByWorkspaceIDSQL, findCurrentStateVersionByWorkspaceIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindCurrentStateVersionByWorkspaceID': %w", err)
	}
	if _, err := p.Prepare(ctx, findStateVersionStateByIDSQL, findStateVersionStateByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindStateVersionStateByID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteStateVersionByIDSQL, deleteStateVersionByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteStateVersionByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertStateVersionOutputSQL, insertStateVersionOutputSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertStateVersionOutput': %w", err)
	}
	if _, err := p.Prepare(ctx, findStateVersionOutputByIDSQL, findStateVersionOutputByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindStateVersionOutputByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertTagSQL, insertTagSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertTag': %w", err)
	}
	if _, err := p.Prepare(ctx, insertWorkspaceTagSQL, insertWorkspaceTagSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertWorkspaceTag': %w", err)
	}
	if _, err := p.Prepare(ctx, insertWorkspaceTagByNameSQL, insertWorkspaceTagByNameSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertWorkspaceTagByName': %w", err)
	}
	if _, err := p.Prepare(ctx, findTagsSQL, findTagsSQL); err != nil {
		return fmt.Errorf("prepare query 'FindTags': %w", err)
	}
	if _, err := p.Prepare(ctx, findWorkspaceTagsSQL, findWorkspaceTagsSQL); err != nil {
		return fmt.Errorf("prepare query 'FindWorkspaceTags': %w", err)
	}
	if _, err := p.Prepare(ctx, findTagByNameSQL, findTagByNameSQL); err != nil {
		return fmt.Errorf("prepare query 'FindTagByName': %w", err)
	}
	if _, err := p.Prepare(ctx, findTagByIDSQL, findTagByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindTagByID': %w", err)
	}
	if _, err := p.Prepare(ctx, countTagsSQL, countTagsSQL); err != nil {
		return fmt.Errorf("prepare query 'CountTags': %w", err)
	}
	if _, err := p.Prepare(ctx, countWorkspaceTagsSQL, countWorkspaceTagsSQL); err != nil {
		return fmt.Errorf("prepare query 'CountWorkspaceTags': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteTagSQL, deleteTagSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteTag': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteWorkspaceTagSQL, deleteWorkspaceTagSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteWorkspaceTag': %w", err)
	}
	if _, err := p.Prepare(ctx, insertTeamSQL, insertTeamSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertTeam': %w", err)
	}
	if _, err := p.Prepare(ctx, findTeamsByOrgSQL, findTeamsByOrgSQL); err != nil {
		return fmt.Errorf("prepare query 'FindTeamsByOrg': %w", err)
	}
	if _, err := p.Prepare(ctx, findTeamByNameSQL, findTeamByNameSQL); err != nil {
		return fmt.Errorf("prepare query 'FindTeamByName': %w", err)
	}
	if _, err := p.Prepare(ctx, findTeamByIDSQL, findTeamByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindTeamByID': %w", err)
	}
	if _, err := p.Prepare(ctx, findTeamByIDForUpdateSQL, findTeamByIDForUpdateSQL); err != nil {
		return fmt.Errorf("prepare query 'FindTeamByIDForUpdate': %w", err)
	}
	if _, err := p.Prepare(ctx, updateTeamByIDSQL, updateTeamByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateTeamByID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteTeamByIDSQL, deleteTeamByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteTeamByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertTeamMembershipSQL, insertTeamMembershipSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertTeamMembership': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteTeamMembershipSQL, deleteTeamMembershipSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteTeamMembership': %w", err)
	}
	if _, err := p.Prepare(ctx, insertTokenSQL, insertTokenSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertToken': %w", err)
	}
	if _, err := p.Prepare(ctx, findTokensByUsernameSQL, findTokensByUsernameSQL); err != nil {
		return fmt.Errorf("prepare query 'FindTokensByUsername': %w", err)
	}
	if _, err := p.Prepare(ctx, findTokenByIDSQL, findTokenByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindTokenByID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteTokenByIDSQL, deleteTokenByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteTokenByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertUserSQL, insertUserSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertUser': %w", err)
	}
	if _, err := p.Prepare(ctx, findUsersSQL, findUsersSQL); err != nil {
		return fmt.Errorf("prepare query 'FindUsers': %w", err)
	}
	if _, err := p.Prepare(ctx, findUsersByOrganizationSQL, findUsersByOrganizationSQL); err != nil {
		return fmt.Errorf("prepare query 'FindUsersByOrganization': %w", err)
	}
	if _, err := p.Prepare(ctx, findUsersByTeamIDSQL, findUsersByTeamIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindUsersByTeamID': %w", err)
	}
	if _, err := p.Prepare(ctx, findUserByIDSQL, findUserByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindUserByID': %w", err)
	}
	if _, err := p.Prepare(ctx, findUserByUsernameSQL, findUserByUsernameSQL); err != nil {
		return fmt.Errorf("prepare query 'FindUserByUsername': %w", err)
	}
	if _, err := p.Prepare(ctx, findUserByAuthenticationTokenIDSQL, findUserByAuthenticationTokenIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindUserByAuthenticationTokenID': %w", err)
	}
	if _, err := p.Prepare(ctx, updateUserSiteAdminsSQL, updateUserSiteAdminsSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateUserSiteAdmins': %w", err)
	}
	if _, err := p.Prepare(ctx, resetUserSiteAdminsSQL, resetUserSiteAdminsSQL); err != nil {
		return fmt.Errorf("prepare query 'ResetUserSiteAdmins': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteUserByIDSQL, deleteUserByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteUserByID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteUserByUsernameSQL, deleteUserByUsernameSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteUserByUsername': %w", err)
	}
	if _, err := p.Prepare(ctx, insertVariableSQL, insertVariableSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertVariable': %w", err)
	}
	if _, err := p.Prepare(ctx, findVariablesSQL, findVariablesSQL); err != nil {
		return fmt.Errorf("prepare query 'FindVariables': %w", err)
	}
	if _, err := p.Prepare(ctx, findVariableSQL, findVariableSQL); err != nil {
		return fmt.Errorf("prepare query 'FindVariable': %w", err)
	}
	if _, err := p.Prepare(ctx, findVariableForUpdateSQL, findVariableForUpdateSQL); err != nil {
		return fmt.Errorf("prepare query 'FindVariableForUpdate': %w", err)
	}
	if _, err := p.Prepare(ctx, updateVariableByIDSQL, updateVariableByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateVariableByID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteVariableByIDSQL, deleteVariableByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteVariableByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertVCSProviderSQL, insertVCSProviderSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertVCSProvider': %w", err)
	}
	if _, err := p.Prepare(ctx, findVCSProvidersSQL, findVCSProvidersSQL); err != nil {
		return fmt.Errorf("prepare query 'FindVCSProviders': %w", err)
	}
	if _, err := p.Prepare(ctx, findVCSProviderSQL, findVCSProviderSQL); err != nil {
		return fmt.Errorf("prepare query 'FindVCSProvider': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteVCSProviderByIDSQL, deleteVCSProviderByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteVCSProviderByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertWebhookSQL, insertWebhookSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertWebhook': %w", err)
	}
	if _, err := p.Prepare(ctx, updateWebhookVCSIDSQL, updateWebhookVCSIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateWebhookVCSID': %w", err)
	}
	if _, err := p.Prepare(ctx, findWebhookByIDSQL, findWebhookByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindWebhookByID': %w", err)
	}
	if _, err := p.Prepare(ctx, findWebhookByIDForUpdateSQL, findWebhookByIDForUpdateSQL); err != nil {
		return fmt.Errorf("prepare query 'FindWebhookByIDForUpdate': %w", err)
	}
	if _, err := p.Prepare(ctx, findWebhookByRepoForUpdateSQL, findWebhookByRepoForUpdateSQL); err != nil {
		return fmt.Errorf("prepare query 'FindWebhookByRepoForUpdate': %w", err)
	}
	if _, err := p.Prepare(ctx, findWebhookByRepoSQL, findWebhookByRepoSQL); err != nil {
		return fmt.Errorf("prepare query 'FindWebhookByRepo': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteWebhookByIDSQL, deleteWebhookByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteWebhookByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertWorkspaceSQL, insertWorkspaceSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertWorkspace': %w", err)
	}
	if _, err := p.Prepare(ctx, findWorkspacesSQL, findWorkspacesSQL); err != nil {
		return fmt.Errorf("prepare query 'FindWorkspaces': %w", err)
	}
	if _, err := p.Prepare(ctx, countWorkspacesSQL, countWorkspacesSQL); err != nil {
		return fmt.Errorf("prepare query 'CountWorkspaces': %w", err)
	}
	if _, err := p.Prepare(ctx, findWorkspacesByWebhookIDSQL, findWorkspacesByWebhookIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindWorkspacesByWebhookID': %w", err)
	}
	if _, err := p.Prepare(ctx, findWorkspacesByUsernameSQL, findWorkspacesByUsernameSQL); err != nil {
		return fmt.Errorf("prepare query 'FindWorkspacesByUsername': %w", err)
	}
	if _, err := p.Prepare(ctx, countWorkspacesByUsernameSQL, countWorkspacesByUsernameSQL); err != nil {
		return fmt.Errorf("prepare query 'CountWorkspacesByUsername': %w", err)
	}
	if _, err := p.Prepare(ctx, findWorkspaceByNameSQL, findWorkspaceByNameSQL); err != nil {
		return fmt.Errorf("prepare query 'FindWorkspaceByName': %w", err)
	}
	if _, err := p.Prepare(ctx, findWorkspaceByIDSQL, findWorkspaceByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindWorkspaceByID': %w", err)
	}
	if _, err := p.Prepare(ctx, findWorkspaceByIDForUpdateSQL, findWorkspaceByIDForUpdateSQL); err != nil {
		return fmt.Errorf("prepare query 'FindWorkspaceByIDForUpdate': %w", err)
	}
	if _, err := p.Prepare(ctx, updateWorkspaceByIDSQL, updateWorkspaceByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateWorkspaceByID': %w", err)
	}
	if _, err := p.Prepare(ctx, updateWorkspaceLockByIDSQL, updateWorkspaceLockByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateWorkspaceLockByID': %w", err)
	}
	if _, err := p.Prepare(ctx, updateWorkspaceLatestRunSQL, updateWorkspaceLatestRunSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateWorkspaceLatestRun': %w", err)
	}
	if _, err := p.Prepare(ctx, updateWorkspaceCurrentStateVersionIDSQL, updateWorkspaceCurrentStateVersionIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateWorkspaceCurrentStateVersionID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteWorkspaceByIDSQL, deleteWorkspaceByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteWorkspaceByID': %w", err)
	}
	if _, err := p.Prepare(ctx, upsertWorkspacePermissionSQL, upsertWorkspacePermissionSQL); err != nil {
		return fmt.Errorf("prepare query 'UpsertWorkspacePermission': %w", err)
	}
	if _, err := p.Prepare(ctx, findWorkspacePermissionsByWorkspaceIDSQL, findWorkspacePermissionsByWorkspaceIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindWorkspacePermissionsByWorkspaceID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteWorkspacePermissionByIDSQL, deleteWorkspacePermissionByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteWorkspacePermissionByID': %w", err)
	}
	return nil
}

// ConfigurationVersionStatusTimestamps represents the Postgres composite type "configuration_version_status_timestamps".
type ConfigurationVersionStatusTimestamps struct {
	ConfigurationVersionID pgtype.Text        `json:"configuration_version_id"`
	Status                 pgtype.Text        `json:"status"`
	Timestamp              pgtype.Timestamptz `json:"timestamp"`
}

// IngressAttributes represents the Postgres composite type "ingress_attributes".
type IngressAttributes struct {
	Branch                 pgtype.Text `json:"branch"`
	CommitSHA              pgtype.Text `json:"commit_sha"`
	Identifier             pgtype.Text `json:"identifier"`
	IsPullRequest          bool        `json:"is_pull_request"`
	OnDefaultBranch        bool        `json:"on_default_branch"`
	ConfigurationVersionID pgtype.Text `json:"configuration_version_id"`
}

// ModuleVersions represents the Postgres composite type "module_versions".
type ModuleVersions struct {
	ModuleVersionID pgtype.Text        `json:"module_version_id"`
	Version         pgtype.Text        `json:"version"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
	Status          pgtype.Text        `json:"status"`
	StatusError     pgtype.Text        `json:"status_error"`
	ModuleID        pgtype.Text        `json:"module_id"`
}

// PhaseStatusTimestamps represents the Postgres composite type "phase_status_timestamps".
type PhaseStatusTimestamps struct {
	RunID     pgtype.Text        `json:"run_id"`
	Phase     pgtype.Text        `json:"phase"`
	Status    pgtype.Text        `json:"status"`
	Timestamp pgtype.Timestamptz `json:"timestamp"`
}

// RepoConnections represents the Postgres composite type "repo_connections".
type RepoConnections struct {
	WebhookID     pgtype.UUID `json:"webhook_id"`
	VCSProviderID pgtype.Text `json:"vcs_provider_id"`
	ModuleID      pgtype.Text `json:"module_id"`
	WorkspaceID   pgtype.Text `json:"workspace_id"`
}

// Report represents the Postgres composite type "report".
type Report struct {
	Additions    int `json:"additions"`
	Changes      int `json:"changes"`
	Destructions int `json:"destructions"`
}

// RunStatusTimestamps represents the Postgres composite type "run_status_timestamps".
type RunStatusTimestamps struct {
	RunID     pgtype.Text        `json:"run_id"`
	Status    pgtype.Text        `json:"status"`
	Timestamp pgtype.Timestamptz `json:"timestamp"`
}

// Runs represents the Postgres composite type "runs".
type Runs struct {
	RunID                  pgtype.Text        `json:"run_id"`
	CreatedAt              pgtype.Timestamptz `json:"created_at"`
	ForceCancelAvailableAt pgtype.Timestamptz `json:"force_cancel_available_at"`
	IsDestroy              bool               `json:"is_destroy"`
	PositionInQueue        int                `json:"position_in_queue"`
	Refresh                bool               `json:"refresh"`
	RefreshOnly            bool               `json:"refresh_only"`
	ReplaceAddrs           []string           `json:"replace_addrs"`
	TargetAddrs            []string           `json:"target_addrs"`
	LockFile               []byte             `json:"lock_file"`
	Status                 pgtype.Text        `json:"status"`
	WorkspaceID            pgtype.Text        `json:"workspace_id"`
	ConfigurationVersionID pgtype.Text        `json:"configuration_version_id"`
	AutoApply              bool               `json:"auto_apply"`
	PlanOnly               bool               `json:"plan_only"`
}

// StateVersionOutputs represents the Postgres composite type "state_version_outputs".
type StateVersionOutputs struct {
	StateVersionOutputID pgtype.Text `json:"state_version_output_id"`
	Name                 pgtype.Text `json:"name"`
	Sensitive            bool        `json:"sensitive"`
	Type                 pgtype.Text `json:"type"`
	Value                []byte      `json:"value"`
	StateVersionID       pgtype.Text `json:"state_version_id"`
}

// Teams represents the Postgres composite type "teams".
type Teams struct {
	TeamID                          pgtype.Text        `json:"team_id"`
	Name                            pgtype.Text        `json:"name"`
	CreatedAt                       pgtype.Timestamptz `json:"created_at"`
	PermissionManageWorkspaces      bool               `json:"permission_manage_workspaces"`
	PermissionManageVCS             bool               `json:"permission_manage_vcs"`
	PermissionManageModules         bool               `json:"permission_manage_modules"`
	OrganizationName                pgtype.Text        `json:"organization_name"`
	SSOTeamID                       pgtype.Text        `json:"sso_team_id"`
	Visibility                      pgtype.Text        `json:"visibility"`
	PermissionManagePolicies        bool               `json:"permission_manage_policies"`
	PermissionManagePolicyOverrides bool               `json:"permission_manage_policy_overrides"`
	PermissionManageProviders       bool               `json:"permission_manage_providers"`
}

// Users represents the Postgres composite type "users".
type Users struct {
	UserID    pgtype.Text        `json:"user_id"`
	Username  pgtype.Text        `json:"username"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	SiteAdmin bool               `json:"site_admin"`
}

// Webhooks represents the Postgres composite type "webhooks".
type Webhooks struct {
	WebhookID  pgtype.UUID `json:"webhook_id"`
	VCSID      pgtype.Text `json:"vcs_id"`
	Secret     pgtype.Text `json:"secret"`
	Identifier pgtype.Text `json:"identifier"`
	Cloud      pgtype.Text `json:"cloud"`
}

// typeResolver looks up the pgtype.ValueTranscoder by Postgres type name.
type typeResolver struct {
	connInfo *pgtype.ConnInfo // types by Postgres type name
}

func newTypeResolver(types []pgtype.DataType) *typeResolver {
	ci := pgtype.NewConnInfo()
	for _, typ := range types {
		if txt, ok := typ.Value.(textPreferrer); ok && typ.OID != unknownOID {
			typ.Value = txt.ValueTranscoder
		}
		ci.RegisterDataType(typ)
	}
	return &typeResolver{connInfo: ci}
}

// findValue find the OID, and pgtype.ValueTranscoder for a Postgres type name.
func (tr *typeResolver) findValue(name string) (uint32, pgtype.ValueTranscoder, bool) {
	typ, ok := tr.connInfo.DataTypeForName(name)
	if !ok {
		return 0, nil, false
	}
	v := pgtype.NewValue(typ.Value)
	return typ.OID, v.(pgtype.ValueTranscoder), true
}

// setValue sets the value of a ValueTranscoder to a value that should always
// work and panics if it fails.
func (tr *typeResolver) setValue(vt pgtype.ValueTranscoder, val interface{}) pgtype.ValueTranscoder {
	if err := vt.Set(val); err != nil {
		panic(fmt.Sprintf("set ValueTranscoder %T to %+v: %s", vt, val, err))
	}
	return vt
}

type compositeField struct {
	name       string                 // name of the field
	typeName   string                 // Postgres type name
	defaultVal pgtype.ValueTranscoder // default value to use
}

func (tr *typeResolver) newCompositeValue(name string, fields ...compositeField) pgtype.ValueTranscoder {
	if _, val, ok := tr.findValue(name); ok {
		return val
	}
	fs := make([]pgtype.CompositeTypeField, len(fields))
	vals := make([]pgtype.ValueTranscoder, len(fields))
	isBinaryOk := true
	for i, field := range fields {
		oid, val, ok := tr.findValue(field.typeName)
		if !ok {
			oid = unknownOID
			val = field.defaultVal
		}
		isBinaryOk = isBinaryOk && oid != unknownOID
		fs[i] = pgtype.CompositeTypeField{Name: field.name, OID: oid}
		vals[i] = val
	}
	// Okay to ignore error because it's only thrown when the number of field
	// names does not equal the number of ValueTranscoders.
	typ, _ := pgtype.NewCompositeTypeValues(name, fs, vals)
	if !isBinaryOk {
		return textPreferrer{typ, name}
	}
	return typ
}

func (tr *typeResolver) newArrayValue(name, elemName string, defaultVal func() pgtype.ValueTranscoder) pgtype.ValueTranscoder {
	if _, val, ok := tr.findValue(name); ok {
		return val
	}
	elemOID, elemVal, ok := tr.findValue(elemName)
	elemValFunc := func() pgtype.ValueTranscoder {
		return pgtype.NewValue(elemVal).(pgtype.ValueTranscoder)
	}
	if !ok {
		elemOID = unknownOID
		elemValFunc = defaultVal
	}
	typ := pgtype.NewArrayType(name, elemOID, elemValFunc)
	if elemOID == unknownOID {
		return textPreferrer{typ, name}
	}
	return typ
}

// newConfigurationVersionStatusTimestamps creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'configuration_version_status_timestamps'.
func (tr *typeResolver) newConfigurationVersionStatusTimestamps() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"configuration_version_status_timestamps",
		compositeField{"configuration_version_id", "text", &pgtype.Text{}},
		compositeField{"status", "text", &pgtype.Text{}},
		compositeField{"timestamp", "timestamptz", &pgtype.Timestamptz{}},
	)
}

// newIngressAttributes creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'ingress_attributes'.
func (tr *typeResolver) newIngressAttributes() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"ingress_attributes",
		compositeField{"branch", "text", &pgtype.Text{}},
		compositeField{"commit_sha", "text", &pgtype.Text{}},
		compositeField{"identifier", "text", &pgtype.Text{}},
		compositeField{"is_pull_request", "bool", &pgtype.Bool{}},
		compositeField{"on_default_branch", "bool", &pgtype.Bool{}},
		compositeField{"configuration_version_id", "text", &pgtype.Text{}},
	)
}

// newModuleVersions creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'module_versions'.
func (tr *typeResolver) newModuleVersions() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"module_versions",
		compositeField{"module_version_id", "text", &pgtype.Text{}},
		compositeField{"version", "text", &pgtype.Text{}},
		compositeField{"created_at", "timestamptz", &pgtype.Timestamptz{}},
		compositeField{"updated_at", "timestamptz", &pgtype.Timestamptz{}},
		compositeField{"status", "text", &pgtype.Text{}},
		compositeField{"status_error", "text", &pgtype.Text{}},
		compositeField{"module_id", "text", &pgtype.Text{}},
	)
}

// newPhaseStatusTimestamps creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'phase_status_timestamps'.
func (tr *typeResolver) newPhaseStatusTimestamps() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"phase_status_timestamps",
		compositeField{"run_id", "text", &pgtype.Text{}},
		compositeField{"phase", "text", &pgtype.Text{}},
		compositeField{"status", "text", &pgtype.Text{}},
		compositeField{"timestamp", "timestamptz", &pgtype.Timestamptz{}},
	)
}

// newRepoConnections creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'repo_connections'.
func (tr *typeResolver) newRepoConnections() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"repo_connections",
		compositeField{"webhook_id", "uuid", &pgtype.UUID{}},
		compositeField{"vcs_provider_id", "text", &pgtype.Text{}},
		compositeField{"module_id", "text", &pgtype.Text{}},
		compositeField{"workspace_id", "text", &pgtype.Text{}},
	)
}

// newReport creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'report'.
func (tr *typeResolver) newReport() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"report",
		compositeField{"additions", "int4", &pgtype.Int4{}},
		compositeField{"changes", "int4", &pgtype.Int4{}},
		compositeField{"destructions", "int4", &pgtype.Int4{}},
	)
}

// newRunStatusTimestamps creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'run_status_timestamps'.
func (tr *typeResolver) newRunStatusTimestamps() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"run_status_timestamps",
		compositeField{"run_id", "text", &pgtype.Text{}},
		compositeField{"status", "text", &pgtype.Text{}},
		compositeField{"timestamp", "timestamptz", &pgtype.Timestamptz{}},
	)
}

// newRuns creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'runs'.
func (tr *typeResolver) newRuns() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"runs",
		compositeField{"run_id", "text", &pgtype.Text{}},
		compositeField{"created_at", "timestamptz", &pgtype.Timestamptz{}},
		compositeField{"force_cancel_available_at", "timestamptz", &pgtype.Timestamptz{}},
		compositeField{"is_destroy", "bool", &pgtype.Bool{}},
		compositeField{"position_in_queue", "int4", &pgtype.Int4{}},
		compositeField{"refresh", "bool", &pgtype.Bool{}},
		compositeField{"refresh_only", "bool", &pgtype.Bool{}},
		compositeField{"replace_addrs", "_text", &pgtype.TextArray{}},
		compositeField{"target_addrs", "_text", &pgtype.TextArray{}},
		compositeField{"lock_file", "bytea", &pgtype.Bytea{}},
		compositeField{"status", "text", &pgtype.Text{}},
		compositeField{"workspace_id", "text", &pgtype.Text{}},
		compositeField{"configuration_version_id", "text", &pgtype.Text{}},
		compositeField{"auto_apply", "bool", &pgtype.Bool{}},
		compositeField{"plan_only", "bool", &pgtype.Bool{}},
	)
}

// newStateVersionOutputs creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'state_version_outputs'.
func (tr *typeResolver) newStateVersionOutputs() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"state_version_outputs",
		compositeField{"state_version_output_id", "text", &pgtype.Text{}},
		compositeField{"name", "text", &pgtype.Text{}},
		compositeField{"sensitive", "bool", &pgtype.Bool{}},
		compositeField{"type", "text", &pgtype.Text{}},
		compositeField{"value", "bytea", &pgtype.Bytea{}},
		compositeField{"state_version_id", "text", &pgtype.Text{}},
	)
}

// newTeams creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'teams'.
func (tr *typeResolver) newTeams() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"teams",
		compositeField{"team_id", "text", &pgtype.Text{}},
		compositeField{"name", "text", &pgtype.Text{}},
		compositeField{"created_at", "timestamptz", &pgtype.Timestamptz{}},
		compositeField{"permission_manage_workspaces", "bool", &pgtype.Bool{}},
		compositeField{"permission_manage_vcs", "bool", &pgtype.Bool{}},
		compositeField{"permission_manage_modules", "bool", &pgtype.Bool{}},
		compositeField{"organization_name", "text", &pgtype.Text{}},
		compositeField{"sso_team_id", "text", &pgtype.Text{}},
		compositeField{"visibility", "text", &pgtype.Text{}},
		compositeField{"permission_manage_policies", "bool", &pgtype.Bool{}},
		compositeField{"permission_manage_policy_overrides", "bool", &pgtype.Bool{}},
		compositeField{"permission_manage_providers", "bool", &pgtype.Bool{}},
	)
}

// newUsers creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'users'.
func (tr *typeResolver) newUsers() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"users",
		compositeField{"user_id", "text", &pgtype.Text{}},
		compositeField{"username", "text", &pgtype.Text{}},
		compositeField{"created_at", "timestamptz", &pgtype.Timestamptz{}},
		compositeField{"updated_at", "timestamptz", &pgtype.Timestamptz{}},
		compositeField{"site_admin", "bool", &pgtype.Bool{}},
	)
}

// newWebhooks creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'webhooks'.
func (tr *typeResolver) newWebhooks() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"webhooks",
		compositeField{"webhook_id", "uuid", &pgtype.UUID{}},
		compositeField{"vcs_id", "text", &pgtype.Text{}},
		compositeField{"secret", "text", &pgtype.Text{}},
		compositeField{"identifier", "text", &pgtype.Text{}},
		compositeField{"cloud", "text", &pgtype.Text{}},
	)
}

// newConfigurationVersionStatusTimestampsArray creates a new pgtype.ValueTranscoder for the Postgres
// '_configuration_version_status_timestamps' array type.
func (tr *typeResolver) newConfigurationVersionStatusTimestampsArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_configuration_version_status_timestamps", "configuration_version_status_timestamps", tr.newConfigurationVersionStatusTimestamps)
}

// newModuleVersionsArray creates a new pgtype.ValueTranscoder for the Postgres
// '_module_versions' array type.
func (tr *typeResolver) newModuleVersionsArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_module_versions", "module_versions", tr.newModuleVersions)
}

// newPhaseStatusTimestampsArray creates a new pgtype.ValueTranscoder for the Postgres
// '_phase_status_timestamps' array type.
func (tr *typeResolver) newPhaseStatusTimestampsArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_phase_status_timestamps", "phase_status_timestamps", tr.newPhaseStatusTimestamps)
}

// newRunStatusTimestampsArray creates a new pgtype.ValueTranscoder for the Postgres
// '_run_status_timestamps' array type.
func (tr *typeResolver) newRunStatusTimestampsArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_run_status_timestamps", "run_status_timestamps", tr.newRunStatusTimestamps)
}

// newStateVersionOutputsArray creates a new pgtype.ValueTranscoder for the Postgres
// '_state_version_outputs' array type.
func (tr *typeResolver) newStateVersionOutputsArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_state_version_outputs", "state_version_outputs", tr.newStateVersionOutputs)
}

// newTeamsArray creates a new pgtype.ValueTranscoder for the Postgres
// '_teams' array type.
func (tr *typeResolver) newTeamsArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_teams", "teams", tr.newTeams)
}

const insertAgentTokenSQL = `INSERT INTO agent_tokens (
    token_id,
    created_at,
    description,
    organization_name
) VALUES (
    $1,
    $2,
    $3,
    $4
);`

type InsertAgentTokenParams struct {
	TokenID          pgtype.Text
	CreatedAt        pgtype.Timestamptz
	Description      pgtype.Text
	OrganizationName pgtype.Text
}

// InsertAgentToken implements Querier.InsertAgentToken.
func (q *DBQuerier) InsertAgentToken(ctx context.Context, params InsertAgentTokenParams) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertAgentToken")
	cmdTag, err := q.conn.Exec(ctx, insertAgentTokenSQL, params.TokenID, params.CreatedAt, params.Description, params.OrganizationName)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query InsertAgentToken: %w", err)
	}
	return cmdTag, err
}

// InsertAgentTokenBatch implements Querier.InsertAgentTokenBatch.
func (q *DBQuerier) InsertAgentTokenBatch(batch genericBatch, params InsertAgentTokenParams) {
	batch.Queue(insertAgentTokenSQL, params.TokenID, params.CreatedAt, params.Description, params.OrganizationName)
}

// InsertAgentTokenScan implements Querier.InsertAgentTokenScan.
func (q *DBQuerier) InsertAgentTokenScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec InsertAgentTokenBatch: %w", err)
	}
	return cmdTag, err
}

const findAgentTokenByIDSQL = `SELECT *
FROM agent_tokens
WHERE token_id = $1
;`

type FindAgentTokenByIDRow struct {
	TokenID          pgtype.Text        `json:"token_id"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
	Description      pgtype.Text        `json:"description"`
	OrganizationName pgtype.Text        `json:"organization_name"`
}

// FindAgentTokenByID implements Querier.FindAgentTokenByID.
func (q *DBQuerier) FindAgentTokenByID(ctx context.Context, tokenID pgtype.Text) (FindAgentTokenByIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindAgentTokenByID")
	row := q.conn.QueryRow(ctx, findAgentTokenByIDSQL, tokenID)
	var item FindAgentTokenByIDRow
	if err := row.Scan(&item.TokenID, &item.CreatedAt, &item.Description, &item.OrganizationName); err != nil {
		return item, fmt.Errorf("query FindAgentTokenByID: %w", err)
	}
	return item, nil
}

// FindAgentTokenByIDBatch implements Querier.FindAgentTokenByIDBatch.
func (q *DBQuerier) FindAgentTokenByIDBatch(batch genericBatch, tokenID pgtype.Text) {
	batch.Queue(findAgentTokenByIDSQL, tokenID)
}

// FindAgentTokenByIDScan implements Querier.FindAgentTokenByIDScan.
func (q *DBQuerier) FindAgentTokenByIDScan(results pgx.BatchResults) (FindAgentTokenByIDRow, error) {
	row := results.QueryRow()
	var item FindAgentTokenByIDRow
	if err := row.Scan(&item.TokenID, &item.CreatedAt, &item.Description, &item.OrganizationName); err != nil {
		return item, fmt.Errorf("scan FindAgentTokenByIDBatch row: %w", err)
	}
	return item, nil
}

const findAgentTokensSQL = `SELECT *
FROM agent_tokens
WHERE organization_name = $1
ORDER BY created_at DESC
;`

type FindAgentTokensRow struct {
	TokenID          pgtype.Text        `json:"token_id"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
	Description      pgtype.Text        `json:"description"`
	OrganizationName pgtype.Text        `json:"organization_name"`
}

// FindAgentTokens implements Querier.FindAgentTokens.
func (q *DBQuerier) FindAgentTokens(ctx context.Context, organizationName pgtype.Text) ([]FindAgentTokensRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindAgentTokens")
	rows, err := q.conn.Query(ctx, findAgentTokensSQL, organizationName)
	if err != nil {
		return nil, fmt.Errorf("query FindAgentTokens: %w", err)
	}
	defer rows.Close()
	items := []FindAgentTokensRow{}
	for rows.Next() {
		var item FindAgentTokensRow
		if err := rows.Scan(&item.TokenID, &item.CreatedAt, &item.Description, &item.OrganizationName); err != nil {
			return nil, fmt.Errorf("scan FindAgentTokens row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindAgentTokens rows: %w", err)
	}
	return items, err
}

// FindAgentTokensBatch implements Querier.FindAgentTokensBatch.
func (q *DBQuerier) FindAgentTokensBatch(batch genericBatch, organizationName pgtype.Text) {
	batch.Queue(findAgentTokensSQL, organizationName)
}

// FindAgentTokensScan implements Querier.FindAgentTokensScan.
func (q *DBQuerier) FindAgentTokensScan(results pgx.BatchResults) ([]FindAgentTokensRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query FindAgentTokensBatch: %w", err)
	}
	defer rows.Close()
	items := []FindAgentTokensRow{}
	for rows.Next() {
		var item FindAgentTokensRow
		if err := rows.Scan(&item.TokenID, &item.CreatedAt, &item.Description, &item.OrganizationName); err != nil {
			return nil, fmt.Errorf("scan FindAgentTokensBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindAgentTokensBatch rows: %w", err)
	}
	return items, err
}

const deleteAgentTokenByIDSQL = `DELETE
FROM agent_tokens
WHERE token_id = $1
RETURNING token_id
;`

// DeleteAgentTokenByID implements Querier.DeleteAgentTokenByID.
func (q *DBQuerier) DeleteAgentTokenByID(ctx context.Context, tokenID pgtype.Text) (pgtype.Text, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteAgentTokenByID")
	row := q.conn.QueryRow(ctx, deleteAgentTokenByIDSQL, tokenID)
	var item pgtype.Text
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("query DeleteAgentTokenByID: %w", err)
	}
	return item, nil
}

// DeleteAgentTokenByIDBatch implements Querier.DeleteAgentTokenByIDBatch.
func (q *DBQuerier) DeleteAgentTokenByIDBatch(batch genericBatch, tokenID pgtype.Text) {
	batch.Queue(deleteAgentTokenByIDSQL, tokenID)
}

// DeleteAgentTokenByIDScan implements Querier.DeleteAgentTokenByIDScan.
func (q *DBQuerier) DeleteAgentTokenByIDScan(results pgx.BatchResults) (pgtype.Text, error) {
	row := results.QueryRow()
	var item pgtype.Text
	if err := row.Scan(&item); err != nil {
		return item, fmt.Errorf("scan DeleteAgentTokenByIDBatch row: %w", err)
	}
	return item, nil
}

// textPreferrer wraps a pgtype.ValueTranscoder and sets the preferred encoding
// format to text instead binary (the default). pggen uses the text format
// when the OID is unknownOID because the binary format requires the OID.
// Typically occurs if the results from QueryAllDataTypes aren't passed to
// NewQuerierConfig.
type textPreferrer struct {
	pgtype.ValueTranscoder
	typeName string
}

// PreferredParamFormat implements pgtype.ParamFormatPreferrer.
func (t textPreferrer) PreferredParamFormat() int16 { return pgtype.TextFormatCode }

func (t textPreferrer) NewTypeValue() pgtype.Value {
	return textPreferrer{pgtype.NewValue(t.ValueTranscoder).(pgtype.ValueTranscoder), t.typeName}
}

func (t textPreferrer) TypeName() string {
	return t.typeName
}

// unknownOID means we don't know the OID for a type. This is okay for decoding
// because pgx call DecodeText or DecodeBinary without requiring the OID. For
// encoding parameters, pggen uses textPreferrer if the OID is unknown.
const unknownOID = 0
