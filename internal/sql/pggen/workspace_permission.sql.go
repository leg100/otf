// Code generated by pggen. DO NOT EDIT.

package pggen

import (
	"context"
	"fmt"

	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

const upsertWorkspacePermissionSQL = `INSERT INTO workspace_permissions (
    workspace_id,
    team_id,
    role
) SELECT w.workspace_id, t.team_id, $1
    FROM teams t
    JOIN organizations o ON t.organization_name = o.name
    JOIN workspaces w ON w.organization_name = o.name
    WHERE t.name = $2
    AND w.workspace_id = $3
ON CONFLICT (workspace_id, team_id) DO UPDATE SET role = $1
;`

type UpsertWorkspacePermissionParams struct {
	Role        pgtype.Text
	TeamName    pgtype.Text
	WorkspaceID pgtype.Text
}

// UpsertWorkspacePermission implements Querier.UpsertWorkspacePermission.
func (q *DBQuerier) UpsertWorkspacePermission(ctx context.Context, params UpsertWorkspacePermissionParams) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpsertWorkspacePermission")
	cmdTag, err := q.conn.Exec(ctx, upsertWorkspacePermissionSQL, params.Role, params.TeamName, params.WorkspaceID)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query UpsertWorkspacePermission: %w", err)
	}
	return cmdTag, err
}

// UpsertWorkspacePermissionBatch implements Querier.UpsertWorkspacePermissionBatch.
func (q *DBQuerier) UpsertWorkspacePermissionBatch(batch genericBatch, params UpsertWorkspacePermissionParams) {
	batch.Queue(upsertWorkspacePermissionSQL, params.Role, params.TeamName, params.WorkspaceID)
}

// UpsertWorkspacePermissionScan implements Querier.UpsertWorkspacePermissionScan.
func (q *DBQuerier) UpsertWorkspacePermissionScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec UpsertWorkspacePermissionBatch: %w", err)
	}
	return cmdTag, err
}

const findWorkspacePermissionsByWorkspaceIDSQL = `SELECT
    wp.role,
    (t.*)::"teams" AS team
FROM workspace_permissions wp
JOIN teams t USING (team_id)
WHERE wp.workspace_id = $1
;`

type FindWorkspacePermissionsByWorkspaceIDRow struct {
	Role pgtype.Text `json:"role"`
	Team *Teams      `json:"team"`
}

// FindWorkspacePermissionsByWorkspaceID implements Querier.FindWorkspacePermissionsByWorkspaceID.
func (q *DBQuerier) FindWorkspacePermissionsByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) ([]FindWorkspacePermissionsByWorkspaceIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindWorkspacePermissionsByWorkspaceID")
	rows, err := q.conn.Query(ctx, findWorkspacePermissionsByWorkspaceIDSQL, workspaceID)
	if err != nil {
		return nil, fmt.Errorf("query FindWorkspacePermissionsByWorkspaceID: %w", err)
	}
	defer rows.Close()
	items := []FindWorkspacePermissionsByWorkspaceIDRow{}
	teamRow := q.types.newTeams()
	for rows.Next() {
		var item FindWorkspacePermissionsByWorkspaceIDRow
		if err := rows.Scan(&item.Role, teamRow); err != nil {
			return nil, fmt.Errorf("scan FindWorkspacePermissionsByWorkspaceID row: %w", err)
		}
		if err := teamRow.AssignTo(&item.Team); err != nil {
			return nil, fmt.Errorf("assign FindWorkspacePermissionsByWorkspaceID row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindWorkspacePermissionsByWorkspaceID rows: %w", err)
	}
	return items, err
}

// FindWorkspacePermissionsByWorkspaceIDBatch implements Querier.FindWorkspacePermissionsByWorkspaceIDBatch.
func (q *DBQuerier) FindWorkspacePermissionsByWorkspaceIDBatch(batch genericBatch, workspaceID pgtype.Text) {
	batch.Queue(findWorkspacePermissionsByWorkspaceIDSQL, workspaceID)
}

// FindWorkspacePermissionsByWorkspaceIDScan implements Querier.FindWorkspacePermissionsByWorkspaceIDScan.
func (q *DBQuerier) FindWorkspacePermissionsByWorkspaceIDScan(results pgx.BatchResults) ([]FindWorkspacePermissionsByWorkspaceIDRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query FindWorkspacePermissionsByWorkspaceIDBatch: %w", err)
	}
	defer rows.Close()
	items := []FindWorkspacePermissionsByWorkspaceIDRow{}
	teamRow := q.types.newTeams()
	for rows.Next() {
		var item FindWorkspacePermissionsByWorkspaceIDRow
		if err := rows.Scan(&item.Role, teamRow); err != nil {
			return nil, fmt.Errorf("scan FindWorkspacePermissionsByWorkspaceIDBatch row: %w", err)
		}
		if err := teamRow.AssignTo(&item.Team); err != nil {
			return nil, fmt.Errorf("assign FindWorkspacePermissionsByWorkspaceID row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindWorkspacePermissionsByWorkspaceIDBatch rows: %w", err)
	}
	return items, err
}

const deleteWorkspacePermissionByIDSQL = `DELETE
FROM workspace_permissions wp
USING workspaces w, teams t
WHERE wp.team_id = t.team_id
AND wp.workspace_id = $1
AND w.workspace_id = wp.workspace_id
AND w.organization_name = t.organization_name
AND t.name = $2
;`

// DeleteWorkspacePermissionByID implements Querier.DeleteWorkspacePermissionByID.
func (q *DBQuerier) DeleteWorkspacePermissionByID(ctx context.Context, workspaceID pgtype.Text, teamName pgtype.Text) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteWorkspacePermissionByID")
	cmdTag, err := q.conn.Exec(ctx, deleteWorkspacePermissionByIDSQL, workspaceID, teamName)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query DeleteWorkspacePermissionByID: %w", err)
	}
	return cmdTag, err
}

// DeleteWorkspacePermissionByIDBatch implements Querier.DeleteWorkspacePermissionByIDBatch.
func (q *DBQuerier) DeleteWorkspacePermissionByIDBatch(batch genericBatch, workspaceID pgtype.Text, teamName pgtype.Text) {
	batch.Queue(deleteWorkspacePermissionByIDSQL, workspaceID, teamName)
}

// DeleteWorkspacePermissionByIDScan implements Querier.DeleteWorkspacePermissionByIDScan.
func (q *DBQuerier) DeleteWorkspacePermissionByIDScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec DeleteWorkspacePermissionByIDBatch: %w", err)
	}
	return cmdTag, err
}
