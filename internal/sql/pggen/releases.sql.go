// Code generated by pggen. DO NOT EDIT.

package pggen

import (
	"context"
	"fmt"

	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

const updateLatestTerraformVersionSQL = `UPDATE latest_terraform_version
SET version = $1;`

// UpdateLatestTerraformVersion implements Querier.UpdateLatestTerraformVersion.
func (q *DBQuerier) UpdateLatestTerraformVersion(ctx context.Context, version pgtype.Text) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateLatestTerraformVersion")
	cmdTag, err := q.conn.Exec(ctx, updateLatestTerraformVersionSQL, version)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query UpdateLatestTerraformVersion: %w", err)
	}
	return cmdTag, err
}

// UpdateLatestTerraformVersionBatch implements Querier.UpdateLatestTerraformVersionBatch.
func (q *DBQuerier) UpdateLatestTerraformVersionBatch(batch genericBatch, version pgtype.Text) {
	batch.Queue(updateLatestTerraformVersionSQL, version)
}

// UpdateLatestTerraformVersionScan implements Querier.UpdateLatestTerraformVersionScan.
func (q *DBQuerier) UpdateLatestTerraformVersionScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec UpdateLatestTerraformVersionBatch: %w", err)
	}
	return cmdTag, err
}

const updateLatestTerraformVersionCheckpointSQL = `UPDATE latest_terraform_version
SET checkpoint = current_timestamp;`

// UpdateLatestTerraformVersionCheckpoint implements Querier.UpdateLatestTerraformVersionCheckpoint.
func (q *DBQuerier) UpdateLatestTerraformVersionCheckpoint(ctx context.Context) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateLatestTerraformVersionCheckpoint")
	cmdTag, err := q.conn.Exec(ctx, updateLatestTerraformVersionCheckpointSQL)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query UpdateLatestTerraformVersionCheckpoint: %w", err)
	}
	return cmdTag, err
}

// UpdateLatestTerraformVersionCheckpointBatch implements Querier.UpdateLatestTerraformVersionCheckpointBatch.
func (q *DBQuerier) UpdateLatestTerraformVersionCheckpointBatch(batch genericBatch) {
	batch.Queue(updateLatestTerraformVersionCheckpointSQL)
}

// UpdateLatestTerraformVersionCheckpointScan implements Querier.UpdateLatestTerraformVersionCheckpointScan.
func (q *DBQuerier) UpdateLatestTerraformVersionCheckpointScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec UpdateLatestTerraformVersionCheckpointBatch: %w", err)
	}
	return cmdTag, err
}

const findLatestTerraformVersionSQL = `SELECT *
FROM latest_terraform_version;`

type FindLatestTerraformVersionRow struct {
	Version    pgtype.Text        `json:"version"`
	Checkpoint pgtype.Timestamptz `json:"checkpoint"`
}

// FindLatestTerraformVersion implements Querier.FindLatestTerraformVersion.
func (q *DBQuerier) FindLatestTerraformVersion(ctx context.Context) (FindLatestTerraformVersionRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindLatestTerraformVersion")
	row := q.conn.QueryRow(ctx, findLatestTerraformVersionSQL)
	var item FindLatestTerraformVersionRow
	if err := row.Scan(&item.Version, &item.Checkpoint); err != nil {
		return item, fmt.Errorf("query FindLatestTerraformVersion: %w", err)
	}
	return item, nil
}

// FindLatestTerraformVersionBatch implements Querier.FindLatestTerraformVersionBatch.
func (q *DBQuerier) FindLatestTerraformVersionBatch(batch genericBatch) {
	batch.Queue(findLatestTerraformVersionSQL)
}

// FindLatestTerraformVersionScan implements Querier.FindLatestTerraformVersionScan.
func (q *DBQuerier) FindLatestTerraformVersionScan(results pgx.BatchResults) (FindLatestTerraformVersionRow, error) {
	row := results.QueryRow()
	var item FindLatestTerraformVersionRow
	if err := row.Scan(&item.Version, &item.Checkpoint); err != nil {
		return item, fmt.Errorf("scan FindLatestTerraformVersionBatch row: %w", err)
	}
	return item, nil
}
