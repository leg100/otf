// Code generated by pggen. DO NOT EDIT.

package pggen

import (
	"context"
	"fmt"

	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

// Querier is a typesafe Go interface backed by SQL queries.
//
// Methods ending with Batch enqueue a query to run later in a pgx.Batch. After
// calling SendBatch on pgx.Conn, pgxpool.Pool, or pgx.Tx, use the Scan methods
// to parse the results.
type Querier interface {
	InsertAgent(ctx context.Context, params InsertAgentParams) (pgconn.CommandTag, error)
	// InsertAgentBatch enqueues a InsertAgent query into batch to be executed
	// later by the batch.
	InsertAgentBatch(batch genericBatch, params InsertAgentParams)
	// InsertAgentScan scans the result of an executed InsertAgentBatch query.
	InsertAgentScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	UpdateAgent(ctx context.Context, params UpdateAgentParams) (UpdateAgentRow, error)
	// UpdateAgentBatch enqueues a UpdateAgent query into batch to be executed
	// later by the batch.
	UpdateAgentBatch(batch genericBatch, params UpdateAgentParams)
	// UpdateAgentScan scans the result of an executed UpdateAgentBatch query.
	UpdateAgentScan(results pgx.BatchResults) (UpdateAgentRow, error)

	FindAgents(ctx context.Context) ([]FindAgentsRow, error)
	// FindAgentsBatch enqueues a FindAgents query into batch to be executed
	// later by the batch.
	FindAgentsBatch(batch genericBatch)
	// FindAgentsScan scans the result of an executed FindAgentsBatch query.
	FindAgentsScan(results pgx.BatchResults) ([]FindAgentsRow, error)

	FindAgentsByOrganization(ctx context.Context, organizationName pgtype.Text) ([]FindAgentsByOrganizationRow, error)
	// FindAgentsByOrganizationBatch enqueues a FindAgentsByOrganization query into batch to be executed
	// later by the batch.
	FindAgentsByOrganizationBatch(batch genericBatch, organizationName pgtype.Text)
	// FindAgentsByOrganizationScan scans the result of an executed FindAgentsByOrganizationBatch query.
	FindAgentsByOrganizationScan(results pgx.BatchResults) ([]FindAgentsByOrganizationRow, error)

	FindAgentsByPoolID(ctx context.Context, agentPoolID pgtype.Text) ([]FindAgentsByPoolIDRow, error)
	// FindAgentsByPoolIDBatch enqueues a FindAgentsByPoolID query into batch to be executed
	// later by the batch.
	FindAgentsByPoolIDBatch(batch genericBatch, agentPoolID pgtype.Text)
	// FindAgentsByPoolIDScan scans the result of an executed FindAgentsByPoolIDBatch query.
	FindAgentsByPoolIDScan(results pgx.BatchResults) ([]FindAgentsByPoolIDRow, error)

	FindServerAgents(ctx context.Context) ([]FindServerAgentsRow, error)
	// FindServerAgentsBatch enqueues a FindServerAgents query into batch to be executed
	// later by the batch.
	FindServerAgentsBatch(batch genericBatch)
	// FindServerAgentsScan scans the result of an executed FindServerAgentsBatch query.
	FindServerAgentsScan(results pgx.BatchResults) ([]FindServerAgentsRow, error)

	FindAgentByID(ctx context.Context, agentID pgtype.Text) (FindAgentByIDRow, error)
	// FindAgentByIDBatch enqueues a FindAgentByID query into batch to be executed
	// later by the batch.
	FindAgentByIDBatch(batch genericBatch, agentID pgtype.Text)
	// FindAgentByIDScan scans the result of an executed FindAgentByIDBatch query.
	FindAgentByIDScan(results pgx.BatchResults) (FindAgentByIDRow, error)

	FindAgentByIDForUpdate(ctx context.Context, agentID pgtype.Text) (FindAgentByIDForUpdateRow, error)
	// FindAgentByIDForUpdateBatch enqueues a FindAgentByIDForUpdate query into batch to be executed
	// later by the batch.
	FindAgentByIDForUpdateBatch(batch genericBatch, agentID pgtype.Text)
	// FindAgentByIDForUpdateScan scans the result of an executed FindAgentByIDForUpdateBatch query.
	FindAgentByIDForUpdateScan(results pgx.BatchResults) (FindAgentByIDForUpdateRow, error)

	DeleteAgent(ctx context.Context, agentID pgtype.Text) (DeleteAgentRow, error)
	// DeleteAgentBatch enqueues a DeleteAgent query into batch to be executed
	// later by the batch.
	DeleteAgentBatch(batch genericBatch, agentID pgtype.Text)
	// DeleteAgentScan scans the result of an executed DeleteAgentBatch query.
	DeleteAgentScan(results pgx.BatchResults) (DeleteAgentRow, error)

	InsertAgentPool(ctx context.Context, params InsertAgentPoolParams) (pgconn.CommandTag, error)
	// InsertAgentPoolBatch enqueues a InsertAgentPool query into batch to be executed
	// later by the batch.
	InsertAgentPoolBatch(batch genericBatch, params InsertAgentPoolParams)
	// InsertAgentPoolScan scans the result of an executed InsertAgentPoolBatch query.
	InsertAgentPoolScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindAgentPools(ctx context.Context) ([]FindAgentPoolsRow, error)
	// FindAgentPoolsBatch enqueues a FindAgentPools query into batch to be executed
	// later by the batch.
	FindAgentPoolsBatch(batch genericBatch)
	// FindAgentPoolsScan scans the result of an executed FindAgentPoolsBatch query.
	FindAgentPoolsScan(results pgx.BatchResults) ([]FindAgentPoolsRow, error)

	// Find agent pools in an organization, optionally filtering by any combination of:
	// (a) name_substring: pool name contains substring
	// (b) allowed_workspace_name: workspace with name is allowed to use pool
	// (c) allowed_workspace_id: workspace with ID is allowed to use pool
	//
	FindAgentPoolsByOrganization(ctx context.Context, params FindAgentPoolsByOrganizationParams) ([]FindAgentPoolsByOrganizationRow, error)
	// FindAgentPoolsByOrganizationBatch enqueues a FindAgentPoolsByOrganization query into batch to be executed
	// later by the batch.
	FindAgentPoolsByOrganizationBatch(batch genericBatch, params FindAgentPoolsByOrganizationParams)
	// FindAgentPoolsByOrganizationScan scans the result of an executed FindAgentPoolsByOrganizationBatch query.
	FindAgentPoolsByOrganizationScan(results pgx.BatchResults) ([]FindAgentPoolsByOrganizationRow, error)

	FindAgentPool(ctx context.Context, poolID pgtype.Text) (FindAgentPoolRow, error)
	// FindAgentPoolBatch enqueues a FindAgentPool query into batch to be executed
	// later by the batch.
	FindAgentPoolBatch(batch genericBatch, poolID pgtype.Text)
	// FindAgentPoolScan scans the result of an executed FindAgentPoolBatch query.
	FindAgentPoolScan(results pgx.BatchResults) (FindAgentPoolRow, error)

	FindAgentPoolByAgentTokenID(ctx context.Context, agentTokenID pgtype.Text) (FindAgentPoolByAgentTokenIDRow, error)
	// FindAgentPoolByAgentTokenIDBatch enqueues a FindAgentPoolByAgentTokenID query into batch to be executed
	// later by the batch.
	FindAgentPoolByAgentTokenIDBatch(batch genericBatch, agentTokenID pgtype.Text)
	// FindAgentPoolByAgentTokenIDScan scans the result of an executed FindAgentPoolByAgentTokenIDBatch query.
	FindAgentPoolByAgentTokenIDScan(results pgx.BatchResults) (FindAgentPoolByAgentTokenIDRow, error)

	UpdateAgentPool(ctx context.Context, params UpdateAgentPoolParams) (UpdateAgentPoolRow, error)
	// UpdateAgentPoolBatch enqueues a UpdateAgentPool query into batch to be executed
	// later by the batch.
	UpdateAgentPoolBatch(batch genericBatch, params UpdateAgentPoolParams)
	// UpdateAgentPoolScan scans the result of an executed UpdateAgentPoolBatch query.
	UpdateAgentPoolScan(results pgx.BatchResults) (UpdateAgentPoolRow, error)

	DeleteAgentPool(ctx context.Context, poolID pgtype.Text) (DeleteAgentPoolRow, error)
	// DeleteAgentPoolBatch enqueues a DeleteAgentPool query into batch to be executed
	// later by the batch.
	DeleteAgentPoolBatch(batch genericBatch, poolID pgtype.Text)
	// DeleteAgentPoolScan scans the result of an executed DeleteAgentPoolBatch query.
	DeleteAgentPoolScan(results pgx.BatchResults) (DeleteAgentPoolRow, error)

	InsertAgentPoolAllowedWorkspace(ctx context.Context, poolID pgtype.Text, workspaceID pgtype.Text) (pgconn.CommandTag, error)
	// InsertAgentPoolAllowedWorkspaceBatch enqueues a InsertAgentPoolAllowedWorkspace query into batch to be executed
	// later by the batch.
	InsertAgentPoolAllowedWorkspaceBatch(batch genericBatch, poolID pgtype.Text, workspaceID pgtype.Text)
	// InsertAgentPoolAllowedWorkspaceScan scans the result of an executed InsertAgentPoolAllowedWorkspaceBatch query.
	InsertAgentPoolAllowedWorkspaceScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	DeleteAgentPoolAllowedWorkspace(ctx context.Context, poolID pgtype.Text, workspaceID pgtype.Text) (pgconn.CommandTag, error)
	// DeleteAgentPoolAllowedWorkspaceBatch enqueues a DeleteAgentPoolAllowedWorkspace query into batch to be executed
	// later by the batch.
	DeleteAgentPoolAllowedWorkspaceBatch(batch genericBatch, poolID pgtype.Text, workspaceID pgtype.Text)
	// DeleteAgentPoolAllowedWorkspaceScan scans the result of an executed DeleteAgentPoolAllowedWorkspaceBatch query.
	DeleteAgentPoolAllowedWorkspaceScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	InsertAgentToken(ctx context.Context, params InsertAgentTokenParams) (pgconn.CommandTag, error)
	// InsertAgentTokenBatch enqueues a InsertAgentToken query into batch to be executed
	// later by the batch.
	InsertAgentTokenBatch(batch genericBatch, params InsertAgentTokenParams)
	// InsertAgentTokenScan scans the result of an executed InsertAgentTokenBatch query.
	InsertAgentTokenScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindAgentTokenByID(ctx context.Context, agentTokenID pgtype.Text) (FindAgentTokenByIDRow, error)
	// FindAgentTokenByIDBatch enqueues a FindAgentTokenByID query into batch to be executed
	// later by the batch.
	FindAgentTokenByIDBatch(batch genericBatch, agentTokenID pgtype.Text)
	// FindAgentTokenByIDScan scans the result of an executed FindAgentTokenByIDBatch query.
	FindAgentTokenByIDScan(results pgx.BatchResults) (FindAgentTokenByIDRow, error)

	FindAgentTokensByAgentPoolID(ctx context.Context, agentPoolID pgtype.Text) ([]FindAgentTokensByAgentPoolIDRow, error)
	// FindAgentTokensByAgentPoolIDBatch enqueues a FindAgentTokensByAgentPoolID query into batch to be executed
	// later by the batch.
	FindAgentTokensByAgentPoolIDBatch(batch genericBatch, agentPoolID pgtype.Text)
	// FindAgentTokensByAgentPoolIDScan scans the result of an executed FindAgentTokensByAgentPoolIDBatch query.
	FindAgentTokensByAgentPoolIDScan(results pgx.BatchResults) ([]FindAgentTokensByAgentPoolIDRow, error)

	DeleteAgentTokenByID(ctx context.Context, agentTokenID pgtype.Text) (pgtype.Text, error)
	// DeleteAgentTokenByIDBatch enqueues a DeleteAgentTokenByID query into batch to be executed
	// later by the batch.
	DeleteAgentTokenByIDBatch(batch genericBatch, agentTokenID pgtype.Text)
	// DeleteAgentTokenByIDScan scans the result of an executed DeleteAgentTokenByIDBatch query.
	DeleteAgentTokenByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertApply(ctx context.Context, runID pgtype.Text, status pgtype.Text) (pgconn.CommandTag, error)
	// InsertApplyBatch enqueues a InsertApply query into batch to be executed
	// later by the batch.
	InsertApplyBatch(batch genericBatch, runID pgtype.Text, status pgtype.Text)
	// InsertApplyScan scans the result of an executed InsertApplyBatch query.
	InsertApplyScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	UpdateAppliedChangesByID(ctx context.Context, params UpdateAppliedChangesByIDParams) (pgtype.Text, error)
	// UpdateAppliedChangesByIDBatch enqueues a UpdateAppliedChangesByID query into batch to be executed
	// later by the batch.
	UpdateAppliedChangesByIDBatch(batch genericBatch, params UpdateAppliedChangesByIDParams)
	// UpdateAppliedChangesByIDScan scans the result of an executed UpdateAppliedChangesByIDBatch query.
	UpdateAppliedChangesByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	UpdateApplyStatusByID(ctx context.Context, status pgtype.Text, runID pgtype.Text) (pgtype.Text, error)
	// UpdateApplyStatusByIDBatch enqueues a UpdateApplyStatusByID query into batch to be executed
	// later by the batch.
	UpdateApplyStatusByIDBatch(batch genericBatch, status pgtype.Text, runID pgtype.Text)
	// UpdateApplyStatusByIDScan scans the result of an executed UpdateApplyStatusByIDBatch query.
	UpdateApplyStatusByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertConfigurationVersion(ctx context.Context, params InsertConfigurationVersionParams) (pgconn.CommandTag, error)
	// InsertConfigurationVersionBatch enqueues a InsertConfigurationVersion query into batch to be executed
	// later by the batch.
	InsertConfigurationVersionBatch(batch genericBatch, params InsertConfigurationVersionParams)
	// InsertConfigurationVersionScan scans the result of an executed InsertConfigurationVersionBatch query.
	InsertConfigurationVersionScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	InsertConfigurationVersionStatusTimestamp(ctx context.Context, params InsertConfigurationVersionStatusTimestampParams) (InsertConfigurationVersionStatusTimestampRow, error)
	// InsertConfigurationVersionStatusTimestampBatch enqueues a InsertConfigurationVersionStatusTimestamp query into batch to be executed
	// later by the batch.
	InsertConfigurationVersionStatusTimestampBatch(batch genericBatch, params InsertConfigurationVersionStatusTimestampParams)
	// InsertConfigurationVersionStatusTimestampScan scans the result of an executed InsertConfigurationVersionStatusTimestampBatch query.
	InsertConfigurationVersionStatusTimestampScan(results pgx.BatchResults) (InsertConfigurationVersionStatusTimestampRow, error)

	// FindConfigurationVersions finds configuration_versions for a given workspace.
	// Results are paginated with limit and offset, and total count is returned.
	//
	FindConfigurationVersionsByWorkspaceID(ctx context.Context, params FindConfigurationVersionsByWorkspaceIDParams) ([]FindConfigurationVersionsByWorkspaceIDRow, error)
	// FindConfigurationVersionsByWorkspaceIDBatch enqueues a FindConfigurationVersionsByWorkspaceID query into batch to be executed
	// later by the batch.
	FindConfigurationVersionsByWorkspaceIDBatch(batch genericBatch, params FindConfigurationVersionsByWorkspaceIDParams)
	// FindConfigurationVersionsByWorkspaceIDScan scans the result of an executed FindConfigurationVersionsByWorkspaceIDBatch query.
	FindConfigurationVersionsByWorkspaceIDScan(results pgx.BatchResults) ([]FindConfigurationVersionsByWorkspaceIDRow, error)

	CountConfigurationVersionsByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) (pgtype.Int8, error)
	// CountConfigurationVersionsByWorkspaceIDBatch enqueues a CountConfigurationVersionsByWorkspaceID query into batch to be executed
	// later by the batch.
	CountConfigurationVersionsByWorkspaceIDBatch(batch genericBatch, workspaceID pgtype.Text)
	// CountConfigurationVersionsByWorkspaceIDScan scans the result of an executed CountConfigurationVersionsByWorkspaceIDBatch query.
	CountConfigurationVersionsByWorkspaceIDScan(results pgx.BatchResults) (pgtype.Int8, error)

	// FindConfigurationVersionByID finds a configuration_version by its id.
	//
	FindConfigurationVersionByID(ctx context.Context, configurationVersionID pgtype.Text) (FindConfigurationVersionByIDRow, error)
	// FindConfigurationVersionByIDBatch enqueues a FindConfigurationVersionByID query into batch to be executed
	// later by the batch.
	FindConfigurationVersionByIDBatch(batch genericBatch, configurationVersionID pgtype.Text)
	// FindConfigurationVersionByIDScan scans the result of an executed FindConfigurationVersionByIDBatch query.
	FindConfigurationVersionByIDScan(results pgx.BatchResults) (FindConfigurationVersionByIDRow, error)

	FindConfigurationVersionLatestByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) (FindConfigurationVersionLatestByWorkspaceIDRow, error)
	// FindConfigurationVersionLatestByWorkspaceIDBatch enqueues a FindConfigurationVersionLatestByWorkspaceID query into batch to be executed
	// later by the batch.
	FindConfigurationVersionLatestByWorkspaceIDBatch(batch genericBatch, workspaceID pgtype.Text)
	// FindConfigurationVersionLatestByWorkspaceIDScan scans the result of an executed FindConfigurationVersionLatestByWorkspaceIDBatch query.
	FindConfigurationVersionLatestByWorkspaceIDScan(results pgx.BatchResults) (FindConfigurationVersionLatestByWorkspaceIDRow, error)

	FindConfigurationVersionByIDForUpdate(ctx context.Context, configurationVersionID pgtype.Text) (FindConfigurationVersionByIDForUpdateRow, error)
	// FindConfigurationVersionByIDForUpdateBatch enqueues a FindConfigurationVersionByIDForUpdate query into batch to be executed
	// later by the batch.
	FindConfigurationVersionByIDForUpdateBatch(batch genericBatch, configurationVersionID pgtype.Text)
	// FindConfigurationVersionByIDForUpdateScan scans the result of an executed FindConfigurationVersionByIDForUpdateBatch query.
	FindConfigurationVersionByIDForUpdateScan(results pgx.BatchResults) (FindConfigurationVersionByIDForUpdateRow, error)

	// DownloadConfigurationVersion gets a configuration_version config
	// tarball.
	//
	DownloadConfigurationVersion(ctx context.Context, configurationVersionID pgtype.Text) ([]byte, error)
	// DownloadConfigurationVersionBatch enqueues a DownloadConfigurationVersion query into batch to be executed
	// later by the batch.
	DownloadConfigurationVersionBatch(batch genericBatch, configurationVersionID pgtype.Text)
	// DownloadConfigurationVersionScan scans the result of an executed DownloadConfigurationVersionBatch query.
	DownloadConfigurationVersionScan(results pgx.BatchResults) ([]byte, error)

	UpdateConfigurationVersionErroredByID(ctx context.Context, id pgtype.Text) (pgtype.Text, error)
	// UpdateConfigurationVersionErroredByIDBatch enqueues a UpdateConfigurationVersionErroredByID query into batch to be executed
	// later by the batch.
	UpdateConfigurationVersionErroredByIDBatch(batch genericBatch, id pgtype.Text)
	// UpdateConfigurationVersionErroredByIDScan scans the result of an executed UpdateConfigurationVersionErroredByIDBatch query.
	UpdateConfigurationVersionErroredByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	UpdateConfigurationVersionConfigByID(ctx context.Context, config []byte, id pgtype.Text) (pgtype.Text, error)
	// UpdateConfigurationVersionConfigByIDBatch enqueues a UpdateConfigurationVersionConfigByID query into batch to be executed
	// later by the batch.
	UpdateConfigurationVersionConfigByIDBatch(batch genericBatch, config []byte, id pgtype.Text)
	// UpdateConfigurationVersionConfigByIDScan scans the result of an executed UpdateConfigurationVersionConfigByIDBatch query.
	UpdateConfigurationVersionConfigByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	DeleteConfigurationVersionByID(ctx context.Context, id pgtype.Text) (pgtype.Text, error)
	// DeleteConfigurationVersionByIDBatch enqueues a DeleteConfigurationVersionByID query into batch to be executed
	// later by the batch.
	DeleteConfigurationVersionByIDBatch(batch genericBatch, id pgtype.Text)
	// DeleteConfigurationVersionByIDScan scans the result of an executed DeleteConfigurationVersionByIDBatch query.
	DeleteConfigurationVersionByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertGithubApp(ctx context.Context, params InsertGithubAppParams) (pgconn.CommandTag, error)
	// InsertGithubAppBatch enqueues a InsertGithubApp query into batch to be executed
	// later by the batch.
	InsertGithubAppBatch(batch genericBatch, params InsertGithubAppParams)
	// InsertGithubAppScan scans the result of an executed InsertGithubAppBatch query.
	InsertGithubAppScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindGithubApp(ctx context.Context) (FindGithubAppRow, error)
	// FindGithubAppBatch enqueues a FindGithubApp query into batch to be executed
	// later by the batch.
	FindGithubAppBatch(batch genericBatch)
	// FindGithubAppScan scans the result of an executed FindGithubAppBatch query.
	FindGithubAppScan(results pgx.BatchResults) (FindGithubAppRow, error)

	DeleteGithubApp(ctx context.Context, githubAppID pgtype.Int8) (DeleteGithubAppRow, error)
	// DeleteGithubAppBatch enqueues a DeleteGithubApp query into batch to be executed
	// later by the batch.
	DeleteGithubAppBatch(batch genericBatch, githubAppID pgtype.Int8)
	// DeleteGithubAppScan scans the result of an executed DeleteGithubAppBatch query.
	DeleteGithubAppScan(results pgx.BatchResults) (DeleteGithubAppRow, error)

	InsertGithubAppInstall(ctx context.Context, params InsertGithubAppInstallParams) (pgconn.CommandTag, error)
	// InsertGithubAppInstallBatch enqueues a InsertGithubAppInstall query into batch to be executed
	// later by the batch.
	InsertGithubAppInstallBatch(batch genericBatch, params InsertGithubAppInstallParams)
	// InsertGithubAppInstallScan scans the result of an executed InsertGithubAppInstallBatch query.
	InsertGithubAppInstallScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	InsertIngressAttributes(ctx context.Context, params InsertIngressAttributesParams) (pgconn.CommandTag, error)
	// InsertIngressAttributesBatch enqueues a InsertIngressAttributes query into batch to be executed
	// later by the batch.
	InsertIngressAttributesBatch(batch genericBatch, params InsertIngressAttributesParams)
	// InsertIngressAttributesScan scans the result of an executed InsertIngressAttributesBatch query.
	InsertIngressAttributesScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	InsertJob(ctx context.Context, params InsertJobParams) (pgconn.CommandTag, error)
	// InsertJobBatch enqueues a InsertJob query into batch to be executed
	// later by the batch.
	InsertJobBatch(batch genericBatch, params InsertJobParams)
	// InsertJobScan scans the result of an executed InsertJobBatch query.
	InsertJobScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindJobs(ctx context.Context) ([]FindJobsRow, error)
	// FindJobsBatch enqueues a FindJobs query into batch to be executed
	// later by the batch.
	FindJobsBatch(batch genericBatch)
	// FindJobsScan scans the result of an executed FindJobsBatch query.
	FindJobsScan(results pgx.BatchResults) ([]FindJobsRow, error)

	FindJob(ctx context.Context, runID pgtype.Text, phase pgtype.Text) (FindJobRow, error)
	// FindJobBatch enqueues a FindJob query into batch to be executed
	// later by the batch.
	FindJobBatch(batch genericBatch, runID pgtype.Text, phase pgtype.Text)
	// FindJobScan scans the result of an executed FindJobBatch query.
	FindJobScan(results pgx.BatchResults) (FindJobRow, error)

	FindJobForUpdate(ctx context.Context, runID pgtype.Text, phase pgtype.Text) (FindJobForUpdateRow, error)
	// FindJobForUpdateBatch enqueues a FindJobForUpdate query into batch to be executed
	// later by the batch.
	FindJobForUpdateBatch(batch genericBatch, runID pgtype.Text, phase pgtype.Text)
	// FindJobForUpdateScan scans the result of an executed FindJobForUpdateBatch query.
	FindJobForUpdateScan(results pgx.BatchResults) (FindJobForUpdateRow, error)

	FindAllocatedJobs(ctx context.Context, agentID pgtype.Text) ([]FindAllocatedJobsRow, error)
	// FindAllocatedJobsBatch enqueues a FindAllocatedJobs query into batch to be executed
	// later by the batch.
	FindAllocatedJobsBatch(batch genericBatch, agentID pgtype.Text)
	// FindAllocatedJobsScan scans the result of an executed FindAllocatedJobsBatch query.
	FindAllocatedJobsScan(results pgx.BatchResults) ([]FindAllocatedJobsRow, error)

	// Find signaled jobs and then immediately update signal with null.
	//
	FindAndUpdateSignaledJobs(ctx context.Context, agentID pgtype.Text) ([]FindAndUpdateSignaledJobsRow, error)
	// FindAndUpdateSignaledJobsBatch enqueues a FindAndUpdateSignaledJobs query into batch to be executed
	// later by the batch.
	FindAndUpdateSignaledJobsBatch(batch genericBatch, agentID pgtype.Text)
	// FindAndUpdateSignaledJobsScan scans the result of an executed FindAndUpdateSignaledJobsBatch query.
	FindAndUpdateSignaledJobsScan(results pgx.BatchResults) ([]FindAndUpdateSignaledJobsRow, error)

	UpdateJob(ctx context.Context, params UpdateJobParams) (UpdateJobRow, error)
	// UpdateJobBatch enqueues a UpdateJob query into batch to be executed
	// later by the batch.
	UpdateJobBatch(batch genericBatch, params UpdateJobParams)
	// UpdateJobScan scans the result of an executed UpdateJobBatch query.
	UpdateJobScan(results pgx.BatchResults) (UpdateJobRow, error)

	InsertModule(ctx context.Context, params InsertModuleParams) (pgconn.CommandTag, error)
	// InsertModuleBatch enqueues a InsertModule query into batch to be executed
	// later by the batch.
	InsertModuleBatch(batch genericBatch, params InsertModuleParams)
	// InsertModuleScan scans the result of an executed InsertModuleBatch query.
	InsertModuleScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	InsertModuleVersion(ctx context.Context, params InsertModuleVersionParams) (InsertModuleVersionRow, error)
	// InsertModuleVersionBatch enqueues a InsertModuleVersion query into batch to be executed
	// later by the batch.
	InsertModuleVersionBatch(batch genericBatch, params InsertModuleVersionParams)
	// InsertModuleVersionScan scans the result of an executed InsertModuleVersionBatch query.
	InsertModuleVersionScan(results pgx.BatchResults) (InsertModuleVersionRow, error)

	ListModulesByOrganization(ctx context.Context, organizationName pgtype.Text) ([]ListModulesByOrganizationRow, error)
	// ListModulesByOrganizationBatch enqueues a ListModulesByOrganization query into batch to be executed
	// later by the batch.
	ListModulesByOrganizationBatch(batch genericBatch, organizationName pgtype.Text)
	// ListModulesByOrganizationScan scans the result of an executed ListModulesByOrganizationBatch query.
	ListModulesByOrganizationScan(results pgx.BatchResults) ([]ListModulesByOrganizationRow, error)

	FindModuleByName(ctx context.Context, params FindModuleByNameParams) (FindModuleByNameRow, error)
	// FindModuleByNameBatch enqueues a FindModuleByName query into batch to be executed
	// later by the batch.
	FindModuleByNameBatch(batch genericBatch, params FindModuleByNameParams)
	// FindModuleByNameScan scans the result of an executed FindModuleByNameBatch query.
	FindModuleByNameScan(results pgx.BatchResults) (FindModuleByNameRow, error)

	FindModuleByID(ctx context.Context, id pgtype.Text) (FindModuleByIDRow, error)
	// FindModuleByIDBatch enqueues a FindModuleByID query into batch to be executed
	// later by the batch.
	FindModuleByIDBatch(batch genericBatch, id pgtype.Text)
	// FindModuleByIDScan scans the result of an executed FindModuleByIDBatch query.
	FindModuleByIDScan(results pgx.BatchResults) (FindModuleByIDRow, error)

	FindModuleByConnection(ctx context.Context, vcsProviderID pgtype.Text, repoPath pgtype.Text) (FindModuleByConnectionRow, error)
	// FindModuleByConnectionBatch enqueues a FindModuleByConnection query into batch to be executed
	// later by the batch.
	FindModuleByConnectionBatch(batch genericBatch, vcsProviderID pgtype.Text, repoPath pgtype.Text)
	// FindModuleByConnectionScan scans the result of an executed FindModuleByConnectionBatch query.
	FindModuleByConnectionScan(results pgx.BatchResults) (FindModuleByConnectionRow, error)

	FindModuleByModuleVersionID(ctx context.Context, moduleVersionID pgtype.Text) (FindModuleByModuleVersionIDRow, error)
	// FindModuleByModuleVersionIDBatch enqueues a FindModuleByModuleVersionID query into batch to be executed
	// later by the batch.
	FindModuleByModuleVersionIDBatch(batch genericBatch, moduleVersionID pgtype.Text)
	// FindModuleByModuleVersionIDScan scans the result of an executed FindModuleByModuleVersionIDBatch query.
	FindModuleByModuleVersionIDScan(results pgx.BatchResults) (FindModuleByModuleVersionIDRow, error)

	UpdateModuleStatusByID(ctx context.Context, status pgtype.Text, moduleID pgtype.Text) (pgtype.Text, error)
	// UpdateModuleStatusByIDBatch enqueues a UpdateModuleStatusByID query into batch to be executed
	// later by the batch.
	UpdateModuleStatusByIDBatch(batch genericBatch, status pgtype.Text, moduleID pgtype.Text)
	// UpdateModuleStatusByIDScan scans the result of an executed UpdateModuleStatusByIDBatch query.
	UpdateModuleStatusByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertModuleTarball(ctx context.Context, tarball []byte, moduleVersionID pgtype.Text) (pgtype.Text, error)
	// InsertModuleTarballBatch enqueues a InsertModuleTarball query into batch to be executed
	// later by the batch.
	InsertModuleTarballBatch(batch genericBatch, tarball []byte, moduleVersionID pgtype.Text)
	// InsertModuleTarballScan scans the result of an executed InsertModuleTarballBatch query.
	InsertModuleTarballScan(results pgx.BatchResults) (pgtype.Text, error)

	FindModuleTarball(ctx context.Context, moduleVersionID pgtype.Text) ([]byte, error)
	// FindModuleTarballBatch enqueues a FindModuleTarball query into batch to be executed
	// later by the batch.
	FindModuleTarballBatch(batch genericBatch, moduleVersionID pgtype.Text)
	// FindModuleTarballScan scans the result of an executed FindModuleTarballBatch query.
	FindModuleTarballScan(results pgx.BatchResults) ([]byte, error)

	UpdateModuleVersionStatusByID(ctx context.Context, params UpdateModuleVersionStatusByIDParams) (UpdateModuleVersionStatusByIDRow, error)
	// UpdateModuleVersionStatusByIDBatch enqueues a UpdateModuleVersionStatusByID query into batch to be executed
	// later by the batch.
	UpdateModuleVersionStatusByIDBatch(batch genericBatch, params UpdateModuleVersionStatusByIDParams)
	// UpdateModuleVersionStatusByIDScan scans the result of an executed UpdateModuleVersionStatusByIDBatch query.
	UpdateModuleVersionStatusByIDScan(results pgx.BatchResults) (UpdateModuleVersionStatusByIDRow, error)

	DeleteModuleByID(ctx context.Context, moduleID pgtype.Text) (pgtype.Text, error)
	// DeleteModuleByIDBatch enqueues a DeleteModuleByID query into batch to be executed
	// later by the batch.
	DeleteModuleByIDBatch(batch genericBatch, moduleID pgtype.Text)
	// DeleteModuleByIDScan scans the result of an executed DeleteModuleByIDBatch query.
	DeleteModuleByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	DeleteModuleVersionByID(ctx context.Context, moduleVersionID pgtype.Text) (pgtype.Text, error)
	// DeleteModuleVersionByIDBatch enqueues a DeleteModuleVersionByID query into batch to be executed
	// later by the batch.
	DeleteModuleVersionByIDBatch(batch genericBatch, moduleVersionID pgtype.Text)
	// DeleteModuleVersionByIDScan scans the result of an executed DeleteModuleVersionByIDBatch query.
	DeleteModuleVersionByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertNotificationConfiguration(ctx context.Context, params InsertNotificationConfigurationParams) (pgconn.CommandTag, error)
	// InsertNotificationConfigurationBatch enqueues a InsertNotificationConfiguration query into batch to be executed
	// later by the batch.
	InsertNotificationConfigurationBatch(batch genericBatch, params InsertNotificationConfigurationParams)
	// InsertNotificationConfigurationScan scans the result of an executed InsertNotificationConfigurationBatch query.
	InsertNotificationConfigurationScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindNotificationConfigurationsByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) ([]FindNotificationConfigurationsByWorkspaceIDRow, error)
	// FindNotificationConfigurationsByWorkspaceIDBatch enqueues a FindNotificationConfigurationsByWorkspaceID query into batch to be executed
	// later by the batch.
	FindNotificationConfigurationsByWorkspaceIDBatch(batch genericBatch, workspaceID pgtype.Text)
	// FindNotificationConfigurationsByWorkspaceIDScan scans the result of an executed FindNotificationConfigurationsByWorkspaceIDBatch query.
	FindNotificationConfigurationsByWorkspaceIDScan(results pgx.BatchResults) ([]FindNotificationConfigurationsByWorkspaceIDRow, error)

	FindAllNotificationConfigurations(ctx context.Context) ([]FindAllNotificationConfigurationsRow, error)
	// FindAllNotificationConfigurationsBatch enqueues a FindAllNotificationConfigurations query into batch to be executed
	// later by the batch.
	FindAllNotificationConfigurationsBatch(batch genericBatch)
	// FindAllNotificationConfigurationsScan scans the result of an executed FindAllNotificationConfigurationsBatch query.
	FindAllNotificationConfigurationsScan(results pgx.BatchResults) ([]FindAllNotificationConfigurationsRow, error)

	FindNotificationConfiguration(ctx context.Context, notificationConfigurationID pgtype.Text) (FindNotificationConfigurationRow, error)
	// FindNotificationConfigurationBatch enqueues a FindNotificationConfiguration query into batch to be executed
	// later by the batch.
	FindNotificationConfigurationBatch(batch genericBatch, notificationConfigurationID pgtype.Text)
	// FindNotificationConfigurationScan scans the result of an executed FindNotificationConfigurationBatch query.
	FindNotificationConfigurationScan(results pgx.BatchResults) (FindNotificationConfigurationRow, error)

	FindNotificationConfigurationForUpdate(ctx context.Context, notificationConfigurationID pgtype.Text) (FindNotificationConfigurationForUpdateRow, error)
	// FindNotificationConfigurationForUpdateBatch enqueues a FindNotificationConfigurationForUpdate query into batch to be executed
	// later by the batch.
	FindNotificationConfigurationForUpdateBatch(batch genericBatch, notificationConfigurationID pgtype.Text)
	// FindNotificationConfigurationForUpdateScan scans the result of an executed FindNotificationConfigurationForUpdateBatch query.
	FindNotificationConfigurationForUpdateScan(results pgx.BatchResults) (FindNotificationConfigurationForUpdateRow, error)

	UpdateNotificationConfigurationByID(ctx context.Context, params UpdateNotificationConfigurationByIDParams) (pgtype.Text, error)
	// UpdateNotificationConfigurationByIDBatch enqueues a UpdateNotificationConfigurationByID query into batch to be executed
	// later by the batch.
	UpdateNotificationConfigurationByIDBatch(batch genericBatch, params UpdateNotificationConfigurationByIDParams)
	// UpdateNotificationConfigurationByIDScan scans the result of an executed UpdateNotificationConfigurationByIDBatch query.
	UpdateNotificationConfigurationByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	DeleteNotificationConfigurationByID(ctx context.Context, notificationConfigurationID pgtype.Text) (pgtype.Text, error)
	// DeleteNotificationConfigurationByIDBatch enqueues a DeleteNotificationConfigurationByID query into batch to be executed
	// later by the batch.
	DeleteNotificationConfigurationByIDBatch(batch genericBatch, notificationConfigurationID pgtype.Text)
	// DeleteNotificationConfigurationByIDScan scans the result of an executed DeleteNotificationConfigurationByIDBatch query.
	DeleteNotificationConfigurationByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertOrganization(ctx context.Context, params InsertOrganizationParams) (pgconn.CommandTag, error)
	// InsertOrganizationBatch enqueues a InsertOrganization query into batch to be executed
	// later by the batch.
	InsertOrganizationBatch(batch genericBatch, params InsertOrganizationParams)
	// InsertOrganizationScan scans the result of an executed InsertOrganizationBatch query.
	InsertOrganizationScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindOrganizationNameByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) (pgtype.Text, error)
	// FindOrganizationNameByWorkspaceIDBatch enqueues a FindOrganizationNameByWorkspaceID query into batch to be executed
	// later by the batch.
	FindOrganizationNameByWorkspaceIDBatch(batch genericBatch, workspaceID pgtype.Text)
	// FindOrganizationNameByWorkspaceIDScan scans the result of an executed FindOrganizationNameByWorkspaceIDBatch query.
	FindOrganizationNameByWorkspaceIDScan(results pgx.BatchResults) (pgtype.Text, error)

	FindOrganizationByName(ctx context.Context, name pgtype.Text) (FindOrganizationByNameRow, error)
	// FindOrganizationByNameBatch enqueues a FindOrganizationByName query into batch to be executed
	// later by the batch.
	FindOrganizationByNameBatch(batch genericBatch, name pgtype.Text)
	// FindOrganizationByNameScan scans the result of an executed FindOrganizationByNameBatch query.
	FindOrganizationByNameScan(results pgx.BatchResults) (FindOrganizationByNameRow, error)

	FindOrganizationByID(ctx context.Context, organizationID pgtype.Text) (FindOrganizationByIDRow, error)
	// FindOrganizationByIDBatch enqueues a FindOrganizationByID query into batch to be executed
	// later by the batch.
	FindOrganizationByIDBatch(batch genericBatch, organizationID pgtype.Text)
	// FindOrganizationByIDScan scans the result of an executed FindOrganizationByIDBatch query.
	FindOrganizationByIDScan(results pgx.BatchResults) (FindOrganizationByIDRow, error)

	FindOrganizationByNameForUpdate(ctx context.Context, name pgtype.Text) (FindOrganizationByNameForUpdateRow, error)
	// FindOrganizationByNameForUpdateBatch enqueues a FindOrganizationByNameForUpdate query into batch to be executed
	// later by the batch.
	FindOrganizationByNameForUpdateBatch(batch genericBatch, name pgtype.Text)
	// FindOrganizationByNameForUpdateScan scans the result of an executed FindOrganizationByNameForUpdateBatch query.
	FindOrganizationByNameForUpdateScan(results pgx.BatchResults) (FindOrganizationByNameForUpdateRow, error)

	FindOrganizations(ctx context.Context, params FindOrganizationsParams) ([]FindOrganizationsRow, error)
	// FindOrganizationsBatch enqueues a FindOrganizations query into batch to be executed
	// later by the batch.
	FindOrganizationsBatch(batch genericBatch, params FindOrganizationsParams)
	// FindOrganizationsScan scans the result of an executed FindOrganizationsBatch query.
	FindOrganizationsScan(results pgx.BatchResults) ([]FindOrganizationsRow, error)

	CountOrganizations(ctx context.Context, names []string) (pgtype.Int8, error)
	// CountOrganizationsBatch enqueues a CountOrganizations query into batch to be executed
	// later by the batch.
	CountOrganizationsBatch(batch genericBatch, names []string)
	// CountOrganizationsScan scans the result of an executed CountOrganizationsBatch query.
	CountOrganizationsScan(results pgx.BatchResults) (pgtype.Int8, error)

	UpdateOrganizationByName(ctx context.Context, params UpdateOrganizationByNameParams) (pgtype.Text, error)
	// UpdateOrganizationByNameBatch enqueues a UpdateOrganizationByName query into batch to be executed
	// later by the batch.
	UpdateOrganizationByNameBatch(batch genericBatch, params UpdateOrganizationByNameParams)
	// UpdateOrganizationByNameScan scans the result of an executed UpdateOrganizationByNameBatch query.
	UpdateOrganizationByNameScan(results pgx.BatchResults) (pgtype.Text, error)

	DeleteOrganizationByName(ctx context.Context, name pgtype.Text) (pgtype.Text, error)
	// DeleteOrganizationByNameBatch enqueues a DeleteOrganizationByName query into batch to be executed
	// later by the batch.
	DeleteOrganizationByNameBatch(batch genericBatch, name pgtype.Text)
	// DeleteOrganizationByNameScan scans the result of an executed DeleteOrganizationByNameBatch query.
	DeleteOrganizationByNameScan(results pgx.BatchResults) (pgtype.Text, error)

	UpsertOrganizationToken(ctx context.Context, params UpsertOrganizationTokenParams) (pgconn.CommandTag, error)
	// UpsertOrganizationTokenBatch enqueues a UpsertOrganizationToken query into batch to be executed
	// later by the batch.
	UpsertOrganizationTokenBatch(batch genericBatch, params UpsertOrganizationTokenParams)
	// UpsertOrganizationTokenScan scans the result of an executed UpsertOrganizationTokenBatch query.
	UpsertOrganizationTokenScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindOrganizationTokens(ctx context.Context, organizationName pgtype.Text) ([]FindOrganizationTokensRow, error)
	// FindOrganizationTokensBatch enqueues a FindOrganizationTokens query into batch to be executed
	// later by the batch.
	FindOrganizationTokensBatch(batch genericBatch, organizationName pgtype.Text)
	// FindOrganizationTokensScan scans the result of an executed FindOrganizationTokensBatch query.
	FindOrganizationTokensScan(results pgx.BatchResults) ([]FindOrganizationTokensRow, error)

	FindOrganizationTokensByName(ctx context.Context, organizationName pgtype.Text) (FindOrganizationTokensByNameRow, error)
	// FindOrganizationTokensByNameBatch enqueues a FindOrganizationTokensByName query into batch to be executed
	// later by the batch.
	FindOrganizationTokensByNameBatch(batch genericBatch, organizationName pgtype.Text)
	// FindOrganizationTokensByNameScan scans the result of an executed FindOrganizationTokensByNameBatch query.
	FindOrganizationTokensByNameScan(results pgx.BatchResults) (FindOrganizationTokensByNameRow, error)

	FindOrganizationTokensByID(ctx context.Context, organizationTokenID pgtype.Text) (FindOrganizationTokensByIDRow, error)
	// FindOrganizationTokensByIDBatch enqueues a FindOrganizationTokensByID query into batch to be executed
	// later by the batch.
	FindOrganizationTokensByIDBatch(batch genericBatch, organizationTokenID pgtype.Text)
	// FindOrganizationTokensByIDScan scans the result of an executed FindOrganizationTokensByIDBatch query.
	FindOrganizationTokensByIDScan(results pgx.BatchResults) (FindOrganizationTokensByIDRow, error)

	DeleteOrganiationTokenByName(ctx context.Context, organizationName pgtype.Text) (pgtype.Text, error)
	// DeleteOrganiationTokenByNameBatch enqueues a DeleteOrganiationTokenByName query into batch to be executed
	// later by the batch.
	DeleteOrganiationTokenByNameBatch(batch genericBatch, organizationName pgtype.Text)
	// DeleteOrganiationTokenByNameScan scans the result of an executed DeleteOrganiationTokenByNameBatch query.
	DeleteOrganiationTokenByNameScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertPhaseStatusTimestamp(ctx context.Context, params InsertPhaseStatusTimestampParams) (pgconn.CommandTag, error)
	// InsertPhaseStatusTimestampBatch enqueues a InsertPhaseStatusTimestamp query into batch to be executed
	// later by the batch.
	InsertPhaseStatusTimestampBatch(batch genericBatch, params InsertPhaseStatusTimestampParams)
	// InsertPhaseStatusTimestampScan scans the result of an executed InsertPhaseStatusTimestampBatch query.
	InsertPhaseStatusTimestampScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	InsertLogChunk(ctx context.Context, params InsertLogChunkParams) (pgtype.Int4, error)
	// InsertLogChunkBatch enqueues a InsertLogChunk query into batch to be executed
	// later by the batch.
	InsertLogChunkBatch(batch genericBatch, params InsertLogChunkParams)
	// InsertLogChunkScan scans the result of an executed InsertLogChunkBatch query.
	InsertLogChunkScan(results pgx.BatchResults) (pgtype.Int4, error)

	// FindLogs retrieves all the logs for the given run and phase.
	//
	FindLogs(ctx context.Context, runID pgtype.Text, phase pgtype.Text) ([]byte, error)
	// FindLogsBatch enqueues a FindLogs query into batch to be executed
	// later by the batch.
	FindLogsBatch(batch genericBatch, runID pgtype.Text, phase pgtype.Text)
	// FindLogsScan scans the result of an executed FindLogsBatch query.
	FindLogsScan(results pgx.BatchResults) ([]byte, error)

	FindLogChunkByID(ctx context.Context, chunkID pgtype.Int4) (FindLogChunkByIDRow, error)
	// FindLogChunkByIDBatch enqueues a FindLogChunkByID query into batch to be executed
	// later by the batch.
	FindLogChunkByIDBatch(batch genericBatch, chunkID pgtype.Int4)
	// FindLogChunkByIDScan scans the result of an executed FindLogChunkByIDBatch query.
	FindLogChunkByIDScan(results pgx.BatchResults) (FindLogChunkByIDRow, error)

	InsertPlan(ctx context.Context, runID pgtype.Text, status pgtype.Text) (pgconn.CommandTag, error)
	// InsertPlanBatch enqueues a InsertPlan query into batch to be executed
	// later by the batch.
	InsertPlanBatch(batch genericBatch, runID pgtype.Text, status pgtype.Text)
	// InsertPlanScan scans the result of an executed InsertPlanBatch query.
	InsertPlanScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	UpdatePlanStatusByID(ctx context.Context, status pgtype.Text, runID pgtype.Text) (pgtype.Text, error)
	// UpdatePlanStatusByIDBatch enqueues a UpdatePlanStatusByID query into batch to be executed
	// later by the batch.
	UpdatePlanStatusByIDBatch(batch genericBatch, status pgtype.Text, runID pgtype.Text)
	// UpdatePlanStatusByIDScan scans the result of an executed UpdatePlanStatusByIDBatch query.
	UpdatePlanStatusByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	UpdatePlannedChangesByID(ctx context.Context, params UpdatePlannedChangesByIDParams) (pgtype.Text, error)
	// UpdatePlannedChangesByIDBatch enqueues a UpdatePlannedChangesByID query into batch to be executed
	// later by the batch.
	UpdatePlannedChangesByIDBatch(batch genericBatch, params UpdatePlannedChangesByIDParams)
	// UpdatePlannedChangesByIDScan scans the result of an executed UpdatePlannedChangesByIDBatch query.
	UpdatePlannedChangesByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	GetPlanBinByID(ctx context.Context, runID pgtype.Text) ([]byte, error)
	// GetPlanBinByIDBatch enqueues a GetPlanBinByID query into batch to be executed
	// later by the batch.
	GetPlanBinByIDBatch(batch genericBatch, runID pgtype.Text)
	// GetPlanBinByIDScan scans the result of an executed GetPlanBinByIDBatch query.
	GetPlanBinByIDScan(results pgx.BatchResults) ([]byte, error)

	GetPlanJSONByID(ctx context.Context, runID pgtype.Text) ([]byte, error)
	// GetPlanJSONByIDBatch enqueues a GetPlanJSONByID query into batch to be executed
	// later by the batch.
	GetPlanJSONByIDBatch(batch genericBatch, runID pgtype.Text)
	// GetPlanJSONByIDScan scans the result of an executed GetPlanJSONByIDBatch query.
	GetPlanJSONByIDScan(results pgx.BatchResults) ([]byte, error)

	UpdatePlanBinByID(ctx context.Context, planBin []byte, runID pgtype.Text) (pgtype.Text, error)
	// UpdatePlanBinByIDBatch enqueues a UpdatePlanBinByID query into batch to be executed
	// later by the batch.
	UpdatePlanBinByIDBatch(batch genericBatch, planBin []byte, runID pgtype.Text)
	// UpdatePlanBinByIDScan scans the result of an executed UpdatePlanBinByIDBatch query.
	UpdatePlanBinByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	UpdatePlanJSONByID(ctx context.Context, planJSON []byte, runID pgtype.Text) (pgtype.Text, error)
	// UpdatePlanJSONByIDBatch enqueues a UpdatePlanJSONByID query into batch to be executed
	// later by the batch.
	UpdatePlanJSONByIDBatch(batch genericBatch, planJSON []byte, runID pgtype.Text)
	// UpdatePlanJSONByIDScan scans the result of an executed UpdatePlanJSONByIDBatch query.
	UpdatePlanJSONByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertLatestTerraformVersion(ctx context.Context, version pgtype.Text) (pgconn.CommandTag, error)
	// InsertLatestTerraformVersionBatch enqueues a InsertLatestTerraformVersion query into batch to be executed
	// later by the batch.
	InsertLatestTerraformVersionBatch(batch genericBatch, version pgtype.Text)
	// InsertLatestTerraformVersionScan scans the result of an executed InsertLatestTerraformVersionBatch query.
	InsertLatestTerraformVersionScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	UpdateLatestTerraformVersion(ctx context.Context, version pgtype.Text) (pgconn.CommandTag, error)
	// UpdateLatestTerraformVersionBatch enqueues a UpdateLatestTerraformVersion query into batch to be executed
	// later by the batch.
	UpdateLatestTerraformVersionBatch(batch genericBatch, version pgtype.Text)
	// UpdateLatestTerraformVersionScan scans the result of an executed UpdateLatestTerraformVersionBatch query.
	UpdateLatestTerraformVersionScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindLatestTerraformVersion(ctx context.Context) ([]FindLatestTerraformVersionRow, error)
	// FindLatestTerraformVersionBatch enqueues a FindLatestTerraformVersion query into batch to be executed
	// later by the batch.
	FindLatestTerraformVersionBatch(batch genericBatch)
	// FindLatestTerraformVersionScan scans the result of an executed FindLatestTerraformVersionBatch query.
	FindLatestTerraformVersionScan(results pgx.BatchResults) ([]FindLatestTerraformVersionRow, error)

	InsertRepoConnection(ctx context.Context, params InsertRepoConnectionParams) (pgconn.CommandTag, error)
	// InsertRepoConnectionBatch enqueues a InsertRepoConnection query into batch to be executed
	// later by the batch.
	InsertRepoConnectionBatch(batch genericBatch, params InsertRepoConnectionParams)
	// InsertRepoConnectionScan scans the result of an executed InsertRepoConnectionBatch query.
	InsertRepoConnectionScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	DeleteWorkspaceConnectionByID(ctx context.Context, workspaceID pgtype.Text) (DeleteWorkspaceConnectionByIDRow, error)
	// DeleteWorkspaceConnectionByIDBatch enqueues a DeleteWorkspaceConnectionByID query into batch to be executed
	// later by the batch.
	DeleteWorkspaceConnectionByIDBatch(batch genericBatch, workspaceID pgtype.Text)
	// DeleteWorkspaceConnectionByIDScan scans the result of an executed DeleteWorkspaceConnectionByIDBatch query.
	DeleteWorkspaceConnectionByIDScan(results pgx.BatchResults) (DeleteWorkspaceConnectionByIDRow, error)

	DeleteModuleConnectionByID(ctx context.Context, moduleID pgtype.Text) (DeleteModuleConnectionByIDRow, error)
	// DeleteModuleConnectionByIDBatch enqueues a DeleteModuleConnectionByID query into batch to be executed
	// later by the batch.
	DeleteModuleConnectionByIDBatch(batch genericBatch, moduleID pgtype.Text)
	// DeleteModuleConnectionByIDScan scans the result of an executed DeleteModuleConnectionByIDBatch query.
	DeleteModuleConnectionByIDScan(results pgx.BatchResults) (DeleteModuleConnectionByIDRow, error)

	InsertRepohook(ctx context.Context, params InsertRepohookParams) (InsertRepohookRow, error)
	// InsertRepohookBatch enqueues a InsertRepohook query into batch to be executed
	// later by the batch.
	InsertRepohookBatch(batch genericBatch, params InsertRepohookParams)
	// InsertRepohookScan scans the result of an executed InsertRepohookBatch query.
	InsertRepohookScan(results pgx.BatchResults) (InsertRepohookRow, error)

	UpdateRepohookVCSID(ctx context.Context, vcsID pgtype.Text, repohookID pgtype.UUID) (UpdateRepohookVCSIDRow, error)
	// UpdateRepohookVCSIDBatch enqueues a UpdateRepohookVCSID query into batch to be executed
	// later by the batch.
	UpdateRepohookVCSIDBatch(batch genericBatch, vcsID pgtype.Text, repohookID pgtype.UUID)
	// UpdateRepohookVCSIDScan scans the result of an executed UpdateRepohookVCSIDBatch query.
	UpdateRepohookVCSIDScan(results pgx.BatchResults) (UpdateRepohookVCSIDRow, error)

	FindRepohooks(ctx context.Context) ([]FindRepohooksRow, error)
	// FindRepohooksBatch enqueues a FindRepohooks query into batch to be executed
	// later by the batch.
	FindRepohooksBatch(batch genericBatch)
	// FindRepohooksScan scans the result of an executed FindRepohooksBatch query.
	FindRepohooksScan(results pgx.BatchResults) ([]FindRepohooksRow, error)

	FindRepohookByID(ctx context.Context, repohookID pgtype.UUID) (FindRepohookByIDRow, error)
	// FindRepohookByIDBatch enqueues a FindRepohookByID query into batch to be executed
	// later by the batch.
	FindRepohookByIDBatch(batch genericBatch, repohookID pgtype.UUID)
	// FindRepohookByIDScan scans the result of an executed FindRepohookByIDBatch query.
	FindRepohookByIDScan(results pgx.BatchResults) (FindRepohookByIDRow, error)

	FindRepohookByRepoAndProvider(ctx context.Context, repoPath pgtype.Text, vcsProviderID pgtype.Text) ([]FindRepohookByRepoAndProviderRow, error)
	// FindRepohookByRepoAndProviderBatch enqueues a FindRepohookByRepoAndProvider query into batch to be executed
	// later by the batch.
	FindRepohookByRepoAndProviderBatch(batch genericBatch, repoPath pgtype.Text, vcsProviderID pgtype.Text)
	// FindRepohookByRepoAndProviderScan scans the result of an executed FindRepohookByRepoAndProviderBatch query.
	FindRepohookByRepoAndProviderScan(results pgx.BatchResults) ([]FindRepohookByRepoAndProviderRow, error)

	FindUnreferencedRepohooks(ctx context.Context) ([]FindUnreferencedRepohooksRow, error)
	// FindUnreferencedRepohooksBatch enqueues a FindUnreferencedRepohooks query into batch to be executed
	// later by the batch.
	FindUnreferencedRepohooksBatch(batch genericBatch)
	// FindUnreferencedRepohooksScan scans the result of an executed FindUnreferencedRepohooksBatch query.
	FindUnreferencedRepohooksScan(results pgx.BatchResults) ([]FindUnreferencedRepohooksRow, error)

	DeleteRepohookByID(ctx context.Context, repohookID pgtype.UUID) (DeleteRepohookByIDRow, error)
	// DeleteRepohookByIDBatch enqueues a DeleteRepohookByID query into batch to be executed
	// later by the batch.
	DeleteRepohookByIDBatch(batch genericBatch, repohookID pgtype.UUID)
	// DeleteRepohookByIDScan scans the result of an executed DeleteRepohookByIDBatch query.
	DeleteRepohookByIDScan(results pgx.BatchResults) (DeleteRepohookByIDRow, error)

	InsertRun(ctx context.Context, params InsertRunParams) (pgconn.CommandTag, error)
	// InsertRunBatch enqueues a InsertRun query into batch to be executed
	// later by the batch.
	InsertRunBatch(batch genericBatch, params InsertRunParams)
	// InsertRunScan scans the result of an executed InsertRunBatch query.
	InsertRunScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	InsertRunStatusTimestamp(ctx context.Context, params InsertRunStatusTimestampParams) (pgconn.CommandTag, error)
	// InsertRunStatusTimestampBatch enqueues a InsertRunStatusTimestamp query into batch to be executed
	// later by the batch.
	InsertRunStatusTimestampBatch(batch genericBatch, params InsertRunStatusTimestampParams)
	// InsertRunStatusTimestampScan scans the result of an executed InsertRunStatusTimestampBatch query.
	InsertRunStatusTimestampScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	InsertRunVariable(ctx context.Context, params InsertRunVariableParams) (pgconn.CommandTag, error)
	// InsertRunVariableBatch enqueues a InsertRunVariable query into batch to be executed
	// later by the batch.
	InsertRunVariableBatch(batch genericBatch, params InsertRunVariableParams)
	// InsertRunVariableScan scans the result of an executed InsertRunVariableBatch query.
	InsertRunVariableScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindRuns(ctx context.Context, params FindRunsParams) ([]FindRunsRow, error)
	// FindRunsBatch enqueues a FindRuns query into batch to be executed
	// later by the batch.
	FindRunsBatch(batch genericBatch, params FindRunsParams)
	// FindRunsScan scans the result of an executed FindRunsBatch query.
	FindRunsScan(results pgx.BatchResults) ([]FindRunsRow, error)

	CountRuns(ctx context.Context, params CountRunsParams) (pgtype.Int8, error)
	// CountRunsBatch enqueues a CountRuns query into batch to be executed
	// later by the batch.
	CountRunsBatch(batch genericBatch, params CountRunsParams)
	// CountRunsScan scans the result of an executed CountRunsBatch query.
	CountRunsScan(results pgx.BatchResults) (pgtype.Int8, error)

	FindRunByID(ctx context.Context, runID pgtype.Text) (FindRunByIDRow, error)
	// FindRunByIDBatch enqueues a FindRunByID query into batch to be executed
	// later by the batch.
	FindRunByIDBatch(batch genericBatch, runID pgtype.Text)
	// FindRunByIDScan scans the result of an executed FindRunByIDBatch query.
	FindRunByIDScan(results pgx.BatchResults) (FindRunByIDRow, error)

	FindRunByIDForUpdate(ctx context.Context, runID pgtype.Text) (FindRunByIDForUpdateRow, error)
	// FindRunByIDForUpdateBatch enqueues a FindRunByIDForUpdate query into batch to be executed
	// later by the batch.
	FindRunByIDForUpdateBatch(batch genericBatch, runID pgtype.Text)
	// FindRunByIDForUpdateScan scans the result of an executed FindRunByIDForUpdateBatch query.
	FindRunByIDForUpdateScan(results pgx.BatchResults) (FindRunByIDForUpdateRow, error)

	PutLockFile(ctx context.Context, lockFile []byte, runID pgtype.Text) (pgtype.Text, error)
	// PutLockFileBatch enqueues a PutLockFile query into batch to be executed
	// later by the batch.
	PutLockFileBatch(batch genericBatch, lockFile []byte, runID pgtype.Text)
	// PutLockFileScan scans the result of an executed PutLockFileBatch query.
	PutLockFileScan(results pgx.BatchResults) (pgtype.Text, error)

	GetLockFileByID(ctx context.Context, runID pgtype.Text) ([]byte, error)
	// GetLockFileByIDBatch enqueues a GetLockFileByID query into batch to be executed
	// later by the batch.
	GetLockFileByIDBatch(batch genericBatch, runID pgtype.Text)
	// GetLockFileByIDScan scans the result of an executed GetLockFileByIDBatch query.
	GetLockFileByIDScan(results pgx.BatchResults) ([]byte, error)

	UpdateRunStatus(ctx context.Context, status pgtype.Text, id pgtype.Text) (pgtype.Text, error)
	// UpdateRunStatusBatch enqueues a UpdateRunStatus query into batch to be executed
	// later by the batch.
	UpdateRunStatusBatch(batch genericBatch, status pgtype.Text, id pgtype.Text)
	// UpdateRunStatusScan scans the result of an executed UpdateRunStatusBatch query.
	UpdateRunStatusScan(results pgx.BatchResults) (pgtype.Text, error)

	UpdateCancelSignaledAt(ctx context.Context, cancelSignaledAt pgtype.Timestamptz, id pgtype.Text) (pgtype.Text, error)
	// UpdateCancelSignaledAtBatch enqueues a UpdateCancelSignaledAt query into batch to be executed
	// later by the batch.
	UpdateCancelSignaledAtBatch(batch genericBatch, cancelSignaledAt pgtype.Timestamptz, id pgtype.Text)
	// UpdateCancelSignaledAtScan scans the result of an executed UpdateCancelSignaledAtBatch query.
	UpdateCancelSignaledAtScan(results pgx.BatchResults) (pgtype.Text, error)

	DeleteRunByID(ctx context.Context, runID pgtype.Text) (pgtype.Text, error)
	// DeleteRunByIDBatch enqueues a DeleteRunByID query into batch to be executed
	// later by the batch.
	DeleteRunByIDBatch(batch genericBatch, runID pgtype.Text)
	// DeleteRunByIDScan scans the result of an executed DeleteRunByIDBatch query.
	DeleteRunByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertStateVersion(ctx context.Context, params InsertStateVersionParams) (pgconn.CommandTag, error)
	// InsertStateVersionBatch enqueues a InsertStateVersion query into batch to be executed
	// later by the batch.
	InsertStateVersionBatch(batch genericBatch, params InsertStateVersionParams)
	// InsertStateVersionScan scans the result of an executed InsertStateVersionBatch query.
	InsertStateVersionScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	UpdateState(ctx context.Context, state []byte, stateVersionID pgtype.Text) (pgconn.CommandTag, error)
	// UpdateStateBatch enqueues a UpdateState query into batch to be executed
	// later by the batch.
	UpdateStateBatch(batch genericBatch, state []byte, stateVersionID pgtype.Text)
	// UpdateStateScan scans the result of an executed UpdateStateBatch query.
	UpdateStateScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	DiscardPendingStateVersionsByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) (pgconn.CommandTag, error)
	// DiscardPendingStateVersionsByWorkspaceIDBatch enqueues a DiscardPendingStateVersionsByWorkspaceID query into batch to be executed
	// later by the batch.
	DiscardPendingStateVersionsByWorkspaceIDBatch(batch genericBatch, workspaceID pgtype.Text)
	// DiscardPendingStateVersionsByWorkspaceIDScan scans the result of an executed DiscardPendingStateVersionsByWorkspaceIDBatch query.
	DiscardPendingStateVersionsByWorkspaceIDScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindStateVersionsByWorkspaceID(ctx context.Context, params FindStateVersionsByWorkspaceIDParams) ([]FindStateVersionsByWorkspaceIDRow, error)
	// FindStateVersionsByWorkspaceIDBatch enqueues a FindStateVersionsByWorkspaceID query into batch to be executed
	// later by the batch.
	FindStateVersionsByWorkspaceIDBatch(batch genericBatch, params FindStateVersionsByWorkspaceIDParams)
	// FindStateVersionsByWorkspaceIDScan scans the result of an executed FindStateVersionsByWorkspaceIDBatch query.
	FindStateVersionsByWorkspaceIDScan(results pgx.BatchResults) ([]FindStateVersionsByWorkspaceIDRow, error)

	CountStateVersionsByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) (pgtype.Int8, error)
	// CountStateVersionsByWorkspaceIDBatch enqueues a CountStateVersionsByWorkspaceID query into batch to be executed
	// later by the batch.
	CountStateVersionsByWorkspaceIDBatch(batch genericBatch, workspaceID pgtype.Text)
	// CountStateVersionsByWorkspaceIDScan scans the result of an executed CountStateVersionsByWorkspaceIDBatch query.
	CountStateVersionsByWorkspaceIDScan(results pgx.BatchResults) (pgtype.Int8, error)

	FindStateVersionByID(ctx context.Context, id pgtype.Text) (FindStateVersionByIDRow, error)
	// FindStateVersionByIDBatch enqueues a FindStateVersionByID query into batch to be executed
	// later by the batch.
	FindStateVersionByIDBatch(batch genericBatch, id pgtype.Text)
	// FindStateVersionByIDScan scans the result of an executed FindStateVersionByIDBatch query.
	FindStateVersionByIDScan(results pgx.BatchResults) (FindStateVersionByIDRow, error)

	FindStateVersionByIDForUpdate(ctx context.Context, id pgtype.Text) (FindStateVersionByIDForUpdateRow, error)
	// FindStateVersionByIDForUpdateBatch enqueues a FindStateVersionByIDForUpdate query into batch to be executed
	// later by the batch.
	FindStateVersionByIDForUpdateBatch(batch genericBatch, id pgtype.Text)
	// FindStateVersionByIDForUpdateScan scans the result of an executed FindStateVersionByIDForUpdateBatch query.
	FindStateVersionByIDForUpdateScan(results pgx.BatchResults) (FindStateVersionByIDForUpdateRow, error)

	FindCurrentStateVersionByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) (FindCurrentStateVersionByWorkspaceIDRow, error)
	// FindCurrentStateVersionByWorkspaceIDBatch enqueues a FindCurrentStateVersionByWorkspaceID query into batch to be executed
	// later by the batch.
	FindCurrentStateVersionByWorkspaceIDBatch(batch genericBatch, workspaceID pgtype.Text)
	// FindCurrentStateVersionByWorkspaceIDScan scans the result of an executed FindCurrentStateVersionByWorkspaceIDBatch query.
	FindCurrentStateVersionByWorkspaceIDScan(results pgx.BatchResults) (FindCurrentStateVersionByWorkspaceIDRow, error)

	FindStateVersionStateByID(ctx context.Context, id pgtype.Text) ([]byte, error)
	// FindStateVersionStateByIDBatch enqueues a FindStateVersionStateByID query into batch to be executed
	// later by the batch.
	FindStateVersionStateByIDBatch(batch genericBatch, id pgtype.Text)
	// FindStateVersionStateByIDScan scans the result of an executed FindStateVersionStateByIDBatch query.
	FindStateVersionStateByIDScan(results pgx.BatchResults) ([]byte, error)

	DeleteStateVersionByID(ctx context.Context, stateVersionID pgtype.Text) (pgtype.Text, error)
	// DeleteStateVersionByIDBatch enqueues a DeleteStateVersionByID query into batch to be executed
	// later by the batch.
	DeleteStateVersionByIDBatch(batch genericBatch, stateVersionID pgtype.Text)
	// DeleteStateVersionByIDScan scans the result of an executed DeleteStateVersionByIDBatch query.
	DeleteStateVersionByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertStateVersionOutput(ctx context.Context, params InsertStateVersionOutputParams) (pgconn.CommandTag, error)
	// InsertStateVersionOutputBatch enqueues a InsertStateVersionOutput query into batch to be executed
	// later by the batch.
	InsertStateVersionOutputBatch(batch genericBatch, params InsertStateVersionOutputParams)
	// InsertStateVersionOutputScan scans the result of an executed InsertStateVersionOutputBatch query.
	InsertStateVersionOutputScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindStateVersionOutputByID(ctx context.Context, id pgtype.Text) (FindStateVersionOutputByIDRow, error)
	// FindStateVersionOutputByIDBatch enqueues a FindStateVersionOutputByID query into batch to be executed
	// later by the batch.
	FindStateVersionOutputByIDBatch(batch genericBatch, id pgtype.Text)
	// FindStateVersionOutputByIDScan scans the result of an executed FindStateVersionOutputByIDBatch query.
	FindStateVersionOutputByIDScan(results pgx.BatchResults) (FindStateVersionOutputByIDRow, error)

	InsertTag(ctx context.Context, params InsertTagParams) (pgconn.CommandTag, error)
	// InsertTagBatch enqueues a InsertTag query into batch to be executed
	// later by the batch.
	InsertTagBatch(batch genericBatch, params InsertTagParams)
	// InsertTagScan scans the result of an executed InsertTagBatch query.
	InsertTagScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	InsertWorkspaceTag(ctx context.Context, tagID pgtype.Text, workspaceID pgtype.Text) (pgtype.Text, error)
	// InsertWorkspaceTagBatch enqueues a InsertWorkspaceTag query into batch to be executed
	// later by the batch.
	InsertWorkspaceTagBatch(batch genericBatch, tagID pgtype.Text, workspaceID pgtype.Text)
	// InsertWorkspaceTagScan scans the result of an executed InsertWorkspaceTagBatch query.
	InsertWorkspaceTagScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertWorkspaceTagByName(ctx context.Context, workspaceID pgtype.Text, tagName pgtype.Text) (pgtype.Text, error)
	// InsertWorkspaceTagByNameBatch enqueues a InsertWorkspaceTagByName query into batch to be executed
	// later by the batch.
	InsertWorkspaceTagByNameBatch(batch genericBatch, workspaceID pgtype.Text, tagName pgtype.Text)
	// InsertWorkspaceTagByNameScan scans the result of an executed InsertWorkspaceTagByNameBatch query.
	InsertWorkspaceTagByNameScan(results pgx.BatchResults) (pgtype.Text, error)

	FindTags(ctx context.Context, params FindTagsParams) ([]FindTagsRow, error)
	// FindTagsBatch enqueues a FindTags query into batch to be executed
	// later by the batch.
	FindTagsBatch(batch genericBatch, params FindTagsParams)
	// FindTagsScan scans the result of an executed FindTagsBatch query.
	FindTagsScan(results pgx.BatchResults) ([]FindTagsRow, error)

	FindWorkspaceTags(ctx context.Context, params FindWorkspaceTagsParams) ([]FindWorkspaceTagsRow, error)
	// FindWorkspaceTagsBatch enqueues a FindWorkspaceTags query into batch to be executed
	// later by the batch.
	FindWorkspaceTagsBatch(batch genericBatch, params FindWorkspaceTagsParams)
	// FindWorkspaceTagsScan scans the result of an executed FindWorkspaceTagsBatch query.
	FindWorkspaceTagsScan(results pgx.BatchResults) ([]FindWorkspaceTagsRow, error)

	FindTagByName(ctx context.Context, name pgtype.Text, organizationName pgtype.Text) (FindTagByNameRow, error)
	// FindTagByNameBatch enqueues a FindTagByName query into batch to be executed
	// later by the batch.
	FindTagByNameBatch(batch genericBatch, name pgtype.Text, organizationName pgtype.Text)
	// FindTagByNameScan scans the result of an executed FindTagByNameBatch query.
	FindTagByNameScan(results pgx.BatchResults) (FindTagByNameRow, error)

	FindTagByID(ctx context.Context, tagID pgtype.Text, organizationName pgtype.Text) (FindTagByIDRow, error)
	// FindTagByIDBatch enqueues a FindTagByID query into batch to be executed
	// later by the batch.
	FindTagByIDBatch(batch genericBatch, tagID pgtype.Text, organizationName pgtype.Text)
	// FindTagByIDScan scans the result of an executed FindTagByIDBatch query.
	FindTagByIDScan(results pgx.BatchResults) (FindTagByIDRow, error)

	CountTags(ctx context.Context, organizationName pgtype.Text) (pgtype.Int8, error)
	// CountTagsBatch enqueues a CountTags query into batch to be executed
	// later by the batch.
	CountTagsBatch(batch genericBatch, organizationName pgtype.Text)
	// CountTagsScan scans the result of an executed CountTagsBatch query.
	CountTagsScan(results pgx.BatchResults) (pgtype.Int8, error)

	CountWorkspaceTags(ctx context.Context, workspaceID pgtype.Text) (pgtype.Int8, error)
	// CountWorkspaceTagsBatch enqueues a CountWorkspaceTags query into batch to be executed
	// later by the batch.
	CountWorkspaceTagsBatch(batch genericBatch, workspaceID pgtype.Text)
	// CountWorkspaceTagsScan scans the result of an executed CountWorkspaceTagsBatch query.
	CountWorkspaceTagsScan(results pgx.BatchResults) (pgtype.Int8, error)

	DeleteTag(ctx context.Context, tagID pgtype.Text, organizationName pgtype.Text) (pgtype.Text, error)
	// DeleteTagBatch enqueues a DeleteTag query into batch to be executed
	// later by the batch.
	DeleteTagBatch(batch genericBatch, tagID pgtype.Text, organizationName pgtype.Text)
	// DeleteTagScan scans the result of an executed DeleteTagBatch query.
	DeleteTagScan(results pgx.BatchResults) (pgtype.Text, error)

	DeleteWorkspaceTag(ctx context.Context, workspaceID pgtype.Text, tagID pgtype.Text) (pgtype.Text, error)
	// DeleteWorkspaceTagBatch enqueues a DeleteWorkspaceTag query into batch to be executed
	// later by the batch.
	DeleteWorkspaceTagBatch(batch genericBatch, workspaceID pgtype.Text, tagID pgtype.Text)
	// DeleteWorkspaceTagScan scans the result of an executed DeleteWorkspaceTagBatch query.
	DeleteWorkspaceTagScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertTeam(ctx context.Context, params InsertTeamParams) (pgconn.CommandTag, error)
	// InsertTeamBatch enqueues a InsertTeam query into batch to be executed
	// later by the batch.
	InsertTeamBatch(batch genericBatch, params InsertTeamParams)
	// InsertTeamScan scans the result of an executed InsertTeamBatch query.
	InsertTeamScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindTeamsByOrg(ctx context.Context, organizationName pgtype.Text) ([]FindTeamsByOrgRow, error)
	// FindTeamsByOrgBatch enqueues a FindTeamsByOrg query into batch to be executed
	// later by the batch.
	FindTeamsByOrgBatch(batch genericBatch, organizationName pgtype.Text)
	// FindTeamsByOrgScan scans the result of an executed FindTeamsByOrgBatch query.
	FindTeamsByOrgScan(results pgx.BatchResults) ([]FindTeamsByOrgRow, error)

	FindTeamByName(ctx context.Context, name pgtype.Text, organizationName pgtype.Text) (FindTeamByNameRow, error)
	// FindTeamByNameBatch enqueues a FindTeamByName query into batch to be executed
	// later by the batch.
	FindTeamByNameBatch(batch genericBatch, name pgtype.Text, organizationName pgtype.Text)
	// FindTeamByNameScan scans the result of an executed FindTeamByNameBatch query.
	FindTeamByNameScan(results pgx.BatchResults) (FindTeamByNameRow, error)

	FindTeamByID(ctx context.Context, teamID pgtype.Text) (FindTeamByIDRow, error)
	// FindTeamByIDBatch enqueues a FindTeamByID query into batch to be executed
	// later by the batch.
	FindTeamByIDBatch(batch genericBatch, teamID pgtype.Text)
	// FindTeamByIDScan scans the result of an executed FindTeamByIDBatch query.
	FindTeamByIDScan(results pgx.BatchResults) (FindTeamByIDRow, error)

	FindTeamByTokenID(ctx context.Context, tokenID pgtype.Text) (FindTeamByTokenIDRow, error)
	// FindTeamByTokenIDBatch enqueues a FindTeamByTokenID query into batch to be executed
	// later by the batch.
	FindTeamByTokenIDBatch(batch genericBatch, tokenID pgtype.Text)
	// FindTeamByTokenIDScan scans the result of an executed FindTeamByTokenIDBatch query.
	FindTeamByTokenIDScan(results pgx.BatchResults) (FindTeamByTokenIDRow, error)

	FindTeamByIDForUpdate(ctx context.Context, teamID pgtype.Text) (FindTeamByIDForUpdateRow, error)
	// FindTeamByIDForUpdateBatch enqueues a FindTeamByIDForUpdate query into batch to be executed
	// later by the batch.
	FindTeamByIDForUpdateBatch(batch genericBatch, teamID pgtype.Text)
	// FindTeamByIDForUpdateScan scans the result of an executed FindTeamByIDForUpdateBatch query.
	FindTeamByIDForUpdateScan(results pgx.BatchResults) (FindTeamByIDForUpdateRow, error)

	UpdateTeamByID(ctx context.Context, params UpdateTeamByIDParams) (pgtype.Text, error)
	// UpdateTeamByIDBatch enqueues a UpdateTeamByID query into batch to be executed
	// later by the batch.
	UpdateTeamByIDBatch(batch genericBatch, params UpdateTeamByIDParams)
	// UpdateTeamByIDScan scans the result of an executed UpdateTeamByIDBatch query.
	UpdateTeamByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	DeleteTeamByID(ctx context.Context, teamID pgtype.Text) (pgtype.Text, error)
	// DeleteTeamByIDBatch enqueues a DeleteTeamByID query into batch to be executed
	// later by the batch.
	DeleteTeamByIDBatch(batch genericBatch, teamID pgtype.Text)
	// DeleteTeamByIDScan scans the result of an executed DeleteTeamByIDBatch query.
	DeleteTeamByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertTeamMembership(ctx context.Context, usernames []string, teamID pgtype.Text) ([]pgtype.Text, error)
	// InsertTeamMembershipBatch enqueues a InsertTeamMembership query into batch to be executed
	// later by the batch.
	InsertTeamMembershipBatch(batch genericBatch, usernames []string, teamID pgtype.Text)
	// InsertTeamMembershipScan scans the result of an executed InsertTeamMembershipBatch query.
	InsertTeamMembershipScan(results pgx.BatchResults) ([]pgtype.Text, error)

	DeleteTeamMembership(ctx context.Context, usernames []string, teamID pgtype.Text) ([]pgtype.Text, error)
	// DeleteTeamMembershipBatch enqueues a DeleteTeamMembership query into batch to be executed
	// later by the batch.
	DeleteTeamMembershipBatch(batch genericBatch, usernames []string, teamID pgtype.Text)
	// DeleteTeamMembershipScan scans the result of an executed DeleteTeamMembershipBatch query.
	DeleteTeamMembershipScan(results pgx.BatchResults) ([]pgtype.Text, error)

	InsertTeamToken(ctx context.Context, params InsertTeamTokenParams) (pgconn.CommandTag, error)
	// InsertTeamTokenBatch enqueues a InsertTeamToken query into batch to be executed
	// later by the batch.
	InsertTeamTokenBatch(batch genericBatch, params InsertTeamTokenParams)
	// InsertTeamTokenScan scans the result of an executed InsertTeamTokenBatch query.
	InsertTeamTokenScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindTeamTokensByID(ctx context.Context, teamID pgtype.Text) ([]FindTeamTokensByIDRow, error)
	// FindTeamTokensByIDBatch enqueues a FindTeamTokensByID query into batch to be executed
	// later by the batch.
	FindTeamTokensByIDBatch(batch genericBatch, teamID pgtype.Text)
	// FindTeamTokensByIDScan scans the result of an executed FindTeamTokensByIDBatch query.
	FindTeamTokensByIDScan(results pgx.BatchResults) ([]FindTeamTokensByIDRow, error)

	DeleteTeamTokenByID(ctx context.Context, teamID pgtype.Text) (pgtype.Text, error)
	// DeleteTeamTokenByIDBatch enqueues a DeleteTeamTokenByID query into batch to be executed
	// later by the batch.
	DeleteTeamTokenByIDBatch(batch genericBatch, teamID pgtype.Text)
	// DeleteTeamTokenByIDScan scans the result of an executed DeleteTeamTokenByIDBatch query.
	DeleteTeamTokenByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertToken(ctx context.Context, params InsertTokenParams) (pgconn.CommandTag, error)
	// InsertTokenBatch enqueues a InsertToken query into batch to be executed
	// later by the batch.
	InsertTokenBatch(batch genericBatch, params InsertTokenParams)
	// InsertTokenScan scans the result of an executed InsertTokenBatch query.
	InsertTokenScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindTokensByUsername(ctx context.Context, username pgtype.Text) ([]FindTokensByUsernameRow, error)
	// FindTokensByUsernameBatch enqueues a FindTokensByUsername query into batch to be executed
	// later by the batch.
	FindTokensByUsernameBatch(batch genericBatch, username pgtype.Text)
	// FindTokensByUsernameScan scans the result of an executed FindTokensByUsernameBatch query.
	FindTokensByUsernameScan(results pgx.BatchResults) ([]FindTokensByUsernameRow, error)

	FindTokenByID(ctx context.Context, tokenID pgtype.Text) (FindTokenByIDRow, error)
	// FindTokenByIDBatch enqueues a FindTokenByID query into batch to be executed
	// later by the batch.
	FindTokenByIDBatch(batch genericBatch, tokenID pgtype.Text)
	// FindTokenByIDScan scans the result of an executed FindTokenByIDBatch query.
	FindTokenByIDScan(results pgx.BatchResults) (FindTokenByIDRow, error)

	DeleteTokenByID(ctx context.Context, tokenID pgtype.Text) (pgtype.Text, error)
	// DeleteTokenByIDBatch enqueues a DeleteTokenByID query into batch to be executed
	// later by the batch.
	DeleteTokenByIDBatch(batch genericBatch, tokenID pgtype.Text)
	// DeleteTokenByIDScan scans the result of an executed DeleteTokenByIDBatch query.
	DeleteTokenByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertUser(ctx context.Context, params InsertUserParams) (pgconn.CommandTag, error)
	// InsertUserBatch enqueues a InsertUser query into batch to be executed
	// later by the batch.
	InsertUserBatch(batch genericBatch, params InsertUserParams)
	// InsertUserScan scans the result of an executed InsertUserBatch query.
	InsertUserScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindUsers(ctx context.Context) ([]FindUsersRow, error)
	// FindUsersBatch enqueues a FindUsers query into batch to be executed
	// later by the batch.
	FindUsersBatch(batch genericBatch)
	// FindUsersScan scans the result of an executed FindUsersBatch query.
	FindUsersScan(results pgx.BatchResults) ([]FindUsersRow, error)

	FindUsersByOrganization(ctx context.Context, organizationName pgtype.Text) ([]FindUsersByOrganizationRow, error)
	// FindUsersByOrganizationBatch enqueues a FindUsersByOrganization query into batch to be executed
	// later by the batch.
	FindUsersByOrganizationBatch(batch genericBatch, organizationName pgtype.Text)
	// FindUsersByOrganizationScan scans the result of an executed FindUsersByOrganizationBatch query.
	FindUsersByOrganizationScan(results pgx.BatchResults) ([]FindUsersByOrganizationRow, error)

	FindUsersByTeamID(ctx context.Context, teamID pgtype.Text) ([]FindUsersByTeamIDRow, error)
	// FindUsersByTeamIDBatch enqueues a FindUsersByTeamID query into batch to be executed
	// later by the batch.
	FindUsersByTeamIDBatch(batch genericBatch, teamID pgtype.Text)
	// FindUsersByTeamIDScan scans the result of an executed FindUsersByTeamIDBatch query.
	FindUsersByTeamIDScan(results pgx.BatchResults) ([]FindUsersByTeamIDRow, error)

	FindUserByID(ctx context.Context, userID pgtype.Text) (FindUserByIDRow, error)
	// FindUserByIDBatch enqueues a FindUserByID query into batch to be executed
	// later by the batch.
	FindUserByIDBatch(batch genericBatch, userID pgtype.Text)
	// FindUserByIDScan scans the result of an executed FindUserByIDBatch query.
	FindUserByIDScan(results pgx.BatchResults) (FindUserByIDRow, error)

	FindUserByUsername(ctx context.Context, username pgtype.Text) (FindUserByUsernameRow, error)
	// FindUserByUsernameBatch enqueues a FindUserByUsername query into batch to be executed
	// later by the batch.
	FindUserByUsernameBatch(batch genericBatch, username pgtype.Text)
	// FindUserByUsernameScan scans the result of an executed FindUserByUsernameBatch query.
	FindUserByUsernameScan(results pgx.BatchResults) (FindUserByUsernameRow, error)

	FindUserByAuthenticationTokenID(ctx context.Context, tokenID pgtype.Text) (FindUserByAuthenticationTokenIDRow, error)
	// FindUserByAuthenticationTokenIDBatch enqueues a FindUserByAuthenticationTokenID query into batch to be executed
	// later by the batch.
	FindUserByAuthenticationTokenIDBatch(batch genericBatch, tokenID pgtype.Text)
	// FindUserByAuthenticationTokenIDScan scans the result of an executed FindUserByAuthenticationTokenIDBatch query.
	FindUserByAuthenticationTokenIDScan(results pgx.BatchResults) (FindUserByAuthenticationTokenIDRow, error)

	UpdateUserSiteAdmins(ctx context.Context, usernames []string) ([]pgtype.Text, error)
	// UpdateUserSiteAdminsBatch enqueues a UpdateUserSiteAdmins query into batch to be executed
	// later by the batch.
	UpdateUserSiteAdminsBatch(batch genericBatch, usernames []string)
	// UpdateUserSiteAdminsScan scans the result of an executed UpdateUserSiteAdminsBatch query.
	UpdateUserSiteAdminsScan(results pgx.BatchResults) ([]pgtype.Text, error)

	ResetUserSiteAdmins(ctx context.Context) ([]pgtype.Text, error)
	// ResetUserSiteAdminsBatch enqueues a ResetUserSiteAdmins query into batch to be executed
	// later by the batch.
	ResetUserSiteAdminsBatch(batch genericBatch)
	// ResetUserSiteAdminsScan scans the result of an executed ResetUserSiteAdminsBatch query.
	ResetUserSiteAdminsScan(results pgx.BatchResults) ([]pgtype.Text, error)

	DeleteUserByID(ctx context.Context, userID pgtype.Text) (pgtype.Text, error)
	// DeleteUserByIDBatch enqueues a DeleteUserByID query into batch to be executed
	// later by the batch.
	DeleteUserByIDBatch(batch genericBatch, userID pgtype.Text)
	// DeleteUserByIDScan scans the result of an executed DeleteUserByIDBatch query.
	DeleteUserByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	DeleteUserByUsername(ctx context.Context, username pgtype.Text) (pgtype.Text, error)
	// DeleteUserByUsernameBatch enqueues a DeleteUserByUsername query into batch to be executed
	// later by the batch.
	DeleteUserByUsernameBatch(batch genericBatch, username pgtype.Text)
	// DeleteUserByUsernameScan scans the result of an executed DeleteUserByUsernameBatch query.
	DeleteUserByUsernameScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertVariable(ctx context.Context, params InsertVariableParams) (pgconn.CommandTag, error)
	// InsertVariableBatch enqueues a InsertVariable query into batch to be executed
	// later by the batch.
	InsertVariableBatch(batch genericBatch, params InsertVariableParams)
	// InsertVariableScan scans the result of an executed InsertVariableBatch query.
	InsertVariableScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindVariable(ctx context.Context, variableID pgtype.Text) (FindVariableRow, error)
	// FindVariableBatch enqueues a FindVariable query into batch to be executed
	// later by the batch.
	FindVariableBatch(batch genericBatch, variableID pgtype.Text)
	// FindVariableScan scans the result of an executed FindVariableBatch query.
	FindVariableScan(results pgx.BatchResults) (FindVariableRow, error)

	UpdateVariableByID(ctx context.Context, params UpdateVariableByIDParams) (pgtype.Text, error)
	// UpdateVariableByIDBatch enqueues a UpdateVariableByID query into batch to be executed
	// later by the batch.
	UpdateVariableByIDBatch(batch genericBatch, params UpdateVariableByIDParams)
	// UpdateVariableByIDScan scans the result of an executed UpdateVariableByIDBatch query.
	UpdateVariableByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	DeleteVariableByID(ctx context.Context, variableID pgtype.Text) (DeleteVariableByIDRow, error)
	// DeleteVariableByIDBatch enqueues a DeleteVariableByID query into batch to be executed
	// later by the batch.
	DeleteVariableByIDBatch(batch genericBatch, variableID pgtype.Text)
	// DeleteVariableByIDScan scans the result of an executed DeleteVariableByIDBatch query.
	DeleteVariableByIDScan(results pgx.BatchResults) (DeleteVariableByIDRow, error)

	InsertVariableSet(ctx context.Context, params InsertVariableSetParams) (pgconn.CommandTag, error)
	// InsertVariableSetBatch enqueues a InsertVariableSet query into batch to be executed
	// later by the batch.
	InsertVariableSetBatch(batch genericBatch, params InsertVariableSetParams)
	// InsertVariableSetScan scans the result of an executed InsertVariableSetBatch query.
	InsertVariableSetScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindVariableSetsByOrganization(ctx context.Context, organizationName pgtype.Text) ([]FindVariableSetsByOrganizationRow, error)
	// FindVariableSetsByOrganizationBatch enqueues a FindVariableSetsByOrganization query into batch to be executed
	// later by the batch.
	FindVariableSetsByOrganizationBatch(batch genericBatch, organizationName pgtype.Text)
	// FindVariableSetsByOrganizationScan scans the result of an executed FindVariableSetsByOrganizationBatch query.
	FindVariableSetsByOrganizationScan(results pgx.BatchResults) ([]FindVariableSetsByOrganizationRow, error)

	FindVariableSetsByWorkspace(ctx context.Context, workspaceID pgtype.Text) ([]FindVariableSetsByWorkspaceRow, error)
	// FindVariableSetsByWorkspaceBatch enqueues a FindVariableSetsByWorkspace query into batch to be executed
	// later by the batch.
	FindVariableSetsByWorkspaceBatch(batch genericBatch, workspaceID pgtype.Text)
	// FindVariableSetsByWorkspaceScan scans the result of an executed FindVariableSetsByWorkspaceBatch query.
	FindVariableSetsByWorkspaceScan(results pgx.BatchResults) ([]FindVariableSetsByWorkspaceRow, error)

	FindVariableSetBySetID(ctx context.Context, variableSetID pgtype.Text) (FindVariableSetBySetIDRow, error)
	// FindVariableSetBySetIDBatch enqueues a FindVariableSetBySetID query into batch to be executed
	// later by the batch.
	FindVariableSetBySetIDBatch(batch genericBatch, variableSetID pgtype.Text)
	// FindVariableSetBySetIDScan scans the result of an executed FindVariableSetBySetIDBatch query.
	FindVariableSetBySetIDScan(results pgx.BatchResults) (FindVariableSetBySetIDRow, error)

	FindVariableSetByVariableID(ctx context.Context, variableID pgtype.Text) (FindVariableSetByVariableIDRow, error)
	// FindVariableSetByVariableIDBatch enqueues a FindVariableSetByVariableID query into batch to be executed
	// later by the batch.
	FindVariableSetByVariableIDBatch(batch genericBatch, variableID pgtype.Text)
	// FindVariableSetByVariableIDScan scans the result of an executed FindVariableSetByVariableIDBatch query.
	FindVariableSetByVariableIDScan(results pgx.BatchResults) (FindVariableSetByVariableIDRow, error)

	FindVariableSetForUpdate(ctx context.Context, variableSetID pgtype.Text) (FindVariableSetForUpdateRow, error)
	// FindVariableSetForUpdateBatch enqueues a FindVariableSetForUpdate query into batch to be executed
	// later by the batch.
	FindVariableSetForUpdateBatch(batch genericBatch, variableSetID pgtype.Text)
	// FindVariableSetForUpdateScan scans the result of an executed FindVariableSetForUpdateBatch query.
	FindVariableSetForUpdateScan(results pgx.BatchResults) (FindVariableSetForUpdateRow, error)

	UpdateVariableSetByID(ctx context.Context, params UpdateVariableSetByIDParams) (pgtype.Text, error)
	// UpdateVariableSetByIDBatch enqueues a UpdateVariableSetByID query into batch to be executed
	// later by the batch.
	UpdateVariableSetByIDBatch(batch genericBatch, params UpdateVariableSetByIDParams)
	// UpdateVariableSetByIDScan scans the result of an executed UpdateVariableSetByIDBatch query.
	UpdateVariableSetByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	DeleteVariableSetByID(ctx context.Context, variableSetID pgtype.Text) (DeleteVariableSetByIDRow, error)
	// DeleteVariableSetByIDBatch enqueues a DeleteVariableSetByID query into batch to be executed
	// later by the batch.
	DeleteVariableSetByIDBatch(batch genericBatch, variableSetID pgtype.Text)
	// DeleteVariableSetByIDScan scans the result of an executed DeleteVariableSetByIDBatch query.
	DeleteVariableSetByIDScan(results pgx.BatchResults) (DeleteVariableSetByIDRow, error)

	InsertVariableSetVariable(ctx context.Context, variableSetID pgtype.Text, variableID pgtype.Text) (pgconn.CommandTag, error)
	// InsertVariableSetVariableBatch enqueues a InsertVariableSetVariable query into batch to be executed
	// later by the batch.
	InsertVariableSetVariableBatch(batch genericBatch, variableSetID pgtype.Text, variableID pgtype.Text)
	// InsertVariableSetVariableScan scans the result of an executed InsertVariableSetVariableBatch query.
	InsertVariableSetVariableScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	DeleteVariableSetVariable(ctx context.Context, variableSetID pgtype.Text, variableID pgtype.Text) (DeleteVariableSetVariableRow, error)
	// DeleteVariableSetVariableBatch enqueues a DeleteVariableSetVariable query into batch to be executed
	// later by the batch.
	DeleteVariableSetVariableBatch(batch genericBatch, variableSetID pgtype.Text, variableID pgtype.Text)
	// DeleteVariableSetVariableScan scans the result of an executed DeleteVariableSetVariableBatch query.
	DeleteVariableSetVariableScan(results pgx.BatchResults) (DeleteVariableSetVariableRow, error)

	InsertVariableSetWorkspace(ctx context.Context, variableSetID pgtype.Text, workspaceID pgtype.Text) (pgconn.CommandTag, error)
	// InsertVariableSetWorkspaceBatch enqueues a InsertVariableSetWorkspace query into batch to be executed
	// later by the batch.
	InsertVariableSetWorkspaceBatch(batch genericBatch, variableSetID pgtype.Text, workspaceID pgtype.Text)
	// InsertVariableSetWorkspaceScan scans the result of an executed InsertVariableSetWorkspaceBatch query.
	InsertVariableSetWorkspaceScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	DeleteVariableSetWorkspace(ctx context.Context, variableSetID pgtype.Text, workspaceID pgtype.Text) (DeleteVariableSetWorkspaceRow, error)
	// DeleteVariableSetWorkspaceBatch enqueues a DeleteVariableSetWorkspace query into batch to be executed
	// later by the batch.
	DeleteVariableSetWorkspaceBatch(batch genericBatch, variableSetID pgtype.Text, workspaceID pgtype.Text)
	// DeleteVariableSetWorkspaceScan scans the result of an executed DeleteVariableSetWorkspaceBatch query.
	DeleteVariableSetWorkspaceScan(results pgx.BatchResults) (DeleteVariableSetWorkspaceRow, error)

	DeleteVariableSetWorkspaces(ctx context.Context, variableSetID pgtype.Text) (pgconn.CommandTag, error)
	// DeleteVariableSetWorkspacesBatch enqueues a DeleteVariableSetWorkspaces query into batch to be executed
	// later by the batch.
	DeleteVariableSetWorkspacesBatch(batch genericBatch, variableSetID pgtype.Text)
	// DeleteVariableSetWorkspacesScan scans the result of an executed DeleteVariableSetWorkspacesBatch query.
	DeleteVariableSetWorkspacesScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	InsertVCSProvider(ctx context.Context, params InsertVCSProviderParams) (pgconn.CommandTag, error)
	// InsertVCSProviderBatch enqueues a InsertVCSProvider query into batch to be executed
	// later by the batch.
	InsertVCSProviderBatch(batch genericBatch, params InsertVCSProviderParams)
	// InsertVCSProviderScan scans the result of an executed InsertVCSProviderBatch query.
	InsertVCSProviderScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindVCSProvidersByOrganization(ctx context.Context, organizationName pgtype.Text) ([]FindVCSProvidersByOrganizationRow, error)
	// FindVCSProvidersByOrganizationBatch enqueues a FindVCSProvidersByOrganization query into batch to be executed
	// later by the batch.
	FindVCSProvidersByOrganizationBatch(batch genericBatch, organizationName pgtype.Text)
	// FindVCSProvidersByOrganizationScan scans the result of an executed FindVCSProvidersByOrganizationBatch query.
	FindVCSProvidersByOrganizationScan(results pgx.BatchResults) ([]FindVCSProvidersByOrganizationRow, error)

	FindVCSProviders(ctx context.Context) ([]FindVCSProvidersRow, error)
	// FindVCSProvidersBatch enqueues a FindVCSProviders query into batch to be executed
	// later by the batch.
	FindVCSProvidersBatch(batch genericBatch)
	// FindVCSProvidersScan scans the result of an executed FindVCSProvidersBatch query.
	FindVCSProvidersScan(results pgx.BatchResults) ([]FindVCSProvidersRow, error)

	FindVCSProvidersByGithubAppInstallID(ctx context.Context, installID pgtype.Int8) ([]FindVCSProvidersByGithubAppInstallIDRow, error)
	// FindVCSProvidersByGithubAppInstallIDBatch enqueues a FindVCSProvidersByGithubAppInstallID query into batch to be executed
	// later by the batch.
	FindVCSProvidersByGithubAppInstallIDBatch(batch genericBatch, installID pgtype.Int8)
	// FindVCSProvidersByGithubAppInstallIDScan scans the result of an executed FindVCSProvidersByGithubAppInstallIDBatch query.
	FindVCSProvidersByGithubAppInstallIDScan(results pgx.BatchResults) ([]FindVCSProvidersByGithubAppInstallIDRow, error)

	FindVCSProvider(ctx context.Context, vcsProviderID pgtype.Text) (FindVCSProviderRow, error)
	// FindVCSProviderBatch enqueues a FindVCSProvider query into batch to be executed
	// later by the batch.
	FindVCSProviderBatch(batch genericBatch, vcsProviderID pgtype.Text)
	// FindVCSProviderScan scans the result of an executed FindVCSProviderBatch query.
	FindVCSProviderScan(results pgx.BatchResults) (FindVCSProviderRow, error)

	FindVCSProviderForUpdate(ctx context.Context, vcsProviderID pgtype.Text) (FindVCSProviderForUpdateRow, error)
	// FindVCSProviderForUpdateBatch enqueues a FindVCSProviderForUpdate query into batch to be executed
	// later by the batch.
	FindVCSProviderForUpdateBatch(batch genericBatch, vcsProviderID pgtype.Text)
	// FindVCSProviderForUpdateScan scans the result of an executed FindVCSProviderForUpdateBatch query.
	FindVCSProviderForUpdateScan(results pgx.BatchResults) (FindVCSProviderForUpdateRow, error)

	UpdateVCSProvider(ctx context.Context, params UpdateVCSProviderParams) (UpdateVCSProviderRow, error)
	// UpdateVCSProviderBatch enqueues a UpdateVCSProvider query into batch to be executed
	// later by the batch.
	UpdateVCSProviderBatch(batch genericBatch, params UpdateVCSProviderParams)
	// UpdateVCSProviderScan scans the result of an executed UpdateVCSProviderBatch query.
	UpdateVCSProviderScan(results pgx.BatchResults) (UpdateVCSProviderRow, error)

	DeleteVCSProviderByID(ctx context.Context, vcsProviderID pgtype.Text) (pgtype.Text, error)
	// DeleteVCSProviderByIDBatch enqueues a DeleteVCSProviderByID query into batch to be executed
	// later by the batch.
	DeleteVCSProviderByIDBatch(batch genericBatch, vcsProviderID pgtype.Text)
	// DeleteVCSProviderByIDScan scans the result of an executed DeleteVCSProviderByIDBatch query.
	DeleteVCSProviderByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	InsertWorkspace(ctx context.Context, params InsertWorkspaceParams) (pgconn.CommandTag, error)
	// InsertWorkspaceBatch enqueues a InsertWorkspace query into batch to be executed
	// later by the batch.
	InsertWorkspaceBatch(batch genericBatch, params InsertWorkspaceParams)
	// InsertWorkspaceScan scans the result of an executed InsertWorkspaceBatch query.
	InsertWorkspaceScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindWorkspaces(ctx context.Context, params FindWorkspacesParams) ([]FindWorkspacesRow, error)
	// FindWorkspacesBatch enqueues a FindWorkspaces query into batch to be executed
	// later by the batch.
	FindWorkspacesBatch(batch genericBatch, params FindWorkspacesParams)
	// FindWorkspacesScan scans the result of an executed FindWorkspacesBatch query.
	FindWorkspacesScan(results pgx.BatchResults) ([]FindWorkspacesRow, error)

	CountWorkspaces(ctx context.Context, params CountWorkspacesParams) (pgtype.Int8, error)
	// CountWorkspacesBatch enqueues a CountWorkspaces query into batch to be executed
	// later by the batch.
	CountWorkspacesBatch(batch genericBatch, params CountWorkspacesParams)
	// CountWorkspacesScan scans the result of an executed CountWorkspacesBatch query.
	CountWorkspacesScan(results pgx.BatchResults) (pgtype.Int8, error)

	FindWorkspacesByConnection(ctx context.Context, vcsProviderID pgtype.Text, repoPath pgtype.Text) ([]FindWorkspacesByConnectionRow, error)
	// FindWorkspacesByConnectionBatch enqueues a FindWorkspacesByConnection query into batch to be executed
	// later by the batch.
	FindWorkspacesByConnectionBatch(batch genericBatch, vcsProviderID pgtype.Text, repoPath pgtype.Text)
	// FindWorkspacesByConnectionScan scans the result of an executed FindWorkspacesByConnectionBatch query.
	FindWorkspacesByConnectionScan(results pgx.BatchResults) ([]FindWorkspacesByConnectionRow, error)

	FindWorkspacesByUsername(ctx context.Context, params FindWorkspacesByUsernameParams) ([]FindWorkspacesByUsernameRow, error)
	// FindWorkspacesByUsernameBatch enqueues a FindWorkspacesByUsername query into batch to be executed
	// later by the batch.
	FindWorkspacesByUsernameBatch(batch genericBatch, params FindWorkspacesByUsernameParams)
	// FindWorkspacesByUsernameScan scans the result of an executed FindWorkspacesByUsernameBatch query.
	FindWorkspacesByUsernameScan(results pgx.BatchResults) ([]FindWorkspacesByUsernameRow, error)

	CountWorkspacesByUsername(ctx context.Context, organizationName pgtype.Text, username pgtype.Text) (pgtype.Int8, error)
	// CountWorkspacesByUsernameBatch enqueues a CountWorkspacesByUsername query into batch to be executed
	// later by the batch.
	CountWorkspacesByUsernameBatch(batch genericBatch, organizationName pgtype.Text, username pgtype.Text)
	// CountWorkspacesByUsernameScan scans the result of an executed CountWorkspacesByUsernameBatch query.
	CountWorkspacesByUsernameScan(results pgx.BatchResults) (pgtype.Int8, error)

	FindWorkspaceByName(ctx context.Context, name pgtype.Text, organizationName pgtype.Text) (FindWorkspaceByNameRow, error)
	// FindWorkspaceByNameBatch enqueues a FindWorkspaceByName query into batch to be executed
	// later by the batch.
	FindWorkspaceByNameBatch(batch genericBatch, name pgtype.Text, organizationName pgtype.Text)
	// FindWorkspaceByNameScan scans the result of an executed FindWorkspaceByNameBatch query.
	FindWorkspaceByNameScan(results pgx.BatchResults) (FindWorkspaceByNameRow, error)

	FindWorkspaceByID(ctx context.Context, id pgtype.Text) (FindWorkspaceByIDRow, error)
	// FindWorkspaceByIDBatch enqueues a FindWorkspaceByID query into batch to be executed
	// later by the batch.
	FindWorkspaceByIDBatch(batch genericBatch, id pgtype.Text)
	// FindWorkspaceByIDScan scans the result of an executed FindWorkspaceByIDBatch query.
	FindWorkspaceByIDScan(results pgx.BatchResults) (FindWorkspaceByIDRow, error)

	FindWorkspaceByIDForUpdate(ctx context.Context, id pgtype.Text) (FindWorkspaceByIDForUpdateRow, error)
	// FindWorkspaceByIDForUpdateBatch enqueues a FindWorkspaceByIDForUpdate query into batch to be executed
	// later by the batch.
	FindWorkspaceByIDForUpdateBatch(batch genericBatch, id pgtype.Text)
	// FindWorkspaceByIDForUpdateScan scans the result of an executed FindWorkspaceByIDForUpdateBatch query.
	FindWorkspaceByIDForUpdateScan(results pgx.BatchResults) (FindWorkspaceByIDForUpdateRow, error)

	UpdateWorkspaceByID(ctx context.Context, params UpdateWorkspaceByIDParams) (pgtype.Text, error)
	// UpdateWorkspaceByIDBatch enqueues a UpdateWorkspaceByID query into batch to be executed
	// later by the batch.
	UpdateWorkspaceByIDBatch(batch genericBatch, params UpdateWorkspaceByIDParams)
	// UpdateWorkspaceByIDScan scans the result of an executed UpdateWorkspaceByIDBatch query.
	UpdateWorkspaceByIDScan(results pgx.BatchResults) (pgtype.Text, error)

	UpdateWorkspaceLockByID(ctx context.Context, params UpdateWorkspaceLockByIDParams) (pgconn.CommandTag, error)
	// UpdateWorkspaceLockByIDBatch enqueues a UpdateWorkspaceLockByID query into batch to be executed
	// later by the batch.
	UpdateWorkspaceLockByIDBatch(batch genericBatch, params UpdateWorkspaceLockByIDParams)
	// UpdateWorkspaceLockByIDScan scans the result of an executed UpdateWorkspaceLockByIDBatch query.
	UpdateWorkspaceLockByIDScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	UpdateWorkspaceLatestRun(ctx context.Context, runID pgtype.Text, workspaceID pgtype.Text) (pgconn.CommandTag, error)
	// UpdateWorkspaceLatestRunBatch enqueues a UpdateWorkspaceLatestRun query into batch to be executed
	// later by the batch.
	UpdateWorkspaceLatestRunBatch(batch genericBatch, runID pgtype.Text, workspaceID pgtype.Text)
	// UpdateWorkspaceLatestRunScan scans the result of an executed UpdateWorkspaceLatestRunBatch query.
	UpdateWorkspaceLatestRunScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	UpdateWorkspaceCurrentStateVersionID(ctx context.Context, stateVersionID pgtype.Text, workspaceID pgtype.Text) (pgtype.Text, error)
	// UpdateWorkspaceCurrentStateVersionIDBatch enqueues a UpdateWorkspaceCurrentStateVersionID query into batch to be executed
	// later by the batch.
	UpdateWorkspaceCurrentStateVersionIDBatch(batch genericBatch, stateVersionID pgtype.Text, workspaceID pgtype.Text)
	// UpdateWorkspaceCurrentStateVersionIDScan scans the result of an executed UpdateWorkspaceCurrentStateVersionIDBatch query.
	UpdateWorkspaceCurrentStateVersionIDScan(results pgx.BatchResults) (pgtype.Text, error)

	DeleteWorkspaceByID(ctx context.Context, workspaceID pgtype.Text) (pgconn.CommandTag, error)
	// DeleteWorkspaceByIDBatch enqueues a DeleteWorkspaceByID query into batch to be executed
	// later by the batch.
	DeleteWorkspaceByIDBatch(batch genericBatch, workspaceID pgtype.Text)
	// DeleteWorkspaceByIDScan scans the result of an executed DeleteWorkspaceByIDBatch query.
	DeleteWorkspaceByIDScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	UpsertWorkspacePermission(ctx context.Context, params UpsertWorkspacePermissionParams) (pgconn.CommandTag, error)
	// UpsertWorkspacePermissionBatch enqueues a UpsertWorkspacePermission query into batch to be executed
	// later by the batch.
	UpsertWorkspacePermissionBatch(batch genericBatch, params UpsertWorkspacePermissionParams)
	// UpsertWorkspacePermissionScan scans the result of an executed UpsertWorkspacePermissionBatch query.
	UpsertWorkspacePermissionScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindWorkspacePermissionsByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) ([]FindWorkspacePermissionsByWorkspaceIDRow, error)
	// FindWorkspacePermissionsByWorkspaceIDBatch enqueues a FindWorkspacePermissionsByWorkspaceID query into batch to be executed
	// later by the batch.
	FindWorkspacePermissionsByWorkspaceIDBatch(batch genericBatch, workspaceID pgtype.Text)
	// FindWorkspacePermissionsByWorkspaceIDScan scans the result of an executed FindWorkspacePermissionsByWorkspaceIDBatch query.
	FindWorkspacePermissionsByWorkspaceIDScan(results pgx.BatchResults) ([]FindWorkspacePermissionsByWorkspaceIDRow, error)

	DeleteWorkspacePermissionByID(ctx context.Context, workspaceID pgtype.Text, teamID pgtype.Text) (pgconn.CommandTag, error)
	// DeleteWorkspacePermissionByIDBatch enqueues a DeleteWorkspacePermissionByID query into batch to be executed
	// later by the batch.
	DeleteWorkspacePermissionByIDBatch(batch genericBatch, workspaceID pgtype.Text, teamID pgtype.Text)
	// DeleteWorkspacePermissionByIDScan scans the result of an executed DeleteWorkspacePermissionByIDBatch query.
	DeleteWorkspacePermissionByIDScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	InsertWorkspaceVariable(ctx context.Context, variableID pgtype.Text, workspaceID pgtype.Text) (pgconn.CommandTag, error)
	// InsertWorkspaceVariableBatch enqueues a InsertWorkspaceVariable query into batch to be executed
	// later by the batch.
	InsertWorkspaceVariableBatch(batch genericBatch, variableID pgtype.Text, workspaceID pgtype.Text)
	// InsertWorkspaceVariableScan scans the result of an executed InsertWorkspaceVariableBatch query.
	InsertWorkspaceVariableScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	FindWorkspaceVariablesByWorkspaceID(ctx context.Context, workspaceID pgtype.Text) ([]FindWorkspaceVariablesByWorkspaceIDRow, error)
	// FindWorkspaceVariablesByWorkspaceIDBatch enqueues a FindWorkspaceVariablesByWorkspaceID query into batch to be executed
	// later by the batch.
	FindWorkspaceVariablesByWorkspaceIDBatch(batch genericBatch, workspaceID pgtype.Text)
	// FindWorkspaceVariablesByWorkspaceIDScan scans the result of an executed FindWorkspaceVariablesByWorkspaceIDBatch query.
	FindWorkspaceVariablesByWorkspaceIDScan(results pgx.BatchResults) ([]FindWorkspaceVariablesByWorkspaceIDRow, error)

	FindWorkspaceVariableByVariableID(ctx context.Context, variableID pgtype.Text) (FindWorkspaceVariableByVariableIDRow, error)
	// FindWorkspaceVariableByVariableIDBatch enqueues a FindWorkspaceVariableByVariableID query into batch to be executed
	// later by the batch.
	FindWorkspaceVariableByVariableIDBatch(batch genericBatch, variableID pgtype.Text)
	// FindWorkspaceVariableByVariableIDScan scans the result of an executed FindWorkspaceVariableByVariableIDBatch query.
	FindWorkspaceVariableByVariableIDScan(results pgx.BatchResults) (FindWorkspaceVariableByVariableIDRow, error)

	DeleteWorkspaceVariableByID(ctx context.Context, variableID pgtype.Text) (DeleteWorkspaceVariableByIDRow, error)
	// DeleteWorkspaceVariableByIDBatch enqueues a DeleteWorkspaceVariableByID query into batch to be executed
	// later by the batch.
	DeleteWorkspaceVariableByIDBatch(batch genericBatch, variableID pgtype.Text)
	// DeleteWorkspaceVariableByIDScan scans the result of an executed DeleteWorkspaceVariableByIDBatch query.
	DeleteWorkspaceVariableByIDScan(results pgx.BatchResults) (DeleteWorkspaceVariableByIDRow, error)
}

type DBQuerier struct {
	conn  genericConn   // underlying Postgres transport to use
	types *typeResolver // resolve types by name
}

var _ Querier = &DBQuerier{}

// genericConn is a connection to a Postgres database. This is usually backed by
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	// Query executes sql with args. If there is an error the returned Rows will
	// be returned in an error state. So it is allowed to ignore the error
	// returned from Query and handle it in Rows.
	Query(ctx context.Context, sql string, args ...interface{}) (pgx.Rows, error)

	// QueryRow is a convenience wrapper over Query. Any error that occurs while
	// querying is deferred until calling Scan on the returned Row. That Row will
	// error with pgx.ErrNoRows if no rows are returned.
	QueryRow(ctx context.Context, sql string, args ...interface{}) pgx.Row

	// Exec executes sql. sql can be either a prepared statement name or an SQL
	// string. arguments should be referenced positionally from the sql string
	// as $1, $2, etc.
	Exec(ctx context.Context, sql string, arguments ...interface{}) (pgconn.CommandTag, error)
}

// genericBatch batches queries to send in a single network request to a
// Postgres server. This is usually backed by *pgx.Batch.
type genericBatch interface {
	// Queue queues a query to batch b. query can be an SQL query or the name of a
	// prepared statement. See Queue on *pgx.Batch.
	Queue(query string, arguments ...interface{})
}

// NewQuerier creates a DBQuerier that implements Querier. conn is typically
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerier(conn genericConn) *DBQuerier {
	return NewQuerierConfig(conn, QuerierConfig{})
}

type QuerierConfig struct {
	// DataTypes contains pgtype.Value to use for encoding and decoding instead
	// of pggen-generated pgtype.ValueTranscoder.
	//
	// If OIDs are available for an input parameter type and all of its
	// transitive dependencies, pggen will use the binary encoding format for
	// the input parameter.
	DataTypes []pgtype.DataType
}

// NewQuerierConfig creates a DBQuerier that implements Querier with the given
// config. conn is typically *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerierConfig(conn genericConn, cfg QuerierConfig) *DBQuerier {
	return &DBQuerier{conn: conn, types: newTypeResolver(cfg.DataTypes)}
}

// WithTx creates a new DBQuerier that uses the transaction to run all queries.
func (q *DBQuerier) WithTx(tx pgx.Tx) (*DBQuerier, error) {
	return &DBQuerier{conn: tx}, nil
}

// preparer is any Postgres connection transport that provides a way to prepare
// a statement, most commonly *pgx.Conn.
type preparer interface {
	Prepare(ctx context.Context, name, sql string) (sd *pgconn.StatementDescription, err error)
}

// PrepareAllQueries executes a PREPARE statement for all pggen generated SQL
// queries in querier files. Typical usage is as the AfterConnect callback
// for pgxpool.Config
//
// pgx will use the prepared statement if available. Calling PrepareAllQueries
// is an optional optimization to avoid a network round-trip the first time pgx
// runs a query if pgx statement caching is enabled.
func PrepareAllQueries(ctx context.Context, p preparer) error {
	if _, err := p.Prepare(ctx, insertAgentSQL, insertAgentSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertAgent': %w", err)
	}
	if _, err := p.Prepare(ctx, updateAgentSQL, updateAgentSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateAgent': %w", err)
	}
	if _, err := p.Prepare(ctx, findAgentsSQL, findAgentsSQL); err != nil {
		return fmt.Errorf("prepare query 'FindAgents': %w", err)
	}
	if _, err := p.Prepare(ctx, findAgentsByOrganizationSQL, findAgentsByOrganizationSQL); err != nil {
		return fmt.Errorf("prepare query 'FindAgentsByOrganization': %w", err)
	}
	if _, err := p.Prepare(ctx, findAgentsByPoolIDSQL, findAgentsByPoolIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindAgentsByPoolID': %w", err)
	}
	if _, err := p.Prepare(ctx, findServerAgentsSQL, findServerAgentsSQL); err != nil {
		return fmt.Errorf("prepare query 'FindServerAgents': %w", err)
	}
	if _, err := p.Prepare(ctx, findAgentByIDSQL, findAgentByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindAgentByID': %w", err)
	}
	if _, err := p.Prepare(ctx, findAgentByIDForUpdateSQL, findAgentByIDForUpdateSQL); err != nil {
		return fmt.Errorf("prepare query 'FindAgentByIDForUpdate': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteAgentSQL, deleteAgentSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteAgent': %w", err)
	}
	if _, err := p.Prepare(ctx, insertAgentPoolSQL, insertAgentPoolSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertAgentPool': %w", err)
	}
	if _, err := p.Prepare(ctx, findAgentPoolsSQL, findAgentPoolsSQL); err != nil {
		return fmt.Errorf("prepare query 'FindAgentPools': %w", err)
	}
	if _, err := p.Prepare(ctx, findAgentPoolsByOrganizationSQL, findAgentPoolsByOrganizationSQL); err != nil {
		return fmt.Errorf("prepare query 'FindAgentPoolsByOrganization': %w", err)
	}
	if _, err := p.Prepare(ctx, findAgentPoolSQL, findAgentPoolSQL); err != nil {
		return fmt.Errorf("prepare query 'FindAgentPool': %w", err)
	}
	if _, err := p.Prepare(ctx, findAgentPoolByAgentTokenIDSQL, findAgentPoolByAgentTokenIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindAgentPoolByAgentTokenID': %w", err)
	}
	if _, err := p.Prepare(ctx, updateAgentPoolSQL, updateAgentPoolSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateAgentPool': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteAgentPoolSQL, deleteAgentPoolSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteAgentPool': %w", err)
	}
	if _, err := p.Prepare(ctx, insertAgentPoolAllowedWorkspaceSQL, insertAgentPoolAllowedWorkspaceSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertAgentPoolAllowedWorkspace': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteAgentPoolAllowedWorkspaceSQL, deleteAgentPoolAllowedWorkspaceSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteAgentPoolAllowedWorkspace': %w", err)
	}
	if _, err := p.Prepare(ctx, insertAgentTokenSQL, insertAgentTokenSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertAgentToken': %w", err)
	}
	if _, err := p.Prepare(ctx, findAgentTokenByIDSQL, findAgentTokenByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindAgentTokenByID': %w", err)
	}
	if _, err := p.Prepare(ctx, findAgentTokensByAgentPoolIDSQL, findAgentTokensByAgentPoolIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindAgentTokensByAgentPoolID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteAgentTokenByIDSQL, deleteAgentTokenByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteAgentTokenByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertApplySQL, insertApplySQL); err != nil {
		return fmt.Errorf("prepare query 'InsertApply': %w", err)
	}
	if _, err := p.Prepare(ctx, updateAppliedChangesByIDSQL, updateAppliedChangesByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateAppliedChangesByID': %w", err)
	}
	if _, err := p.Prepare(ctx, updateApplyStatusByIDSQL, updateApplyStatusByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateApplyStatusByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertConfigurationVersionSQL, insertConfigurationVersionSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertConfigurationVersion': %w", err)
	}
	if _, err := p.Prepare(ctx, insertConfigurationVersionStatusTimestampSQL, insertConfigurationVersionStatusTimestampSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertConfigurationVersionStatusTimestamp': %w", err)
	}
	if _, err := p.Prepare(ctx, findConfigurationVersionsByWorkspaceIDSQL, findConfigurationVersionsByWorkspaceIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindConfigurationVersionsByWorkspaceID': %w", err)
	}
	if _, err := p.Prepare(ctx, countConfigurationVersionsByWorkspaceIDSQL, countConfigurationVersionsByWorkspaceIDSQL); err != nil {
		return fmt.Errorf("prepare query 'CountConfigurationVersionsByWorkspaceID': %w", err)
	}
	if _, err := p.Prepare(ctx, findConfigurationVersionByIDSQL, findConfigurationVersionByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindConfigurationVersionByID': %w", err)
	}
	if _, err := p.Prepare(ctx, findConfigurationVersionLatestByWorkspaceIDSQL, findConfigurationVersionLatestByWorkspaceIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindConfigurationVersionLatestByWorkspaceID': %w", err)
	}
	if _, err := p.Prepare(ctx, findConfigurationVersionByIDForUpdateSQL, findConfigurationVersionByIDForUpdateSQL); err != nil {
		return fmt.Errorf("prepare query 'FindConfigurationVersionByIDForUpdate': %w", err)
	}
	if _, err := p.Prepare(ctx, downloadConfigurationVersionSQL, downloadConfigurationVersionSQL); err != nil {
		return fmt.Errorf("prepare query 'DownloadConfigurationVersion': %w", err)
	}
	if _, err := p.Prepare(ctx, updateConfigurationVersionErroredByIDSQL, updateConfigurationVersionErroredByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateConfigurationVersionErroredByID': %w", err)
	}
	if _, err := p.Prepare(ctx, updateConfigurationVersionConfigByIDSQL, updateConfigurationVersionConfigByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateConfigurationVersionConfigByID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteConfigurationVersionByIDSQL, deleteConfigurationVersionByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteConfigurationVersionByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertGithubAppSQL, insertGithubAppSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertGithubApp': %w", err)
	}
	if _, err := p.Prepare(ctx, findGithubAppSQL, findGithubAppSQL); err != nil {
		return fmt.Errorf("prepare query 'FindGithubApp': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteGithubAppSQL, deleteGithubAppSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteGithubApp': %w", err)
	}
	if _, err := p.Prepare(ctx, insertGithubAppInstallSQL, insertGithubAppInstallSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertGithubAppInstall': %w", err)
	}
	if _, err := p.Prepare(ctx, insertIngressAttributesSQL, insertIngressAttributesSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertIngressAttributes': %w", err)
	}
	if _, err := p.Prepare(ctx, insertJobSQL, insertJobSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertJob': %w", err)
	}
	if _, err := p.Prepare(ctx, findJobsSQL, findJobsSQL); err != nil {
		return fmt.Errorf("prepare query 'FindJobs': %w", err)
	}
	if _, err := p.Prepare(ctx, findJobSQL, findJobSQL); err != nil {
		return fmt.Errorf("prepare query 'FindJob': %w", err)
	}
	if _, err := p.Prepare(ctx, findJobForUpdateSQL, findJobForUpdateSQL); err != nil {
		return fmt.Errorf("prepare query 'FindJobForUpdate': %w", err)
	}
	if _, err := p.Prepare(ctx, findAllocatedJobsSQL, findAllocatedJobsSQL); err != nil {
		return fmt.Errorf("prepare query 'FindAllocatedJobs': %w", err)
	}
	if _, err := p.Prepare(ctx, findAndUpdateSignaledJobsSQL, findAndUpdateSignaledJobsSQL); err != nil {
		return fmt.Errorf("prepare query 'FindAndUpdateSignaledJobs': %w", err)
	}
	if _, err := p.Prepare(ctx, updateJobSQL, updateJobSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateJob': %w", err)
	}
	if _, err := p.Prepare(ctx, insertModuleSQL, insertModuleSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertModule': %w", err)
	}
	if _, err := p.Prepare(ctx, insertModuleVersionSQL, insertModuleVersionSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertModuleVersion': %w", err)
	}
	if _, err := p.Prepare(ctx, listModulesByOrganizationSQL, listModulesByOrganizationSQL); err != nil {
		return fmt.Errorf("prepare query 'ListModulesByOrganization': %w", err)
	}
	if _, err := p.Prepare(ctx, findModuleByNameSQL, findModuleByNameSQL); err != nil {
		return fmt.Errorf("prepare query 'FindModuleByName': %w", err)
	}
	if _, err := p.Prepare(ctx, findModuleByIDSQL, findModuleByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindModuleByID': %w", err)
	}
	if _, err := p.Prepare(ctx, findModuleByConnectionSQL, findModuleByConnectionSQL); err != nil {
		return fmt.Errorf("prepare query 'FindModuleByConnection': %w", err)
	}
	if _, err := p.Prepare(ctx, findModuleByModuleVersionIDSQL, findModuleByModuleVersionIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindModuleByModuleVersionID': %w", err)
	}
	if _, err := p.Prepare(ctx, updateModuleStatusByIDSQL, updateModuleStatusByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateModuleStatusByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertModuleTarballSQL, insertModuleTarballSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertModuleTarball': %w", err)
	}
	if _, err := p.Prepare(ctx, findModuleTarballSQL, findModuleTarballSQL); err != nil {
		return fmt.Errorf("prepare query 'FindModuleTarball': %w", err)
	}
	if _, err := p.Prepare(ctx, updateModuleVersionStatusByIDSQL, updateModuleVersionStatusByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateModuleVersionStatusByID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteModuleByIDSQL, deleteModuleByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteModuleByID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteModuleVersionByIDSQL, deleteModuleVersionByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteModuleVersionByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertNotificationConfigurationSQL, insertNotificationConfigurationSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertNotificationConfiguration': %w", err)
	}
	if _, err := p.Prepare(ctx, findNotificationConfigurationsByWorkspaceIDSQL, findNotificationConfigurationsByWorkspaceIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindNotificationConfigurationsByWorkspaceID': %w", err)
	}
	if _, err := p.Prepare(ctx, findAllNotificationConfigurationsSQL, findAllNotificationConfigurationsSQL); err != nil {
		return fmt.Errorf("prepare query 'FindAllNotificationConfigurations': %w", err)
	}
	if _, err := p.Prepare(ctx, findNotificationConfigurationSQL, findNotificationConfigurationSQL); err != nil {
		return fmt.Errorf("prepare query 'FindNotificationConfiguration': %w", err)
	}
	if _, err := p.Prepare(ctx, findNotificationConfigurationForUpdateSQL, findNotificationConfigurationForUpdateSQL); err != nil {
		return fmt.Errorf("prepare query 'FindNotificationConfigurationForUpdate': %w", err)
	}
	if _, err := p.Prepare(ctx, updateNotificationConfigurationByIDSQL, updateNotificationConfigurationByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateNotificationConfigurationByID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteNotificationConfigurationByIDSQL, deleteNotificationConfigurationByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteNotificationConfigurationByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertOrganizationSQL, insertOrganizationSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertOrganization': %w", err)
	}
	if _, err := p.Prepare(ctx, findOrganizationNameByWorkspaceIDSQL, findOrganizationNameByWorkspaceIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindOrganizationNameByWorkspaceID': %w", err)
	}
	if _, err := p.Prepare(ctx, findOrganizationByNameSQL, findOrganizationByNameSQL); err != nil {
		return fmt.Errorf("prepare query 'FindOrganizationByName': %w", err)
	}
	if _, err := p.Prepare(ctx, findOrganizationByIDSQL, findOrganizationByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindOrganizationByID': %w", err)
	}
	if _, err := p.Prepare(ctx, findOrganizationByNameForUpdateSQL, findOrganizationByNameForUpdateSQL); err != nil {
		return fmt.Errorf("prepare query 'FindOrganizationByNameForUpdate': %w", err)
	}
	if _, err := p.Prepare(ctx, findOrganizationsSQL, findOrganizationsSQL); err != nil {
		return fmt.Errorf("prepare query 'FindOrganizations': %w", err)
	}
	if _, err := p.Prepare(ctx, countOrganizationsSQL, countOrganizationsSQL); err != nil {
		return fmt.Errorf("prepare query 'CountOrganizations': %w", err)
	}
	if _, err := p.Prepare(ctx, updateOrganizationByNameSQL, updateOrganizationByNameSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateOrganizationByName': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteOrganizationByNameSQL, deleteOrganizationByNameSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteOrganizationByName': %w", err)
	}
	if _, err := p.Prepare(ctx, upsertOrganizationTokenSQL, upsertOrganizationTokenSQL); err != nil {
		return fmt.Errorf("prepare query 'UpsertOrganizationToken': %w", err)
	}
	if _, err := p.Prepare(ctx, findOrganizationTokensSQL, findOrganizationTokensSQL); err != nil {
		return fmt.Errorf("prepare query 'FindOrganizationTokens': %w", err)
	}
	if _, err := p.Prepare(ctx, findOrganizationTokensByNameSQL, findOrganizationTokensByNameSQL); err != nil {
		return fmt.Errorf("prepare query 'FindOrganizationTokensByName': %w", err)
	}
	if _, err := p.Prepare(ctx, findOrganizationTokensByIDSQL, findOrganizationTokensByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindOrganizationTokensByID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteOrganiationTokenByNameSQL, deleteOrganiationTokenByNameSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteOrganiationTokenByName': %w", err)
	}
	if _, err := p.Prepare(ctx, insertPhaseStatusTimestampSQL, insertPhaseStatusTimestampSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertPhaseStatusTimestamp': %w", err)
	}
	if _, err := p.Prepare(ctx, insertLogChunkSQL, insertLogChunkSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertLogChunk': %w", err)
	}
	if _, err := p.Prepare(ctx, findLogsSQL, findLogsSQL); err != nil {
		return fmt.Errorf("prepare query 'FindLogs': %w", err)
	}
	if _, err := p.Prepare(ctx, findLogChunkByIDSQL, findLogChunkByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindLogChunkByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertPlanSQL, insertPlanSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertPlan': %w", err)
	}
	if _, err := p.Prepare(ctx, updatePlanStatusByIDSQL, updatePlanStatusByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdatePlanStatusByID': %w", err)
	}
	if _, err := p.Prepare(ctx, updatePlannedChangesByIDSQL, updatePlannedChangesByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdatePlannedChangesByID': %w", err)
	}
	if _, err := p.Prepare(ctx, getPlanBinByIDSQL, getPlanBinByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'GetPlanBinByID': %w", err)
	}
	if _, err := p.Prepare(ctx, getPlanJSONByIDSQL, getPlanJSONByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'GetPlanJSONByID': %w", err)
	}
	if _, err := p.Prepare(ctx, updatePlanBinByIDSQL, updatePlanBinByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdatePlanBinByID': %w", err)
	}
	if _, err := p.Prepare(ctx, updatePlanJSONByIDSQL, updatePlanJSONByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdatePlanJSONByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertLatestTerraformVersionSQL, insertLatestTerraformVersionSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertLatestTerraformVersion': %w", err)
	}
	if _, err := p.Prepare(ctx, updateLatestTerraformVersionSQL, updateLatestTerraformVersionSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateLatestTerraformVersion': %w", err)
	}
	if _, err := p.Prepare(ctx, findLatestTerraformVersionSQL, findLatestTerraformVersionSQL); err != nil {
		return fmt.Errorf("prepare query 'FindLatestTerraformVersion': %w", err)
	}
	if _, err := p.Prepare(ctx, insertRepoConnectionSQL, insertRepoConnectionSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertRepoConnection': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteWorkspaceConnectionByIDSQL, deleteWorkspaceConnectionByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteWorkspaceConnectionByID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteModuleConnectionByIDSQL, deleteModuleConnectionByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteModuleConnectionByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertRepohookSQL, insertRepohookSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertRepohook': %w", err)
	}
	if _, err := p.Prepare(ctx, updateRepohookVCSIDSQL, updateRepohookVCSIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateRepohookVCSID': %w", err)
	}
	if _, err := p.Prepare(ctx, findRepohooksSQL, findRepohooksSQL); err != nil {
		return fmt.Errorf("prepare query 'FindRepohooks': %w", err)
	}
	if _, err := p.Prepare(ctx, findRepohookByIDSQL, findRepohookByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindRepohookByID': %w", err)
	}
	if _, err := p.Prepare(ctx, findRepohookByRepoAndProviderSQL, findRepohookByRepoAndProviderSQL); err != nil {
		return fmt.Errorf("prepare query 'FindRepohookByRepoAndProvider': %w", err)
	}
	if _, err := p.Prepare(ctx, findUnreferencedRepohooksSQL, findUnreferencedRepohooksSQL); err != nil {
		return fmt.Errorf("prepare query 'FindUnreferencedRepohooks': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteRepohookByIDSQL, deleteRepohookByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteRepohookByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertRunSQL, insertRunSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertRun': %w", err)
	}
	if _, err := p.Prepare(ctx, insertRunStatusTimestampSQL, insertRunStatusTimestampSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertRunStatusTimestamp': %w", err)
	}
	if _, err := p.Prepare(ctx, insertRunVariableSQL, insertRunVariableSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertRunVariable': %w", err)
	}
	if _, err := p.Prepare(ctx, findRunsSQL, findRunsSQL); err != nil {
		return fmt.Errorf("prepare query 'FindRuns': %w", err)
	}
	if _, err := p.Prepare(ctx, countRunsSQL, countRunsSQL); err != nil {
		return fmt.Errorf("prepare query 'CountRuns': %w", err)
	}
	if _, err := p.Prepare(ctx, findRunByIDSQL, findRunByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindRunByID': %w", err)
	}
	if _, err := p.Prepare(ctx, findRunByIDForUpdateSQL, findRunByIDForUpdateSQL); err != nil {
		return fmt.Errorf("prepare query 'FindRunByIDForUpdate': %w", err)
	}
	if _, err := p.Prepare(ctx, putLockFileSQL, putLockFileSQL); err != nil {
		return fmt.Errorf("prepare query 'PutLockFile': %w", err)
	}
	if _, err := p.Prepare(ctx, getLockFileByIDSQL, getLockFileByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'GetLockFileByID': %w", err)
	}
	if _, err := p.Prepare(ctx, updateRunStatusSQL, updateRunStatusSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateRunStatus': %w", err)
	}
	if _, err := p.Prepare(ctx, updateCancelSignaledAtSQL, updateCancelSignaledAtSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateCancelSignaledAt': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteRunByIDSQL, deleteRunByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteRunByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertStateVersionSQL, insertStateVersionSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertStateVersion': %w", err)
	}
	if _, err := p.Prepare(ctx, updateStateSQL, updateStateSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateState': %w", err)
	}
	if _, err := p.Prepare(ctx, discardPendingStateVersionsByWorkspaceIDSQL, discardPendingStateVersionsByWorkspaceIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DiscardPendingStateVersionsByWorkspaceID': %w", err)
	}
	if _, err := p.Prepare(ctx, findStateVersionsByWorkspaceIDSQL, findStateVersionsByWorkspaceIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindStateVersionsByWorkspaceID': %w", err)
	}
	if _, err := p.Prepare(ctx, countStateVersionsByWorkspaceIDSQL, countStateVersionsByWorkspaceIDSQL); err != nil {
		return fmt.Errorf("prepare query 'CountStateVersionsByWorkspaceID': %w", err)
	}
	if _, err := p.Prepare(ctx, findStateVersionByIDSQL, findStateVersionByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindStateVersionByID': %w", err)
	}
	if _, err := p.Prepare(ctx, findStateVersionByIDForUpdateSQL, findStateVersionByIDForUpdateSQL); err != nil {
		return fmt.Errorf("prepare query 'FindStateVersionByIDForUpdate': %w", err)
	}
	if _, err := p.Prepare(ctx, findCurrentStateVersionByWorkspaceIDSQL, findCurrentStateVersionByWorkspaceIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindCurrentStateVersionByWorkspaceID': %w", err)
	}
	if _, err := p.Prepare(ctx, findStateVersionStateByIDSQL, findStateVersionStateByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindStateVersionStateByID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteStateVersionByIDSQL, deleteStateVersionByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteStateVersionByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertStateVersionOutputSQL, insertStateVersionOutputSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertStateVersionOutput': %w", err)
	}
	if _, err := p.Prepare(ctx, findStateVersionOutputByIDSQL, findStateVersionOutputByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindStateVersionOutputByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertTagSQL, insertTagSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertTag': %w", err)
	}
	if _, err := p.Prepare(ctx, insertWorkspaceTagSQL, insertWorkspaceTagSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertWorkspaceTag': %w", err)
	}
	if _, err := p.Prepare(ctx, insertWorkspaceTagByNameSQL, insertWorkspaceTagByNameSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertWorkspaceTagByName': %w", err)
	}
	if _, err := p.Prepare(ctx, findTagsSQL, findTagsSQL); err != nil {
		return fmt.Errorf("prepare query 'FindTags': %w", err)
	}
	if _, err := p.Prepare(ctx, findWorkspaceTagsSQL, findWorkspaceTagsSQL); err != nil {
		return fmt.Errorf("prepare query 'FindWorkspaceTags': %w", err)
	}
	if _, err := p.Prepare(ctx, findTagByNameSQL, findTagByNameSQL); err != nil {
		return fmt.Errorf("prepare query 'FindTagByName': %w", err)
	}
	if _, err := p.Prepare(ctx, findTagByIDSQL, findTagByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindTagByID': %w", err)
	}
	if _, err := p.Prepare(ctx, countTagsSQL, countTagsSQL); err != nil {
		return fmt.Errorf("prepare query 'CountTags': %w", err)
	}
	if _, err := p.Prepare(ctx, countWorkspaceTagsSQL, countWorkspaceTagsSQL); err != nil {
		return fmt.Errorf("prepare query 'CountWorkspaceTags': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteTagSQL, deleteTagSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteTag': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteWorkspaceTagSQL, deleteWorkspaceTagSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteWorkspaceTag': %w", err)
	}
	if _, err := p.Prepare(ctx, insertTeamSQL, insertTeamSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertTeam': %w", err)
	}
	if _, err := p.Prepare(ctx, findTeamsByOrgSQL, findTeamsByOrgSQL); err != nil {
		return fmt.Errorf("prepare query 'FindTeamsByOrg': %w", err)
	}
	if _, err := p.Prepare(ctx, findTeamByNameSQL, findTeamByNameSQL); err != nil {
		return fmt.Errorf("prepare query 'FindTeamByName': %w", err)
	}
	if _, err := p.Prepare(ctx, findTeamByIDSQL, findTeamByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindTeamByID': %w", err)
	}
	if _, err := p.Prepare(ctx, findTeamByTokenIDSQL, findTeamByTokenIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindTeamByTokenID': %w", err)
	}
	if _, err := p.Prepare(ctx, findTeamByIDForUpdateSQL, findTeamByIDForUpdateSQL); err != nil {
		return fmt.Errorf("prepare query 'FindTeamByIDForUpdate': %w", err)
	}
	if _, err := p.Prepare(ctx, updateTeamByIDSQL, updateTeamByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateTeamByID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteTeamByIDSQL, deleteTeamByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteTeamByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertTeamMembershipSQL, insertTeamMembershipSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertTeamMembership': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteTeamMembershipSQL, deleteTeamMembershipSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteTeamMembership': %w", err)
	}
	if _, err := p.Prepare(ctx, insertTeamTokenSQL, insertTeamTokenSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertTeamToken': %w", err)
	}
	if _, err := p.Prepare(ctx, findTeamTokensByIDSQL, findTeamTokensByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindTeamTokensByID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteTeamTokenByIDSQL, deleteTeamTokenByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteTeamTokenByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertTokenSQL, insertTokenSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertToken': %w", err)
	}
	if _, err := p.Prepare(ctx, findTokensByUsernameSQL, findTokensByUsernameSQL); err != nil {
		return fmt.Errorf("prepare query 'FindTokensByUsername': %w", err)
	}
	if _, err := p.Prepare(ctx, findTokenByIDSQL, findTokenByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindTokenByID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteTokenByIDSQL, deleteTokenByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteTokenByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertUserSQL, insertUserSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertUser': %w", err)
	}
	if _, err := p.Prepare(ctx, findUsersSQL, findUsersSQL); err != nil {
		return fmt.Errorf("prepare query 'FindUsers': %w", err)
	}
	if _, err := p.Prepare(ctx, findUsersByOrganizationSQL, findUsersByOrganizationSQL); err != nil {
		return fmt.Errorf("prepare query 'FindUsersByOrganization': %w", err)
	}
	if _, err := p.Prepare(ctx, findUsersByTeamIDSQL, findUsersByTeamIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindUsersByTeamID': %w", err)
	}
	if _, err := p.Prepare(ctx, findUserByIDSQL, findUserByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindUserByID': %w", err)
	}
	if _, err := p.Prepare(ctx, findUserByUsernameSQL, findUserByUsernameSQL); err != nil {
		return fmt.Errorf("prepare query 'FindUserByUsername': %w", err)
	}
	if _, err := p.Prepare(ctx, findUserByAuthenticationTokenIDSQL, findUserByAuthenticationTokenIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindUserByAuthenticationTokenID': %w", err)
	}
	if _, err := p.Prepare(ctx, updateUserSiteAdminsSQL, updateUserSiteAdminsSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateUserSiteAdmins': %w", err)
	}
	if _, err := p.Prepare(ctx, resetUserSiteAdminsSQL, resetUserSiteAdminsSQL); err != nil {
		return fmt.Errorf("prepare query 'ResetUserSiteAdmins': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteUserByIDSQL, deleteUserByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteUserByID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteUserByUsernameSQL, deleteUserByUsernameSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteUserByUsername': %w", err)
	}
	if _, err := p.Prepare(ctx, insertVariableSQL, insertVariableSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertVariable': %w", err)
	}
	if _, err := p.Prepare(ctx, findVariableSQL, findVariableSQL); err != nil {
		return fmt.Errorf("prepare query 'FindVariable': %w", err)
	}
	if _, err := p.Prepare(ctx, updateVariableByIDSQL, updateVariableByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateVariableByID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteVariableByIDSQL, deleteVariableByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteVariableByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertVariableSetSQL, insertVariableSetSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertVariableSet': %w", err)
	}
	if _, err := p.Prepare(ctx, findVariableSetsByOrganizationSQL, findVariableSetsByOrganizationSQL); err != nil {
		return fmt.Errorf("prepare query 'FindVariableSetsByOrganization': %w", err)
	}
	if _, err := p.Prepare(ctx, findVariableSetsByWorkspaceSQL, findVariableSetsByWorkspaceSQL); err != nil {
		return fmt.Errorf("prepare query 'FindVariableSetsByWorkspace': %w", err)
	}
	if _, err := p.Prepare(ctx, findVariableSetBySetIDSQL, findVariableSetBySetIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindVariableSetBySetID': %w", err)
	}
	if _, err := p.Prepare(ctx, findVariableSetByVariableIDSQL, findVariableSetByVariableIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindVariableSetByVariableID': %w", err)
	}
	if _, err := p.Prepare(ctx, findVariableSetForUpdateSQL, findVariableSetForUpdateSQL); err != nil {
		return fmt.Errorf("prepare query 'FindVariableSetForUpdate': %w", err)
	}
	if _, err := p.Prepare(ctx, updateVariableSetByIDSQL, updateVariableSetByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateVariableSetByID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteVariableSetByIDSQL, deleteVariableSetByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteVariableSetByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertVariableSetVariableSQL, insertVariableSetVariableSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertVariableSetVariable': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteVariableSetVariableSQL, deleteVariableSetVariableSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteVariableSetVariable': %w", err)
	}
	if _, err := p.Prepare(ctx, insertVariableSetWorkspaceSQL, insertVariableSetWorkspaceSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertVariableSetWorkspace': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteVariableSetWorkspaceSQL, deleteVariableSetWorkspaceSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteVariableSetWorkspace': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteVariableSetWorkspacesSQL, deleteVariableSetWorkspacesSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteVariableSetWorkspaces': %w", err)
	}
	if _, err := p.Prepare(ctx, insertVCSProviderSQL, insertVCSProviderSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertVCSProvider': %w", err)
	}
	if _, err := p.Prepare(ctx, findVCSProvidersByOrganizationSQL, findVCSProvidersByOrganizationSQL); err != nil {
		return fmt.Errorf("prepare query 'FindVCSProvidersByOrganization': %w", err)
	}
	if _, err := p.Prepare(ctx, findVCSProvidersSQL, findVCSProvidersSQL); err != nil {
		return fmt.Errorf("prepare query 'FindVCSProviders': %w", err)
	}
	if _, err := p.Prepare(ctx, findVCSProvidersByGithubAppInstallIDSQL, findVCSProvidersByGithubAppInstallIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindVCSProvidersByGithubAppInstallID': %w", err)
	}
	if _, err := p.Prepare(ctx, findVCSProviderSQL, findVCSProviderSQL); err != nil {
		return fmt.Errorf("prepare query 'FindVCSProvider': %w", err)
	}
	if _, err := p.Prepare(ctx, findVCSProviderForUpdateSQL, findVCSProviderForUpdateSQL); err != nil {
		return fmt.Errorf("prepare query 'FindVCSProviderForUpdate': %w", err)
	}
	if _, err := p.Prepare(ctx, updateVCSProviderSQL, updateVCSProviderSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateVCSProvider': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteVCSProviderByIDSQL, deleteVCSProviderByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteVCSProviderByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertWorkspaceSQL, insertWorkspaceSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertWorkspace': %w", err)
	}
	if _, err := p.Prepare(ctx, findWorkspacesSQL, findWorkspacesSQL); err != nil {
		return fmt.Errorf("prepare query 'FindWorkspaces': %w", err)
	}
	if _, err := p.Prepare(ctx, countWorkspacesSQL, countWorkspacesSQL); err != nil {
		return fmt.Errorf("prepare query 'CountWorkspaces': %w", err)
	}
	if _, err := p.Prepare(ctx, findWorkspacesByConnectionSQL, findWorkspacesByConnectionSQL); err != nil {
		return fmt.Errorf("prepare query 'FindWorkspacesByConnection': %w", err)
	}
	if _, err := p.Prepare(ctx, findWorkspacesByUsernameSQL, findWorkspacesByUsernameSQL); err != nil {
		return fmt.Errorf("prepare query 'FindWorkspacesByUsername': %w", err)
	}
	if _, err := p.Prepare(ctx, countWorkspacesByUsernameSQL, countWorkspacesByUsernameSQL); err != nil {
		return fmt.Errorf("prepare query 'CountWorkspacesByUsername': %w", err)
	}
	if _, err := p.Prepare(ctx, findWorkspaceByNameSQL, findWorkspaceByNameSQL); err != nil {
		return fmt.Errorf("prepare query 'FindWorkspaceByName': %w", err)
	}
	if _, err := p.Prepare(ctx, findWorkspaceByIDSQL, findWorkspaceByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindWorkspaceByID': %w", err)
	}
	if _, err := p.Prepare(ctx, findWorkspaceByIDForUpdateSQL, findWorkspaceByIDForUpdateSQL); err != nil {
		return fmt.Errorf("prepare query 'FindWorkspaceByIDForUpdate': %w", err)
	}
	if _, err := p.Prepare(ctx, updateWorkspaceByIDSQL, updateWorkspaceByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateWorkspaceByID': %w", err)
	}
	if _, err := p.Prepare(ctx, updateWorkspaceLockByIDSQL, updateWorkspaceLockByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateWorkspaceLockByID': %w", err)
	}
	if _, err := p.Prepare(ctx, updateWorkspaceLatestRunSQL, updateWorkspaceLatestRunSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateWorkspaceLatestRun': %w", err)
	}
	if _, err := p.Prepare(ctx, updateWorkspaceCurrentStateVersionIDSQL, updateWorkspaceCurrentStateVersionIDSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateWorkspaceCurrentStateVersionID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteWorkspaceByIDSQL, deleteWorkspaceByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteWorkspaceByID': %w", err)
	}
	if _, err := p.Prepare(ctx, upsertWorkspacePermissionSQL, upsertWorkspacePermissionSQL); err != nil {
		return fmt.Errorf("prepare query 'UpsertWorkspacePermission': %w", err)
	}
	if _, err := p.Prepare(ctx, findWorkspacePermissionsByWorkspaceIDSQL, findWorkspacePermissionsByWorkspaceIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindWorkspacePermissionsByWorkspaceID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteWorkspacePermissionByIDSQL, deleteWorkspacePermissionByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteWorkspacePermissionByID': %w", err)
	}
	if _, err := p.Prepare(ctx, insertWorkspaceVariableSQL, insertWorkspaceVariableSQL); err != nil {
		return fmt.Errorf("prepare query 'InsertWorkspaceVariable': %w", err)
	}
	if _, err := p.Prepare(ctx, findWorkspaceVariablesByWorkspaceIDSQL, findWorkspaceVariablesByWorkspaceIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindWorkspaceVariablesByWorkspaceID': %w", err)
	}
	if _, err := p.Prepare(ctx, findWorkspaceVariableByVariableIDSQL, findWorkspaceVariableByVariableIDSQL); err != nil {
		return fmt.Errorf("prepare query 'FindWorkspaceVariableByVariableID': %w", err)
	}
	if _, err := p.Prepare(ctx, deleteWorkspaceVariableByIDSQL, deleteWorkspaceVariableByIDSQL); err != nil {
		return fmt.Errorf("prepare query 'DeleteWorkspaceVariableByID': %w", err)
	}
	return nil
}

// ConfigurationVersionStatusTimestamps represents the Postgres composite type "configuration_version_status_timestamps".
type ConfigurationVersionStatusTimestamps struct {
	ConfigurationVersionID pgtype.Text        `json:"configuration_version_id"`
	Status                 pgtype.Text        `json:"status"`
	Timestamp              pgtype.Timestamptz `json:"timestamp"`
}

// GithubAppInstalls represents the Postgres composite type "github_app_installs".
type GithubAppInstalls struct {
	GithubAppID   pgtype.Int8 `json:"github_app_id"`
	InstallID     pgtype.Int8 `json:"install_id"`
	Username      pgtype.Text `json:"username"`
	Organization  pgtype.Text `json:"organization"`
	VCSProviderID pgtype.Text `json:"vcs_provider_id"`
}

// GithubApps represents the Postgres composite type "github_apps".
type GithubApps struct {
	GithubAppID   pgtype.Int8 `json:"github_app_id"`
	WebhookSecret pgtype.Text `json:"webhook_secret"`
	PrivateKey    pgtype.Text `json:"private_key"`
	Slug          pgtype.Text `json:"slug"`
	Organization  pgtype.Text `json:"organization"`
}

// IngressAttributes represents the Postgres composite type "ingress_attributes".
type IngressAttributes struct {
	Branch                 pgtype.Text `json:"branch"`
	CommitSHA              pgtype.Text `json:"commit_sha"`
	Identifier             pgtype.Text `json:"identifier"`
	IsPullRequest          pgtype.Bool `json:"is_pull_request"`
	OnDefaultBranch        pgtype.Bool `json:"on_default_branch"`
	ConfigurationVersionID pgtype.Text `json:"configuration_version_id"`
	CommitURL              pgtype.Text `json:"commit_url"`
	PullRequestNumber      pgtype.Int4 `json:"pull_request_number"`
	PullRequestURL         pgtype.Text `json:"pull_request_url"`
	PullRequestTitle       pgtype.Text `json:"pull_request_title"`
	Tag                    pgtype.Text `json:"tag"`
	SenderUsername         pgtype.Text `json:"sender_username"`
	SenderAvatarURL        pgtype.Text `json:"sender_avatar_url"`
	SenderHTMLURL          pgtype.Text `json:"sender_html_url"`
}

// ModuleVersions represents the Postgres composite type "module_versions".
type ModuleVersions struct {
	ModuleVersionID pgtype.Text        `json:"module_version_id"`
	Version         pgtype.Text        `json:"version"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
	Status          pgtype.Text        `json:"status"`
	StatusError     pgtype.Text        `json:"status_error"`
	ModuleID        pgtype.Text        `json:"module_id"`
}

// PhaseStatusTimestamps represents the Postgres composite type "phase_status_timestamps".
type PhaseStatusTimestamps struct {
	RunID     pgtype.Text        `json:"run_id"`
	Phase     pgtype.Text        `json:"phase"`
	Status    pgtype.Text        `json:"status"`
	Timestamp pgtype.Timestamptz `json:"timestamp"`
}

// RepoConnections represents the Postgres composite type "repo_connections".
type RepoConnections struct {
	ModuleID      pgtype.Text `json:"module_id"`
	WorkspaceID   pgtype.Text `json:"workspace_id"`
	RepoPath      pgtype.Text `json:"repo_path"`
	VCSProviderID pgtype.Text `json:"vcs_provider_id"`
}

// Report represents the Postgres composite type "report".
type Report struct {
	Additions    pgtype.Int4 `json:"additions"`
	Changes      pgtype.Int4 `json:"changes"`
	Destructions pgtype.Int4 `json:"destructions"`
}

// RunStatusTimestamps represents the Postgres composite type "run_status_timestamps".
type RunStatusTimestamps struct {
	RunID     pgtype.Text        `json:"run_id"`
	Status    pgtype.Text        `json:"status"`
	Timestamp pgtype.Timestamptz `json:"timestamp"`
}

// RunVariables represents the Postgres composite type "run_variables".
type RunVariables struct {
	RunID pgtype.Text `json:"run_id"`
	Key   pgtype.Text `json:"key"`
	Value pgtype.Text `json:"value"`
}

// Runs represents the Postgres composite type "runs".
type Runs struct {
	RunID                  pgtype.Text        `json:"run_id"`
	CreatedAt              pgtype.Timestamptz `json:"created_at"`
	CancelSignaledAt       pgtype.Timestamptz `json:"cancel_signaled_at"`
	IsDestroy              pgtype.Bool        `json:"is_destroy"`
	PositionInQueue        pgtype.Int4        `json:"position_in_queue"`
	Refresh                pgtype.Bool        `json:"refresh"`
	RefreshOnly            pgtype.Bool        `json:"refresh_only"`
	ReplaceAddrs           []string           `json:"replace_addrs"`
	TargetAddrs            []string           `json:"target_addrs"`
	LockFile               []byte             `json:"lock_file"`
	Status                 pgtype.Text        `json:"status"`
	WorkspaceID            pgtype.Text        `json:"workspace_id"`
	ConfigurationVersionID pgtype.Text        `json:"configuration_version_id"`
	AutoApply              pgtype.Bool        `json:"auto_apply"`
	PlanOnly               pgtype.Bool        `json:"plan_only"`
	CreatedBy              pgtype.Text        `json:"created_by"`
	Source                 pgtype.Text        `json:"source"`
	TerraformVersion       pgtype.Text        `json:"terraform_version"`
	AllowEmptyApply        pgtype.Bool        `json:"allow_empty_apply"`
}

// StateVersionOutputs represents the Postgres composite type "state_version_outputs".
type StateVersionOutputs struct {
	StateVersionOutputID pgtype.Text `json:"state_version_output_id"`
	Name                 pgtype.Text `json:"name"`
	Sensitive            pgtype.Bool `json:"sensitive"`
	Type                 pgtype.Text `json:"type"`
	Value                []byte      `json:"value"`
	StateVersionID       pgtype.Text `json:"state_version_id"`
}

// Teams represents the Postgres composite type "teams".
type Teams struct {
	TeamID                          pgtype.Text        `json:"team_id"`
	Name                            pgtype.Text        `json:"name"`
	CreatedAt                       pgtype.Timestamptz `json:"created_at"`
	PermissionManageWorkspaces      pgtype.Bool        `json:"permission_manage_workspaces"`
	PermissionManageVCS             pgtype.Bool        `json:"permission_manage_vcs"`
	PermissionManageModules         pgtype.Bool        `json:"permission_manage_modules"`
	OrganizationName                pgtype.Text        `json:"organization_name"`
	SSOTeamID                       pgtype.Text        `json:"sso_team_id"`
	Visibility                      pgtype.Text        `json:"visibility"`
	PermissionManagePolicies        pgtype.Bool        `json:"permission_manage_policies"`
	PermissionManagePolicyOverrides pgtype.Bool        `json:"permission_manage_policy_overrides"`
	PermissionManageProviders       pgtype.Bool        `json:"permission_manage_providers"`
}

// Users represents the Postgres composite type "users".
type Users struct {
	UserID    pgtype.Text        `json:"user_id"`
	Username  pgtype.Text        `json:"username"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	SiteAdmin pgtype.Bool        `json:"site_admin"`
}

// Variables represents the Postgres composite type "variables".
type Variables struct {
	VariableID  pgtype.Text `json:"variable_id"`
	Key         pgtype.Text `json:"key"`
	Value       pgtype.Text `json:"value"`
	Description pgtype.Text `json:"description"`
	Category    pgtype.Text `json:"category"`
	Sensitive   pgtype.Bool `json:"sensitive"`
	HCL         pgtype.Bool `json:"hcl"`
	VersionID   pgtype.Text `json:"version_id"`
}

// typeResolver looks up the pgtype.ValueTranscoder by Postgres type name.
type typeResolver struct {
	connInfo *pgtype.ConnInfo // types by Postgres type name
}

func newTypeResolver(types []pgtype.DataType) *typeResolver {
	ci := pgtype.NewConnInfo()
	for _, typ := range types {
		if txt, ok := typ.Value.(textPreferrer); ok && typ.OID != unknownOID {
			typ.Value = txt.ValueTranscoder
		}
		ci.RegisterDataType(typ)
	}
	return &typeResolver{connInfo: ci}
}

// findValue find the OID, and pgtype.ValueTranscoder for a Postgres type name.
func (tr *typeResolver) findValue(name string) (uint32, pgtype.ValueTranscoder, bool) {
	typ, ok := tr.connInfo.DataTypeForName(name)
	if !ok {
		return 0, nil, false
	}
	v := pgtype.NewValue(typ.Value)
	return typ.OID, v.(pgtype.ValueTranscoder), true
}

// setValue sets the value of a ValueTranscoder to a value that should always
// work and panics if it fails.
func (tr *typeResolver) setValue(vt pgtype.ValueTranscoder, val interface{}) pgtype.ValueTranscoder {
	if err := vt.Set(val); err != nil {
		panic(fmt.Sprintf("set ValueTranscoder %T to %+v: %s", vt, val, err))
	}
	return vt
}

type compositeField struct {
	name       string                 // name of the field
	typeName   string                 // Postgres type name
	defaultVal pgtype.ValueTranscoder // default value to use
}

func (tr *typeResolver) newCompositeValue(name string, fields ...compositeField) pgtype.ValueTranscoder {
	if _, val, ok := tr.findValue(name); ok {
		return val
	}
	fs := make([]pgtype.CompositeTypeField, len(fields))
	vals := make([]pgtype.ValueTranscoder, len(fields))
	isBinaryOk := true
	for i, field := range fields {
		oid, val, ok := tr.findValue(field.typeName)
		if !ok {
			oid = unknownOID
			val = field.defaultVal
		}
		isBinaryOk = isBinaryOk && oid != unknownOID
		fs[i] = pgtype.CompositeTypeField{Name: field.name, OID: oid}
		vals[i] = val
	}
	// Okay to ignore error because it's only thrown when the number of field
	// names does not equal the number of ValueTranscoders.
	typ, _ := pgtype.NewCompositeTypeValues(name, fs, vals)
	if !isBinaryOk {
		return textPreferrer{typ, name}
	}
	return typ
}

func (tr *typeResolver) newArrayValue(name, elemName string, defaultVal func() pgtype.ValueTranscoder) pgtype.ValueTranscoder {
	if _, val, ok := tr.findValue(name); ok {
		return val
	}
	elemOID, elemVal, ok := tr.findValue(elemName)
	elemValFunc := func() pgtype.ValueTranscoder {
		return pgtype.NewValue(elemVal).(pgtype.ValueTranscoder)
	}
	if !ok {
		elemOID = unknownOID
		elemValFunc = defaultVal
	}
	typ := pgtype.NewArrayType(name, elemOID, elemValFunc)
	if elemOID == unknownOID {
		return textPreferrer{typ, name}
	}
	return typ
}

// newConfigurationVersionStatusTimestamps creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'configuration_version_status_timestamps'.
func (tr *typeResolver) newConfigurationVersionStatusTimestamps() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"configuration_version_status_timestamps",
		compositeField{"configuration_version_id", "text", &pgtype.Text{}},
		compositeField{"status", "text", &pgtype.Text{}},
		compositeField{"timestamp", "timestamptz", &pgtype.Timestamptz{}},
	)
}

// newGithubAppInstalls creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'github_app_installs'.
func (tr *typeResolver) newGithubAppInstalls() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"github_app_installs",
		compositeField{"github_app_id", "int8", &pgtype.Int8{}},
		compositeField{"install_id", "int8", &pgtype.Int8{}},
		compositeField{"username", "text", &pgtype.Text{}},
		compositeField{"organization", "text", &pgtype.Text{}},
		compositeField{"vcs_provider_id", "text", &pgtype.Text{}},
	)
}

// newGithubApps creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'github_apps'.
func (tr *typeResolver) newGithubApps() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"github_apps",
		compositeField{"github_app_id", "int8", &pgtype.Int8{}},
		compositeField{"webhook_secret", "text", &pgtype.Text{}},
		compositeField{"private_key", "text", &pgtype.Text{}},
		compositeField{"slug", "text", &pgtype.Text{}},
		compositeField{"organization", "text", &pgtype.Text{}},
	)
}

// newIngressAttributes creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'ingress_attributes'.
func (tr *typeResolver) newIngressAttributes() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"ingress_attributes",
		compositeField{"branch", "text", &pgtype.Text{}},
		compositeField{"commit_sha", "text", &pgtype.Text{}},
		compositeField{"identifier", "text", &pgtype.Text{}},
		compositeField{"is_pull_request", "bool", &pgtype.Bool{}},
		compositeField{"on_default_branch", "bool", &pgtype.Bool{}},
		compositeField{"configuration_version_id", "text", &pgtype.Text{}},
		compositeField{"commit_url", "text", &pgtype.Text{}},
		compositeField{"pull_request_number", "int4", &pgtype.Int4{}},
		compositeField{"pull_request_url", "text", &pgtype.Text{}},
		compositeField{"pull_request_title", "text", &pgtype.Text{}},
		compositeField{"tag", "text", &pgtype.Text{}},
		compositeField{"sender_username", "text", &pgtype.Text{}},
		compositeField{"sender_avatar_url", "text", &pgtype.Text{}},
		compositeField{"sender_html_url", "text", &pgtype.Text{}},
	)
}

// newModuleVersions creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'module_versions'.
func (tr *typeResolver) newModuleVersions() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"module_versions",
		compositeField{"module_version_id", "text", &pgtype.Text{}},
		compositeField{"version", "text", &pgtype.Text{}},
		compositeField{"created_at", "timestamptz", &pgtype.Timestamptz{}},
		compositeField{"updated_at", "timestamptz", &pgtype.Timestamptz{}},
		compositeField{"status", "text", &pgtype.Text{}},
		compositeField{"status_error", "text", &pgtype.Text{}},
		compositeField{"module_id", "text", &pgtype.Text{}},
	)
}

// newPhaseStatusTimestamps creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'phase_status_timestamps'.
func (tr *typeResolver) newPhaseStatusTimestamps() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"phase_status_timestamps",
		compositeField{"run_id", "text", &pgtype.Text{}},
		compositeField{"phase", "text", &pgtype.Text{}},
		compositeField{"status", "text", &pgtype.Text{}},
		compositeField{"timestamp", "timestamptz", &pgtype.Timestamptz{}},
	)
}

// newRepoConnections creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'repo_connections'.
func (tr *typeResolver) newRepoConnections() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"repo_connections",
		compositeField{"module_id", "text", &pgtype.Text{}},
		compositeField{"workspace_id", "text", &pgtype.Text{}},
		compositeField{"repo_path", "text", &pgtype.Text{}},
		compositeField{"vcs_provider_id", "text", &pgtype.Text{}},
	)
}

// newReport creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'report'.
func (tr *typeResolver) newReport() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"report",
		compositeField{"additions", "int4", &pgtype.Int4{}},
		compositeField{"changes", "int4", &pgtype.Int4{}},
		compositeField{"destructions", "int4", &pgtype.Int4{}},
	)
}

// newRunStatusTimestamps creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'run_status_timestamps'.
func (tr *typeResolver) newRunStatusTimestamps() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"run_status_timestamps",
		compositeField{"run_id", "text", &pgtype.Text{}},
		compositeField{"status", "text", &pgtype.Text{}},
		compositeField{"timestamp", "timestamptz", &pgtype.Timestamptz{}},
	)
}

// newRunVariables creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'run_variables'.
func (tr *typeResolver) newRunVariables() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"run_variables",
		compositeField{"run_id", "text", &pgtype.Text{}},
		compositeField{"key", "text", &pgtype.Text{}},
		compositeField{"value", "text", &pgtype.Text{}},
	)
}

// newRuns creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'runs'.
func (tr *typeResolver) newRuns() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"runs",
		compositeField{"run_id", "text", &pgtype.Text{}},
		compositeField{"created_at", "timestamptz", &pgtype.Timestamptz{}},
		compositeField{"cancel_signaled_at", "timestamptz", &pgtype.Timestamptz{}},
		compositeField{"is_destroy", "bool", &pgtype.Bool{}},
		compositeField{"position_in_queue", "int4", &pgtype.Int4{}},
		compositeField{"refresh", "bool", &pgtype.Bool{}},
		compositeField{"refresh_only", "bool", &pgtype.Bool{}},
		compositeField{"replace_addrs", "_text", &pgtype.TextArray{}},
		compositeField{"target_addrs", "_text", &pgtype.TextArray{}},
		compositeField{"lock_file", "bytea", &pgtype.Bytea{}},
		compositeField{"status", "text", &pgtype.Text{}},
		compositeField{"workspace_id", "text", &pgtype.Text{}},
		compositeField{"configuration_version_id", "text", &pgtype.Text{}},
		compositeField{"auto_apply", "bool", &pgtype.Bool{}},
		compositeField{"plan_only", "bool", &pgtype.Bool{}},
		compositeField{"created_by", "text", &pgtype.Text{}},
		compositeField{"source", "text", &pgtype.Text{}},
		compositeField{"terraform_version", "text", &pgtype.Text{}},
		compositeField{"allow_empty_apply", "bool", &pgtype.Bool{}},
	)
}

// newStateVersionOutputs creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'state_version_outputs'.
func (tr *typeResolver) newStateVersionOutputs() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"state_version_outputs",
		compositeField{"state_version_output_id", "text", &pgtype.Text{}},
		compositeField{"name", "text", &pgtype.Text{}},
		compositeField{"sensitive", "bool", &pgtype.Bool{}},
		compositeField{"type", "text", &pgtype.Text{}},
		compositeField{"value", "bytea", &pgtype.Bytea{}},
		compositeField{"state_version_id", "text", &pgtype.Text{}},
	)
}

// newTeams creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'teams'.
func (tr *typeResolver) newTeams() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"teams",
		compositeField{"team_id", "text", &pgtype.Text{}},
		compositeField{"name", "text", &pgtype.Text{}},
		compositeField{"created_at", "timestamptz", &pgtype.Timestamptz{}},
		compositeField{"permission_manage_workspaces", "bool", &pgtype.Bool{}},
		compositeField{"permission_manage_vcs", "bool", &pgtype.Bool{}},
		compositeField{"permission_manage_modules", "bool", &pgtype.Bool{}},
		compositeField{"organization_name", "text", &pgtype.Text{}},
		compositeField{"sso_team_id", "text", &pgtype.Text{}},
		compositeField{"visibility", "text", &pgtype.Text{}},
		compositeField{"permission_manage_policies", "bool", &pgtype.Bool{}},
		compositeField{"permission_manage_policy_overrides", "bool", &pgtype.Bool{}},
		compositeField{"permission_manage_providers", "bool", &pgtype.Bool{}},
	)
}

// newUsers creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'users'.
func (tr *typeResolver) newUsers() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"users",
		compositeField{"user_id", "text", &pgtype.Text{}},
		compositeField{"username", "text", &pgtype.Text{}},
		compositeField{"created_at", "timestamptz", &pgtype.Timestamptz{}},
		compositeField{"updated_at", "timestamptz", &pgtype.Timestamptz{}},
		compositeField{"site_admin", "bool", &pgtype.Bool{}},
	)
}

// newVariables creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'variables'.
func (tr *typeResolver) newVariables() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"variables",
		compositeField{"variable_id", "text", &pgtype.Text{}},
		compositeField{"key", "text", &pgtype.Text{}},
		compositeField{"value", "text", &pgtype.Text{}},
		compositeField{"description", "text", &pgtype.Text{}},
		compositeField{"category", "text", &pgtype.Text{}},
		compositeField{"sensitive", "bool", &pgtype.Bool{}},
		compositeField{"hcl", "bool", &pgtype.Bool{}},
		compositeField{"version_id", "text", &pgtype.Text{}},
	)
}

// newConfigurationVersionStatusTimestampsArray creates a new pgtype.ValueTranscoder for the Postgres
// '_configuration_version_status_timestamps' array type.
func (tr *typeResolver) newConfigurationVersionStatusTimestampsArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_configuration_version_status_timestamps", "configuration_version_status_timestamps", tr.newConfigurationVersionStatusTimestamps)
}

// newModuleVersionsArray creates a new pgtype.ValueTranscoder for the Postgres
// '_module_versions' array type.
func (tr *typeResolver) newModuleVersionsArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_module_versions", "module_versions", tr.newModuleVersions)
}

// newPhaseStatusTimestampsArray creates a new pgtype.ValueTranscoder for the Postgres
// '_phase_status_timestamps' array type.
func (tr *typeResolver) newPhaseStatusTimestampsArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_phase_status_timestamps", "phase_status_timestamps", tr.newPhaseStatusTimestamps)
}

// newRunStatusTimestampsArray creates a new pgtype.ValueTranscoder for the Postgres
// '_run_status_timestamps' array type.
func (tr *typeResolver) newRunStatusTimestampsArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_run_status_timestamps", "run_status_timestamps", tr.newRunStatusTimestamps)
}

// newRunVariablesArray creates a new pgtype.ValueTranscoder for the Postgres
// '_run_variables' array type.
func (tr *typeResolver) newRunVariablesArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_run_variables", "run_variables", tr.newRunVariables)
}

// newStateVersionOutputsArray creates a new pgtype.ValueTranscoder for the Postgres
// '_state_version_outputs' array type.
func (tr *typeResolver) newStateVersionOutputsArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_state_version_outputs", "state_version_outputs", tr.newStateVersionOutputs)
}

// newTeamsArray creates a new pgtype.ValueTranscoder for the Postgres
// '_teams' array type.
func (tr *typeResolver) newTeamsArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_teams", "teams", tr.newTeams)
}

// newVariablesArray creates a new pgtype.ValueTranscoder for the Postgres
// '_variables' array type.
func (tr *typeResolver) newVariablesArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_variables", "variables", tr.newVariables)
}

const insertAgentSQL = `INSERT INTO agents (
    agent_id,
    name,
    version,
    max_jobs,
    ip_address,
    last_ping_at,
    last_status_at,
    status,
    agent_pool_id
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9
);`

type InsertAgentParams struct {
	AgentID      pgtype.Text
	Name         pgtype.Text
	Version      pgtype.Text
	MaxJobs      pgtype.Int4
	IPAddress    pgtype.Inet
	LastPingAt   pgtype.Timestamptz
	LastStatusAt pgtype.Timestamptz
	Status       pgtype.Text
	AgentPoolID  pgtype.Text
}

// InsertAgent implements Querier.InsertAgent.
func (q *DBQuerier) InsertAgent(ctx context.Context, params InsertAgentParams) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertAgent")
	cmdTag, err := q.conn.Exec(ctx, insertAgentSQL, params.AgentID, params.Name, params.Version, params.MaxJobs, params.IPAddress, params.LastPingAt, params.LastStatusAt, params.Status, params.AgentPoolID)
	if err != nil {
		return cmdTag, fmt.Errorf("exec query InsertAgent: %w", err)
	}
	return cmdTag, err
}

// InsertAgentBatch implements Querier.InsertAgentBatch.
func (q *DBQuerier) InsertAgentBatch(batch genericBatch, params InsertAgentParams) {
	batch.Queue(insertAgentSQL, params.AgentID, params.Name, params.Version, params.MaxJobs, params.IPAddress, params.LastPingAt, params.LastStatusAt, params.Status, params.AgentPoolID)
}

// InsertAgentScan implements Querier.InsertAgentScan.
func (q *DBQuerier) InsertAgentScan(results pgx.BatchResults) (pgconn.CommandTag, error) {
	cmdTag, err := results.Exec()
	if err != nil {
		return cmdTag, fmt.Errorf("exec InsertAgentBatch: %w", err)
	}
	return cmdTag, err
}

const updateAgentSQL = `UPDATE agents
SET status = $1,
    last_ping_at = $2,
    last_status_at = $3
WHERE agent_id = $4
RETURNING *;`

type UpdateAgentParams struct {
	Status       pgtype.Text
	LastPingAt   pgtype.Timestamptz
	LastStatusAt pgtype.Timestamptz
	AgentID      pgtype.Text
}

type UpdateAgentRow struct {
	AgentID      pgtype.Text        `json:"agent_id"`
	Name         pgtype.Text        `json:"name"`
	Version      pgtype.Text        `json:"version"`
	MaxJobs      pgtype.Int4        `json:"max_jobs"`
	IPAddress    pgtype.Inet        `json:"ip_address"`
	LastPingAt   pgtype.Timestamptz `json:"last_ping_at"`
	LastStatusAt pgtype.Timestamptz `json:"last_status_at"`
	Status       pgtype.Text        `json:"status"`
	AgentPoolID  pgtype.Text        `json:"agent_pool_id"`
}

// UpdateAgent implements Querier.UpdateAgent.
func (q *DBQuerier) UpdateAgent(ctx context.Context, params UpdateAgentParams) (UpdateAgentRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpdateAgent")
	row := q.conn.QueryRow(ctx, updateAgentSQL, params.Status, params.LastPingAt, params.LastStatusAt, params.AgentID)
	var item UpdateAgentRow
	if err := row.Scan(&item.AgentID, &item.Name, &item.Version, &item.MaxJobs, &item.IPAddress, &item.LastPingAt, &item.LastStatusAt, &item.Status, &item.AgentPoolID); err != nil {
		return item, fmt.Errorf("query UpdateAgent: %w", err)
	}
	return item, nil
}

// UpdateAgentBatch implements Querier.UpdateAgentBatch.
func (q *DBQuerier) UpdateAgentBatch(batch genericBatch, params UpdateAgentParams) {
	batch.Queue(updateAgentSQL, params.Status, params.LastPingAt, params.LastStatusAt, params.AgentID)
}

// UpdateAgentScan implements Querier.UpdateAgentScan.
func (q *DBQuerier) UpdateAgentScan(results pgx.BatchResults) (UpdateAgentRow, error) {
	row := results.QueryRow()
	var item UpdateAgentRow
	if err := row.Scan(&item.AgentID, &item.Name, &item.Version, &item.MaxJobs, &item.IPAddress, &item.LastPingAt, &item.LastStatusAt, &item.Status, &item.AgentPoolID); err != nil {
		return item, fmt.Errorf("scan UpdateAgentBatch row: %w", err)
	}
	return item, nil
}

const findAgentsSQL = `SELECT
    a.*,
    ( SELECT count(*)
      FROM jobs j
      WHERE a.agent_id = j.agent_id
      AND j.status IN ('allocated', 'running')
    ) AS current_jobs
FROM agents a
GROUP BY a.agent_id
ORDER BY a.last_ping_at DESC;`

type FindAgentsRow struct {
	AgentID      pgtype.Text        `json:"agent_id"`
	Name         pgtype.Text        `json:"name"`
	Version      pgtype.Text        `json:"version"`
	MaxJobs      pgtype.Int4        `json:"max_jobs"`
	IPAddress    pgtype.Inet        `json:"ip_address"`
	LastPingAt   pgtype.Timestamptz `json:"last_ping_at"`
	LastStatusAt pgtype.Timestamptz `json:"last_status_at"`
	Status       pgtype.Text        `json:"status"`
	AgentPoolID  pgtype.Text        `json:"agent_pool_id"`
	CurrentJobs  pgtype.Int8        `json:"current_jobs"`
}

// FindAgents implements Querier.FindAgents.
func (q *DBQuerier) FindAgents(ctx context.Context) ([]FindAgentsRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindAgents")
	rows, err := q.conn.Query(ctx, findAgentsSQL)
	if err != nil {
		return nil, fmt.Errorf("query FindAgents: %w", err)
	}
	defer rows.Close()
	items := []FindAgentsRow{}
	for rows.Next() {
		var item FindAgentsRow
		if err := rows.Scan(&item.AgentID, &item.Name, &item.Version, &item.MaxJobs, &item.IPAddress, &item.LastPingAt, &item.LastStatusAt, &item.Status, &item.AgentPoolID, &item.CurrentJobs); err != nil {
			return nil, fmt.Errorf("scan FindAgents row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindAgents rows: %w", err)
	}
	return items, err
}

// FindAgentsBatch implements Querier.FindAgentsBatch.
func (q *DBQuerier) FindAgentsBatch(batch genericBatch) {
	batch.Queue(findAgentsSQL)
}

// FindAgentsScan implements Querier.FindAgentsScan.
func (q *DBQuerier) FindAgentsScan(results pgx.BatchResults) ([]FindAgentsRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query FindAgentsBatch: %w", err)
	}
	defer rows.Close()
	items := []FindAgentsRow{}
	for rows.Next() {
		var item FindAgentsRow
		if err := rows.Scan(&item.AgentID, &item.Name, &item.Version, &item.MaxJobs, &item.IPAddress, &item.LastPingAt, &item.LastStatusAt, &item.Status, &item.AgentPoolID, &item.CurrentJobs); err != nil {
			return nil, fmt.Errorf("scan FindAgentsBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindAgentsBatch rows: %w", err)
	}
	return items, err
}

const findAgentsByOrganizationSQL = `SELECT
    a.*,
    ( SELECT count(*)
      FROM jobs j
      WHERE a.agent_id = j.agent_id
      AND j.status IN ('allocated', 'running')
    ) AS current_jobs
FROM agents a
JOIN agent_pools ap USING (agent_pool_id)
WHERE ap.organization_name = $1
GROUP BY a.agent_id
ORDER BY last_ping_at DESC;`

type FindAgentsByOrganizationRow struct {
	AgentID      pgtype.Text        `json:"agent_id"`
	Name         pgtype.Text        `json:"name"`
	Version      pgtype.Text        `json:"version"`
	MaxJobs      pgtype.Int4        `json:"max_jobs"`
	IPAddress    pgtype.Inet        `json:"ip_address"`
	LastPingAt   pgtype.Timestamptz `json:"last_ping_at"`
	LastStatusAt pgtype.Timestamptz `json:"last_status_at"`
	Status       pgtype.Text        `json:"status"`
	AgentPoolID  pgtype.Text        `json:"agent_pool_id"`
	CurrentJobs  pgtype.Int8        `json:"current_jobs"`
}

// FindAgentsByOrganization implements Querier.FindAgentsByOrganization.
func (q *DBQuerier) FindAgentsByOrganization(ctx context.Context, organizationName pgtype.Text) ([]FindAgentsByOrganizationRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindAgentsByOrganization")
	rows, err := q.conn.Query(ctx, findAgentsByOrganizationSQL, organizationName)
	if err != nil {
		return nil, fmt.Errorf("query FindAgentsByOrganization: %w", err)
	}
	defer rows.Close()
	items := []FindAgentsByOrganizationRow{}
	for rows.Next() {
		var item FindAgentsByOrganizationRow
		if err := rows.Scan(&item.AgentID, &item.Name, &item.Version, &item.MaxJobs, &item.IPAddress, &item.LastPingAt, &item.LastStatusAt, &item.Status, &item.AgentPoolID, &item.CurrentJobs); err != nil {
			return nil, fmt.Errorf("scan FindAgentsByOrganization row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindAgentsByOrganization rows: %w", err)
	}
	return items, err
}

// FindAgentsByOrganizationBatch implements Querier.FindAgentsByOrganizationBatch.
func (q *DBQuerier) FindAgentsByOrganizationBatch(batch genericBatch, organizationName pgtype.Text) {
	batch.Queue(findAgentsByOrganizationSQL, organizationName)
}

// FindAgentsByOrganizationScan implements Querier.FindAgentsByOrganizationScan.
func (q *DBQuerier) FindAgentsByOrganizationScan(results pgx.BatchResults) ([]FindAgentsByOrganizationRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query FindAgentsByOrganizationBatch: %w", err)
	}
	defer rows.Close()
	items := []FindAgentsByOrganizationRow{}
	for rows.Next() {
		var item FindAgentsByOrganizationRow
		if err := rows.Scan(&item.AgentID, &item.Name, &item.Version, &item.MaxJobs, &item.IPAddress, &item.LastPingAt, &item.LastStatusAt, &item.Status, &item.AgentPoolID, &item.CurrentJobs); err != nil {
			return nil, fmt.Errorf("scan FindAgentsByOrganizationBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindAgentsByOrganizationBatch rows: %w", err)
	}
	return items, err
}

const findAgentsByPoolIDSQL = `SELECT
    a.*,
    ( SELECT count(*)
      FROM jobs j
      WHERE a.agent_id = j.agent_id
      AND j.status IN ('allocated', 'running')
    ) AS current_jobs
FROM agents a
JOIN agent_pools ap USING (agent_pool_id)
WHERE ap.agent_pool_id = $1
GROUP BY a.agent_id
ORDER BY last_ping_at DESC;`

type FindAgentsByPoolIDRow struct {
	AgentID      pgtype.Text        `json:"agent_id"`
	Name         pgtype.Text        `json:"name"`
	Version      pgtype.Text        `json:"version"`
	MaxJobs      pgtype.Int4        `json:"max_jobs"`
	IPAddress    pgtype.Inet        `json:"ip_address"`
	LastPingAt   pgtype.Timestamptz `json:"last_ping_at"`
	LastStatusAt pgtype.Timestamptz `json:"last_status_at"`
	Status       pgtype.Text        `json:"status"`
	AgentPoolID  pgtype.Text        `json:"agent_pool_id"`
	CurrentJobs  pgtype.Int8        `json:"current_jobs"`
}

// FindAgentsByPoolID implements Querier.FindAgentsByPoolID.
func (q *DBQuerier) FindAgentsByPoolID(ctx context.Context, agentPoolID pgtype.Text) ([]FindAgentsByPoolIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindAgentsByPoolID")
	rows, err := q.conn.Query(ctx, findAgentsByPoolIDSQL, agentPoolID)
	if err != nil {
		return nil, fmt.Errorf("query FindAgentsByPoolID: %w", err)
	}
	defer rows.Close()
	items := []FindAgentsByPoolIDRow{}
	for rows.Next() {
		var item FindAgentsByPoolIDRow
		if err := rows.Scan(&item.AgentID, &item.Name, &item.Version, &item.MaxJobs, &item.IPAddress, &item.LastPingAt, &item.LastStatusAt, &item.Status, &item.AgentPoolID, &item.CurrentJobs); err != nil {
			return nil, fmt.Errorf("scan FindAgentsByPoolID row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindAgentsByPoolID rows: %w", err)
	}
	return items, err
}

// FindAgentsByPoolIDBatch implements Querier.FindAgentsByPoolIDBatch.
func (q *DBQuerier) FindAgentsByPoolIDBatch(batch genericBatch, agentPoolID pgtype.Text) {
	batch.Queue(findAgentsByPoolIDSQL, agentPoolID)
}

// FindAgentsByPoolIDScan implements Querier.FindAgentsByPoolIDScan.
func (q *DBQuerier) FindAgentsByPoolIDScan(results pgx.BatchResults) ([]FindAgentsByPoolIDRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query FindAgentsByPoolIDBatch: %w", err)
	}
	defer rows.Close()
	items := []FindAgentsByPoolIDRow{}
	for rows.Next() {
		var item FindAgentsByPoolIDRow
		if err := rows.Scan(&item.AgentID, &item.Name, &item.Version, &item.MaxJobs, &item.IPAddress, &item.LastPingAt, &item.LastStatusAt, &item.Status, &item.AgentPoolID, &item.CurrentJobs); err != nil {
			return nil, fmt.Errorf("scan FindAgentsByPoolIDBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindAgentsByPoolIDBatch rows: %w", err)
	}
	return items, err
}

const findServerAgentsSQL = `SELECT
    a.*,
    ( SELECT count(*)
      FROM jobs j
      WHERE a.agent_id = j.agent_id
      AND j.status IN ('allocated', 'running')
    ) AS current_jobs
FROM agents a
WHERE agent_pool_id IS NULL
GROUP BY a.agent_id
ORDER BY last_ping_at DESC;`

type FindServerAgentsRow struct {
	AgentID      pgtype.Text        `json:"agent_id"`
	Name         pgtype.Text        `json:"name"`
	Version      pgtype.Text        `json:"version"`
	MaxJobs      pgtype.Int4        `json:"max_jobs"`
	IPAddress    pgtype.Inet        `json:"ip_address"`
	LastPingAt   pgtype.Timestamptz `json:"last_ping_at"`
	LastStatusAt pgtype.Timestamptz `json:"last_status_at"`
	Status       pgtype.Text        `json:"status"`
	AgentPoolID  pgtype.Text        `json:"agent_pool_id"`
	CurrentJobs  pgtype.Int8        `json:"current_jobs"`
}

// FindServerAgents implements Querier.FindServerAgents.
func (q *DBQuerier) FindServerAgents(ctx context.Context) ([]FindServerAgentsRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindServerAgents")
	rows, err := q.conn.Query(ctx, findServerAgentsSQL)
	if err != nil {
		return nil, fmt.Errorf("query FindServerAgents: %w", err)
	}
	defer rows.Close()
	items := []FindServerAgentsRow{}
	for rows.Next() {
		var item FindServerAgentsRow
		if err := rows.Scan(&item.AgentID, &item.Name, &item.Version, &item.MaxJobs, &item.IPAddress, &item.LastPingAt, &item.LastStatusAt, &item.Status, &item.AgentPoolID, &item.CurrentJobs); err != nil {
			return nil, fmt.Errorf("scan FindServerAgents row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindServerAgents rows: %w", err)
	}
	return items, err
}

// FindServerAgentsBatch implements Querier.FindServerAgentsBatch.
func (q *DBQuerier) FindServerAgentsBatch(batch genericBatch) {
	batch.Queue(findServerAgentsSQL)
}

// FindServerAgentsScan implements Querier.FindServerAgentsScan.
func (q *DBQuerier) FindServerAgentsScan(results pgx.BatchResults) ([]FindServerAgentsRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query FindServerAgentsBatch: %w", err)
	}
	defer rows.Close()
	items := []FindServerAgentsRow{}
	for rows.Next() {
		var item FindServerAgentsRow
		if err := rows.Scan(&item.AgentID, &item.Name, &item.Version, &item.MaxJobs, &item.IPAddress, &item.LastPingAt, &item.LastStatusAt, &item.Status, &item.AgentPoolID, &item.CurrentJobs); err != nil {
			return nil, fmt.Errorf("scan FindServerAgentsBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close FindServerAgentsBatch rows: %w", err)
	}
	return items, err
}

const findAgentByIDSQL = `SELECT
    a.*,
    ( SELECT count(*)
      FROM jobs j
      WHERE a.agent_id = j.agent_id
      AND j.status IN ('allocated', 'running')
    ) AS current_jobs
FROM agents a
LEFT JOIN jobs j USING (agent_id)
WHERE a.agent_id = $1
GROUP BY a.agent_id;`

type FindAgentByIDRow struct {
	AgentID      pgtype.Text        `json:"agent_id"`
	Name         pgtype.Text        `json:"name"`
	Version      pgtype.Text        `json:"version"`
	MaxJobs      pgtype.Int4        `json:"max_jobs"`
	IPAddress    pgtype.Inet        `json:"ip_address"`
	LastPingAt   pgtype.Timestamptz `json:"last_ping_at"`
	LastStatusAt pgtype.Timestamptz `json:"last_status_at"`
	Status       pgtype.Text        `json:"status"`
	AgentPoolID  pgtype.Text        `json:"agent_pool_id"`
	CurrentJobs  pgtype.Int8        `json:"current_jobs"`
}

// FindAgentByID implements Querier.FindAgentByID.
func (q *DBQuerier) FindAgentByID(ctx context.Context, agentID pgtype.Text) (FindAgentByIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindAgentByID")
	row := q.conn.QueryRow(ctx, findAgentByIDSQL, agentID)
	var item FindAgentByIDRow
	if err := row.Scan(&item.AgentID, &item.Name, &item.Version, &item.MaxJobs, &item.IPAddress, &item.LastPingAt, &item.LastStatusAt, &item.Status, &item.AgentPoolID, &item.CurrentJobs); err != nil {
		return item, fmt.Errorf("query FindAgentByID: %w", err)
	}
	return item, nil
}

// FindAgentByIDBatch implements Querier.FindAgentByIDBatch.
func (q *DBQuerier) FindAgentByIDBatch(batch genericBatch, agentID pgtype.Text) {
	batch.Queue(findAgentByIDSQL, agentID)
}

// FindAgentByIDScan implements Querier.FindAgentByIDScan.
func (q *DBQuerier) FindAgentByIDScan(results pgx.BatchResults) (FindAgentByIDRow, error) {
	row := results.QueryRow()
	var item FindAgentByIDRow
	if err := row.Scan(&item.AgentID, &item.Name, &item.Version, &item.MaxJobs, &item.IPAddress, &item.LastPingAt, &item.LastStatusAt, &item.Status, &item.AgentPoolID, &item.CurrentJobs); err != nil {
		return item, fmt.Errorf("scan FindAgentByIDBatch row: %w", err)
	}
	return item, nil
}

const findAgentByIDForUpdateSQL = `SELECT
    a.*,
    ( SELECT count(*)
      FROM jobs j
      WHERE a.agent_id = j.agent_id
      AND j.status IN ('allocated', 'running')
    ) AS current_jobs
FROM agents a
WHERE agent_id = $1
FOR UPDATE OF a;`

type FindAgentByIDForUpdateRow struct {
	AgentID      pgtype.Text        `json:"agent_id"`
	Name         pgtype.Text        `json:"name"`
	Version      pgtype.Text        `json:"version"`
	MaxJobs      pgtype.Int4        `json:"max_jobs"`
	IPAddress    pgtype.Inet        `json:"ip_address"`
	LastPingAt   pgtype.Timestamptz `json:"last_ping_at"`
	LastStatusAt pgtype.Timestamptz `json:"last_status_at"`
	Status       pgtype.Text        `json:"status"`
	AgentPoolID  pgtype.Text        `json:"agent_pool_id"`
	CurrentJobs  pgtype.Int8        `json:"current_jobs"`
}

// FindAgentByIDForUpdate implements Querier.FindAgentByIDForUpdate.
func (q *DBQuerier) FindAgentByIDForUpdate(ctx context.Context, agentID pgtype.Text) (FindAgentByIDForUpdateRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindAgentByIDForUpdate")
	row := q.conn.QueryRow(ctx, findAgentByIDForUpdateSQL, agentID)
	var item FindAgentByIDForUpdateRow
	if err := row.Scan(&item.AgentID, &item.Name, &item.Version, &item.MaxJobs, &item.IPAddress, &item.LastPingAt, &item.LastStatusAt, &item.Status, &item.AgentPoolID, &item.CurrentJobs); err != nil {
		return item, fmt.Errorf("query FindAgentByIDForUpdate: %w", err)
	}
	return item, nil
}

// FindAgentByIDForUpdateBatch implements Querier.FindAgentByIDForUpdateBatch.
func (q *DBQuerier) FindAgentByIDForUpdateBatch(batch genericBatch, agentID pgtype.Text) {
	batch.Queue(findAgentByIDForUpdateSQL, agentID)
}

// FindAgentByIDForUpdateScan implements Querier.FindAgentByIDForUpdateScan.
func (q *DBQuerier) FindAgentByIDForUpdateScan(results pgx.BatchResults) (FindAgentByIDForUpdateRow, error) {
	row := results.QueryRow()
	var item FindAgentByIDForUpdateRow
	if err := row.Scan(&item.AgentID, &item.Name, &item.Version, &item.MaxJobs, &item.IPAddress, &item.LastPingAt, &item.LastStatusAt, &item.Status, &item.AgentPoolID, &item.CurrentJobs); err != nil {
		return item, fmt.Errorf("scan FindAgentByIDForUpdateBatch row: %w", err)
	}
	return item, nil
}

const deleteAgentSQL = `DELETE
FROM agents
WHERE agent_id = $1
RETURNING *;`

type DeleteAgentRow struct {
	AgentID      pgtype.Text        `json:"agent_id"`
	Name         pgtype.Text        `json:"name"`
	Version      pgtype.Text        `json:"version"`
	MaxJobs      pgtype.Int4        `json:"max_jobs"`
	IPAddress    pgtype.Inet        `json:"ip_address"`
	LastPingAt   pgtype.Timestamptz `json:"last_ping_at"`
	LastStatusAt pgtype.Timestamptz `json:"last_status_at"`
	Status       pgtype.Text        `json:"status"`
	AgentPoolID  pgtype.Text        `json:"agent_pool_id"`
}

// DeleteAgent implements Querier.DeleteAgent.
func (q *DBQuerier) DeleteAgent(ctx context.Context, agentID pgtype.Text) (DeleteAgentRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "DeleteAgent")
	row := q.conn.QueryRow(ctx, deleteAgentSQL, agentID)
	var item DeleteAgentRow
	if err := row.Scan(&item.AgentID, &item.Name, &item.Version, &item.MaxJobs, &item.IPAddress, &item.LastPingAt, &item.LastStatusAt, &item.Status, &item.AgentPoolID); err != nil {
		return item, fmt.Errorf("query DeleteAgent: %w", err)
	}
	return item, nil
}

// DeleteAgentBatch implements Querier.DeleteAgentBatch.
func (q *DBQuerier) DeleteAgentBatch(batch genericBatch, agentID pgtype.Text) {
	batch.Queue(deleteAgentSQL, agentID)
}

// DeleteAgentScan implements Querier.DeleteAgentScan.
func (q *DBQuerier) DeleteAgentScan(results pgx.BatchResults) (DeleteAgentRow, error) {
	row := results.QueryRow()
	var item DeleteAgentRow
	if err := row.Scan(&item.AgentID, &item.Name, &item.Version, &item.MaxJobs, &item.IPAddress, &item.LastPingAt, &item.LastStatusAt, &item.Status, &item.AgentPoolID); err != nil {
		return item, fmt.Errorf("scan DeleteAgentBatch row: %w", err)
	}
	return item, nil
}

// textPreferrer wraps a pgtype.ValueTranscoder and sets the preferred encoding
// format to text instead binary (the default). pggen uses the text format
// when the OID is unknownOID because the binary format requires the OID.
// Typically occurs if the results from QueryAllDataTypes aren't passed to
// NewQuerierConfig.
type textPreferrer struct {
	pgtype.ValueTranscoder
	typeName string
}

// PreferredParamFormat implements pgtype.ParamFormatPreferrer.
func (t textPreferrer) PreferredParamFormat() int16 { return pgtype.TextFormatCode }

func (t textPreferrer) NewTypeValue() pgtype.Value {
	return textPreferrer{pgtype.NewValue(t.ValueTranscoder).(pgtype.ValueTranscoder), t.typeName}
}

func (t textPreferrer) TypeName() string {
	return t.typeName
}

// unknownOID means we don't know the OID for a type. This is okay for decoding
// because pgx call DecodeText or DecodeBinary without requiring the OID. For
// encoding parameters, pggen uses textPreferrer if the OID is unknown.
const unknownOID = 0
