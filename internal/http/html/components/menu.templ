package components

import (
	"context"
	"github.com/leg100/otf/internal/http/html/components/paths"
	"github.com/leg100/otf/internal/resource"
	"strings"
)

type Menu string

templ menu(organization resource.ID) {
	<ul class="menu w-full">
		<li class="menu-title">
			<div class="flex gap-2 items-center">
				<svg width="16" height="16" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill-rule="evenodd" clip-rule="evenodd">
					<path d="M16 7h8v17h-24v-24h16v7zm-9 12h-2v4h2v-4zm4 0h-2v4h2v-4zm7 0h-2v4h2v-4zm4-10h-6v8h4v5h2v-13zm-8-7h-12v20h1v-5h10v5h1v-20zm-8 13h-2v-2h2v2zm3 0h-2v-2h2v2zm3 0h-2v-2h2v2zm8-2v2h-2v-2h2zm-14-1h-2v-2h2v2zm3 0h-2v-2h2v2zm3 0h-2v-2h2v2zm6-2h2v2h-2v-2zm-12-1h-2v-2h2v2zm3 0h-2v-2h2v2zm3 0h-2v-2h2v2zm-6-3h-2v-2h2v2zm3 0h-2v-2h2v2zm3 0h-2v-2h2v2z"></path>
				</svg>
				<a href={ paths.Organization(organization) }>{ organization.String() }</a>
			</div>
		</li>
		@MenuItem("Workspaces", paths.Workspaces(organization), "/app/workspaces")
		if IsOwner(ctx, organization) || IsSiteAdmin(ctx) {
			@MenuItem("Runs", paths.OrganizationRuns(organization), "/app/runs")
		}
		@MenuItem("Modules", paths.Modules(organization), "/app/modules")
		@MenuItem("Teams", paths.Teams(organization), "/app/teams")
		if IsOwner(ctx, organization) || IsSiteAdmin(ctx) {
			@MenuItem("Users", paths.Users(organization), "/app/users")
			@MenuItem("Runners", paths.Runners(organization), "/app/runners")
			@MenuItem("Agent Pools", paths.AgentPools(organization), "/app/agent-pools")
			@MenuItem("Variable Sets", paths.VariableSets(organization), "/app/variable-sets")
			@MenuItem("VCS Providers", paths.VCSProviders(organization), "/app/vcs-providers")
			@MenuItem("Organization Token", paths.OrganizationToken(organization))
			@MenuItem("Settings", paths.EditOrganization(organization))
		}
	</ul>
}

templ MenuItem(title Menu, path templ.SafeURL, matchPrefixes ...string) {
	<li id={ "menu-item-" + strings.ReplaceAll(strings.ToLower(string(title)), " ", "-") }>
		<a
			href={ path }
			class={ templ.KV("menu-active", menuIsActive(ctx, append(matchPrefixes, string(path))...)) }
		>
			{ string(title) }
		</a>
	</li>
}

func menuIsActive(ctx context.Context, pathPrefixes ...string) bool {
	for _, p := range pathPrefixes {
		if strings.HasPrefix(CurrentPath(ctx), p) {
			return true
		}
	}
	return false
}
