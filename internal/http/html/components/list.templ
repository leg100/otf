package components

import (
	"context"
	"errors"
	"fmt"
	"github.com/leg100/otf/internal/http/decode"
	"github.com/leg100/otf/internal/http/html"
	"github.com/leg100/otf/internal/resource"
)

templ ContentList[T any](items []T, comp func(T) templ.Component) {
	<div id="content-list" class="flex flex-col">
		for _, item := range items {
			@comp(item)
		}
		if len(items) == 0 {
			No items currently exist.
		}
	</div>
}

templ PaginatedContentList[T any](page *resource.Page[T], comp func(T) templ.Component) {
	{{
		info, err := newPageInfo(ctx, page)
		if err != nil {
			return err
		}
	}}
	@ContentList(page.Items, comp)
	<div class="flex p-4 gap-2 justify-end items-center">
		@pageSizeSelector()
		<div class="badge badge-outline badge-neutral" id="page-info">
			{ fmt.Sprintf("%d-%d of %d", info.firstItemNumber, info.lastItemNumber, page.TotalCount) }
		</div>
		<div class="join">
			if info.previousPageURL != nil {
				<button class="join-item btn btn-sm">
					<a id="prev-page-link" href={ *info.previousPageURL }>Previous Page</a>
				</button>
			}
			if info.nextPageURL != nil {
				<button class="join-item btn btn-sm">
					<a id="next-page-link" href={ *info.nextPageURL }>Next Page</a>
				</button>
			}
		</div>
	</div>
}

type pageInfo struct {
	pagination      resource.Pagination
	opts            resource.PageOptions
	firstItemNumber int
	lastItemNumber  int
	previousPageURL *templ.SafeURL
	nextPageURL     *templ.SafeURL
}

func newPageInfo[T any](ctx context.Context, page *resource.Page[T]) (*pageInfo, error) {
	request := html.RequestFromContext(ctx)
	if request == nil {
		return nil, errors.New("no request found in context")
	}
	var opts resource.PageOptions
	if err := decode.All(&opts, request); err != nil {
		return nil, err
	}
	opts = opts.Normalize()

	firstItemNumber := ((opts.PageNumber - 1) * opts.PageSize) + 1
	lastItemNumber := max(0, firstItemNumber+len(page.Items)-1)

	info := &pageInfo{
		pagination:      *page.Pagination,
		opts:            opts,
		firstItemNumber: firstItemNumber,
		lastItemNumber:  lastItemNumber,
	}

	if page.PreviousPage != nil {
		previousPageURL, err := html.MergeQuery(CurrentURL(ctx), pageQuery(*page.PreviousPage))
		if err != nil {
			return nil, err
		}
		info.previousPageURL = &previousPageURL
	}
	if page.NextPage != nil {
		nextPageURL, err := html.MergeQuery(CurrentURL(ctx), pageQuery(*page.NextPage))
		if err != nil {
			return nil, err
		}
		info.nextPageURL = &nextPageURL
	}

	return info, nil
}

func pageQuery(page int) string {
	return fmt.Sprintf("page=%d", page)
}

templ pageSizeSelector() {
	<label class="select w-40">
		<span class="label">Page size</span>
		<select class="select" onchange="savePageSize(this)" id="page-size-selector">
			{{
					// If user has previously chosen a preferred page size then
					// it'll be persisted to a cookie
					currentPageSize := Cookie(ctx, "page_size")
					if currentPageSize == "" {
						currentPageSize = "20"
					}
			}}
			for _, size := range []string{"20","40","60","80","100"} {
				<option selected?={ currentPageSize == size }>{ size }</option>
			}
		</select>
		<script>
			function savePageSize(event) {
				document.cookie = "page_size=" + event.value;
				location.reload();
			}
		</script>
	</label>
}
