package run

import (
	"context"
	"fmt"
	"github.com/leg100/otf/internal/http/html/components"
	"github.com/leg100/otf/internal/http/html/components/paths"
	"github.com/leg100/otf/internal/logs"
	"github.com/leg100/otf/internal/organization"
	"github.com/leg100/otf/internal/resource"
	"github.com/leg100/otf/internal/runstatus"
	"github.com/leg100/otf/internal/workspace"
	"strconv"
	"strings"
	"time"
)

type listProps struct {
	organization        organization.Name
	ws                  *workspace.Workspace
	status              []runstatus.Status
	statusFilterVisible bool
	canUpdateWorkspace  bool
	pageOptions         resource.PageOptions
}

templ list(props listProps) {
	{{
	layoutProps := components.LayoutProps{
		Title:        "runs",
		Organization: props.organization,
	}
	if props.ws != nil {
		layoutProps.Breadcrumbs = []components.Breadcrumb{
			{Name: "Workspaces", Link: paths.Workspaces(props.organization)},
			{Name: props.ws.Name, Link: paths.Workspace(props.ws.ID)},
		}
		layoutProps.ContentLinks = workspace.WorkspaceHeaderLinks(props.ws.ID, props.canUpdateWorkspace)
	}
	layoutProps.Breadcrumbs = append(layoutProps.Breadcrumbs, components.Breadcrumb{Name: "Runs"})
	}}
	@components.Layout(layoutProps) {
		<div class="flex flex-col gap-2">
			<form
				hx-ext="ws"
				ws-connect={ components.CurrentURL(ctx) }
				action={ templ.SafeURL(components.CurrentURL(ctx)) }
			>
				@runstatus.Filter(props.status, props.statusFilterVisible)
			</form>
			<div id="page-results"></div>
		</div>
	}
}

type table struct {
	workspaceClient webWorkspaceClient
}

templ (t table) Header() {
	<!-- add workspace column if not filtered by workspace ID -->
	if t.workspaceClient != nil {
		<th>Workspace</th>
	}
	<th class="hidden xl:block">ID</th>
	<th>Source</th>
	<th>Status</th>
	<th>Created</th>
	<th>Actions</th>
}

templ (t table) Row(run *Run) {
	<tr id={ "run-item-" + run.ID.String() } x-data={ components.BlockLink(paths.Run(run.ID)) }>
		<!-- provide workspace name if not filtered by workspace ID -->
		if t.workspaceClient != nil {
			<td>
				<a class="link" href={ paths.Workspace(run.WorkspaceID) }>
					{ t.getWorkspaceName(ctx, run) }
				</a>
			</td>
		}
		<td class="hidden xl:block">
			@components.Identifier(run.ID)
		</td>
		<td>
			<div class="flex flex-col gap-2">
				if run.IngressAttributes != nil {
					<span class="inline-block max-w-[16rem] truncate">
						<a id="vcs-username" href={ templ.SafeURL(run.IngressAttributes.SenderHTMLURL) }>&commat;{ run.IngressAttributes.SenderUsername }</a>
					</span>
				} else if run.CreatedBy != nil {
					<span class="inline-block max-w-[16rem] truncate" id="run-created-by">
						&commat;{ run.CreatedBy.String() }
					</span>
				}
				<div class="flex gap-2 items-center">
					@source(run)
					if run.IngressAttributes != nil {
						<div class="badge badge-secondary badge-soft badge-sm font-mono">
							<svg
								xmlns="http://www.w3.org/2000/svg"
								xml:space="preserve"
								viewBox="0 0 97 97"
								class="size-4"
							>
								<path fill="#F05133" d="M92.71 44.408 52.591 4.291c-2.31-2.311-6.057-2.311-8.369 0l-8.33 8.332L46.459 23.19c2.456-.83 5.272-.273 7.229 1.685 1.969 1.97 2.521 4.81 1.67 7.275l10.186 10.185c2.465-.85 5.307-.3 7.275 1.671 2.75 2.75 2.75 7.206 0 9.958-2.752 2.751-7.208 2.751-9.961 0-2.068-2.07-2.58-5.11-1.531-7.658l-9.5-9.499v24.997c.67.332 1.303.774 1.861 1.332 2.75 2.75 2.75 7.206 0 9.959-2.75 2.749-7.209 2.749-9.957 0-2.75-2.754-2.75-7.21 0-9.959.68-.679 1.467-1.193 2.307-1.537v-25.23c-.84-.344-1.625-.853-2.307-1.537-2.083-2.082-2.584-5.14-1.516-7.698L31.798 16.715 4.288 44.222c-2.311 2.313-2.311 6.06 0 8.371l40.121 40.118c2.31 2.311 6.056 2.311 8.369 0L92.71 52.779c2.311-2.311 2.311-6.06 0-8.371z"></path>
							</svg>
							if run.IngressAttributes.IsPullRequest {
								<a id="pull-request-link" href={ templ.SafeURL(run.IngressAttributes.PullRequestURL) } title={ run.IngressAttributes.PullRequestTitle }>#{ strconv.Itoa(run.IngressAttributes.PullRequestNumber) }</a>
							} else if run.IngressAttributes.Branch != "" {
								<a href={ templ.SafeURL(run.IngressAttributes.CommitURL) }>
									<span class="max-w-[12rem] truncate" id="vcs-branch">{ run.IngressAttributes.Branch }</span>
								</a>
							} else if run.IngressAttributes.Tag != "" {
								<a href={ templ.SafeURL(run.IngressAttributes.CommitURL) }>
									<span class="max-w-[12rem] truncate" id="vcs-tag">{ run.IngressAttributes.Tag }</span>
								</a>
							}
							<a id="commit-sha-abbrev" href={ templ.SafeURL(run.IngressAttributes.CommitURL) }>({ run.IngressAttributes.CommitSHA[:7] })</a>
						</div>
					}
				</div>
			</div>
		</td>
		<td>
			<div class="flex flex-col gap-2">
				<div>
					@runstatus.Badge(run.ID, run.Status)
				</div>
				<div class="flex gap-2 items-center">
					if run.Apply.ResourceReport != nil {
						<span>
							@resourceReport(run.Apply.ResourceReport)
						</span>
					} else if run.Plan.ResourceReport != nil {
						<span>
							@resourceReport(run.Plan.ResourceReport)
						</span>
					}
					if run.PlanOnly {
						<span class="badge badge-soft badge-accent badge-sm">plan only</span>
					}
				</div>
			</div>
		</td>
		<td class="align-top">
			@components.Ago(run.CreatedAt)
		</td>
		<td class="align-top">
			<div class="flex gap-2">
				if run.Status == runstatus.Planned {
					<form action={ paths.ApplyRun(run.ID) } method="POST">
						<button id="apply-button" class="btn btn-sm">Apply</button>
					</form>
				}
				if run.Cancelable() {
					<form action={ paths.CancelRun(run.ID) } method="POST">
						<button class="btn btn-sm btn-error btn-outline" onclick="return confirm('Are you sure you want to cancel?')">Cancel</button>
					</form>
				} else if run.ForceCancelable() {
					<form action={ paths.ForceCancelRun(run.ID) } method="POST">
						<button class="btn btn-sm btn-error btn-outline" onclick="return confirm('Are you sure you want to force cancel?')">Force cancel</button>
					</form>
				} else if run.Discardable() {
					<form action={ paths.DiscardRun(run.ID) } method="POST">
						<button id="run-discard-button" class="btn btn-sm btn-error btn-outline" onclick="return confirm('Are you sure you want to discard?')">Discard</button>
					</form>
				} else if run.Done() {
					<form action={ paths.RetryRun(run.ID) } method="POST">
						<button id="retry-button" class="btn btn-sm btn-soft btn-info">Retry</button>
					</form>
				} else if run.CancelSignaledAt != nil {
					cancelling...
				}
			</div>
		</td>
	</tr>
}

func (t table) getWorkspaceName(ctx context.Context, run *Run) (string, error) {
	ws, err := t.workspaceClient.Get(ctx, run.WorkspaceID)
	if err != nil {
		return "", err
	}
	return ws.Name, nil
}

type getProps struct {
	run       *Run
	ws        *workspace.Workspace
	planLogs  logs.Chunk
	applyLogs logs.Chunk
}

templ get(props getProps) {
	{{
	layoutProps := components.LayoutProps{
		Title:        props.run.ID.String(),
		Organization: props.ws.Organization,
		PreContent:   getPreContent(),
		PostContent:  getPostContent(props),
		Breadcrumbs: []components.Breadcrumb{
			{Name: "Workspaces", Link: paths.Workspaces(props.ws.Organization)},
			{Name: props.ws.Name, Link: paths.Workspace(props.ws.ID)},
			{Name: "Runs", Link: paths.Runs(props.ws.ID)},
			{Name: props.run.ID.String()},
		},
	}
	}}
	@components.Layout(layoutProps) {
		<div hx-ext="ws" ws-connect={ string(paths.WatchRun(props.run.ID)) }></div>
		<div class="flex gap-4 text-sm">
			<div class="flex gap-1 items-center">
				<span>Engine</span>
				<span class="badge badge-soft">
					{ props.run.Engine.String() }
				</span>
			</div>
			<div class="flex gap-1 items-center">
				<span>Engine version</span>
				<span class="badge badge-soft">
					{ props.run.EngineVersion }
				</span>
			</div>
			<div class="flex gap-1 items-center" id="elapsed-time">
				Elapsed time
				<span class="badge badge-soft" id={ "running-time-" + props.run.ID.String() }></span>
			</div>
		</div>
		<div id="period-report"></div>
		<div class="flex flex-col gap-4">
			<div id={ "run-item-" + props.run.ID.String() }></div>
			<details class="collapse collapse-arrow border-base-content/20 border" id="plan" open>
				<summary class="collapse-title">
					<div class="flex gap-2 items-center">
						<span class="font-semibold">Plan</span>
						@phaseStatus(props.run.Plan)
						@runningTime(&props.run.Plan)
					</div>
				</summary>
				<div class="collapse-content bg-black text-white whitespace-pre-wrap break-words p-4 text-sm leading-snug font-mono">
					@templ.Raw(strings.TrimSpace(props.planLogs.ToHTML()))
					<div id="tailed-plan-logs"></div>
				</div>
			</details>
			<details class="collapse collapse-arrow border-base-content/20 border" id="apply" open>
				<summary class="collapse-title">
					<div class="flex gap-2 items-center">
						<span class="font-semibold">Apply</span>
						@phaseStatus(props.run.Apply)
						<span>
							@runningTime(&props.run.Apply)
						</span>
					</div>
				</summary>
				<div class="collapse-content collapse-arrow bg-black text-white whitespace-pre-wrap break-words p-4 text-sm leading-snug font-mono">
					@templ.Raw(strings.TrimSpace(props.applyLogs.ToHTML()))
					<div id="tailed-apply-logs"></div>
				</div>
			</details>
		</div>
	}
}

templ getPreContent() {
	<link rel="stylesheet" href={ components.AssetPath(ctx, "/static/css/terminal.css") }/>
	<script src={ components.AssetPath(ctx, "/static/js/tail.js") }></script>
	<script src={ components.AssetPath(ctx, "/static/js/running_time.js") }></script>
}

templ getPostContent(props getProps) {
	if !props.planLogs.IsEnd() {
		@templ.JSFuncCall("setupTail", paths.TailRun(props.run.ID), "plan", props.planLogs.NextOffset())
		;
	}
	if !props.applyLogs.IsEnd() {
		@templ.JSFuncCall("setupTail", paths.TailRun(props.run.ID), "apply", props.applyLogs.NextOffset())
		;
	}
}

templ eventView(run *Run) {
	@widget(run)
	@phaseStatus(run.Plan)
	@phaseStatus(run.Apply)
	@periodReport(run)
	@runningTime(run)
	@runningTime(&run.Plan)
	@runningTime(&run.Apply)
}

templ widget(run *Run) {
	@components.UnpaginatedTable(&table{}, []*Run{run}, "run-item-"+run.ID.String())
}

templ latestRunSingleTable(run *Run) {
	@components.UnpaginatedTable(&table{}, []*Run{run}, "latest-run")
}

type task interface {
	ElapsedTime(time.Time) time.Duration
	HasStarted() bool
	StartedAt() time.Time
	Done() bool
	String() string
}

templ runningTime(tsk task) {
	if tsk.HasStarted() {
		{{ elapsed := tsk.ElapsedTime(time.Now()) }}
		<span
			id={ "running-time-" + tsk.String() }
			class="badge badge-soft"
			x-data={ fmt.Sprintf("running_time(Date.parse('%s'), %d, %s)", tsk.StartedAt(), elapsed.Milliseconds(), boolString(tsk.Done())) }
			x-text="formatDuration(elapsed)"
		>
			{ int(elapsed) }
		</span>
	} else {
		<span id={ "running-time-" + tsk.String() }></span>
	}
}

templ periodReport(run *Run) {
	{{ report := run.PeriodReport(time.Now()) }}
	<div id="period-report" class="relative h-3 w-full group">
		for i, period := range report.Periods {
			<div
				style={ fmt.Sprintf("width: %f%%", report.Percentage(i)) }
				class={ "inline-block", "h-full",  "bg-" + period.Status.String() }
			></div>
		}
		<div class="absolute bg-base-300 ml-2 mt-1 p-1 border border-black max-w-[66%] group-hover:block hidden z-10">
			<ul class="flex gap-4 flex-wrap text-sm">
				for _, period := range report.Periods {
					<li class="flex gap-1 items-center">
						<div class={ "h-3", "w-3", "inline-block", "border", "border-black", "align-middle", "bg-" + period.Status.String() }></div>
						<span>{ period.Status.String() }</span>
						<span>({ period.Period.String() })</span>
					</li>
				}
			</ul>
		</div>
	</div>
}

templ resourceReport(report *Report) {
	<div class="font-mono text-md" id="resource-summary">
		<span class="text-green-700">+{ report.Additions }</span><span class="text-blue-700">~{ report.Changes }</span><span class="text-red-700">-{ report.Destructions }</span>
	</div>
}

templ source(run *Run) {
	switch run.Source {
		case SourceAPI:
			<div title="run triggered via the API">
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
					<path stroke-linecap="round" stroke-linejoin="round" d="M8.25 3v1.5M4.5 8.25H3m18 0h-1.5M4.5 12H3m18 0h-1.5m-15 3.75H3m18 0h-1.5M8.25 19.5V21M12 3v1.5m0 15V21m3.75-18v1.5m0 15V21m-9-1.5h10.5a2.25 2.25 0 0 0 2.25-2.25V6.75a2.25 2.25 0 0 0-2.25-2.25H6.75A2.25 2.25 0 0 0 4.5 6.75v10.5a2.25 2.25 0 0 0 2.25 2.25Zm.75-12h9v9h-9v-9Z"></path>
				</svg>
			</div>
		case SourceTerraform:
			<div title="run triggered via the CLI">
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
					<path stroke-linecap="round" stroke-linejoin="round" d="m6.75 7.5 3 2.25-3 2.25m4.5 0h3m-9 8.25h13.5A2.25 2.25 0 0 0 21 18V6a2.25 2.25 0 0 0-2.25-2.25H5.25A2.25 2.25 0 0 0 3 6v12a2.25 2.25 0 0 0 2.25 2.25Z"></path>
				</svg>
			</div>
		case SourceGithub:
			<img class="h-5" id="run-trigger-github" title="run triggered via github" src={ components.AssetPath(ctx, "/static/images/github_icon.svg") }/>
		case SourceGitlab:
			<img class="h-5" id="run-trigger-gitlab" title="run triggered via gitlab" src={ components.AssetPath(ctx, "/static/images/gitlab_icon.svg") }/>
		case SourceUI:
			<div title="run triggered via the UI" id="run-trigger-ui">
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
					<path stroke-linecap="round" stroke-linejoin="round" d="M6 20.25h12m-7.5-3v3m3-3v3m-10.125-3h17.25c.621 0 1.125-.504 1.125-1.125V4.875c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v11.25c0 .621.504 1.125 1.125 1.125Z"></path>
				</svg>
			</div>
	}
}

var phaseBadges = map[PhaseStatus]string{
	PhasePending:     "badge-primary",
	PhaseQueued:      "badge-secondary",
	PhaseRunning:     "badge-primary",
	PhaseFinished:    "badge-success",
	PhaseCanceled:    "badge-warning",
	PhaseErrored:     "badge-error",
	PhaseUnreachable: "badge-neutral",
}

templ phaseStatus(phase Phase) {
	<span id={ string(phase.PhaseType) + "-status" } class={ "badge", phaseBadges[phase.Status] }>
		{ phase.Status.String() }
	</span>
}

func boolString(b bool) string {
	if b {
		return "true"
	}
	return "false"
}
