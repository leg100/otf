package variable

import (
	"encoding/json"
	"github.com/leg100/otf/internal/http/html/components"
	"github.com/leg100/otf/internal/http/html/components/paths"
	"github.com/leg100/otf/internal/resource"
)

type newVariableSetProps struct {
	organization        string
	availableWorkspaces []workspaceInfo
}

templ newVariableSet(props newVariableSetProps) {
	@components.Layout(components.LayoutProps{
		Title: "new variable set",
		Breadcrumbs: []components.Breadcrumb{
			{Name: "variable sets", Link: paths.VariableSets(props.organization)},
			{Name: "new"},
		},
	}) {
		<span class="text-xl">Add a new variable set</span>
		@variableSetForm(variableSetFormProps{
			set:                 &VariableSet{Global: true}, // set global as default
			action:              paths.CreateVariableSet(props.organization),
			availableWorkspaces: props.availableWorkspaces,
			existingWorkspaces:  []workspaceInfo{},
		})
	}
}

type editVariableSetProps struct {
	set                 *VariableSet
	availableWorkspaces []workspaceInfo
	existingWorkspaces  []workspaceInfo
	variableTable       setTableProps
}

templ editVariableSet(props editVariableSetProps) {
	@components.Layout(components.LayoutProps{
		Title:        "edit variable set",
		Organization: props.set.Organization,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "variable sets", Link: paths.VariableSets(props.set.Organization)},
			{Name: props.set.Name},
			{Name: "edit"},
		},
	}) {
		<span class="text-xl">Edit variable set</span>
		@variableSetForm(variableSetFormProps{
			set:                 props.set,
			edit:                true,
			action:              paths.EditVariableSet(props.set.ID.String()),
			availableWorkspaces: props.availableWorkspaces,
			existingWorkspaces:  props.existingWorkspaces,
		})
		<hr class="my-4"/>
		<h3 class="text-xl">Variables</h3>
		@table(props.variableTable)
		<form class="mt-2" action={ paths.NewVariableSetVariable(props.set.ID.String()) } method="GET">
			<button class="btn" id="add-variable-button">Add variable</button>
		</form>
	}
}

type variableSetFormProps struct {
	set                 *VariableSet
	edit                bool
	action              templ.SafeURL
	availableWorkspaces []workspaceInfo
	existingWorkspaces  []workspaceInfo
}

templ variableSetForm(props variableSetFormProps) {
	<form class="flex flex-col gap-5" action={ props.action } method="POST">
		if props.set != nil {
			<div class="field">
				<label class="font-semibold" for="name">Name</label>
				<input class="text-input" type="text" name="name" id="name" value={ props.set.Name } required placeholder="name"/>
			</div>
			<div class="field">
				<label class="font-semibold" for="description">Description</label>
				<textarea class="text-input" type="text" name="description" id="description">{ props.set.Description }</textarea>
			</div>
			<fieldset class="border border-slate-900 px-3 py-3 flex flex-col gap-2">
				<legend>Scope</legend>
				<div class="form-checkbox">
					<input type="radio" name="global" id="global" value="true" checked?={ props.set.Global } required/>
					<label for="global">Global</label>
					<span class="description">All current and future workspaces in this organization will access this variable set.</span>
				</div>
				<div class="form-checkbox">
					<input class="peer" type="radio" name="global" value="false" id="workspace-scoped" checked?={ !props.set.Global } required/>
					<label for="workspace-scoped">Apply to specific workspaces</label>
					<span class="col-start-2 description">Only the selected workspaces will access this variable set.</span>
					<script src={ components.AssetPath(ctx, "/static/js/dropdown.js") }></script>
					<div
						class="hidden relative col-start-2 mt-2 w-full peer-checked:block"
						x-data={ "dropdown(" + toJSON(props.existingWorkspaces) + ", " + toJSON(props.availableWorkspaces) + ")" }
						x-ref="workspace_select"
						@keydown.escape.prevent.stop="close($refs.workspace_input)"
						@focusin.window="! $refs.workspace_select.contains($event.target) && close()"
					>
						<div
							@click.outside="close()"
						>
							<input type="hidden" id="workspaces" name="workspaces" :value="JSON.stringify(existing)"/>
							<input
								class="text-input grow w-80"
								type="text"
								id="workspace-input"
								x-ref="workspace_input"
								x-model="search"
								placeholder="Select workspace"
								@focusin="open = true"
								@click="open = true"
							/>
							<div
								x-ref="panel"
								x-show="showPanel"
								x-cloak
								class="absolute flex flex-col w-80 mt-1 bg-white overflow-x-auto border border-black"
							>
								<template x-for="item in filterAvailable" :key="item.id">
									<button @click="addItem(item)" class="text-left focus:bg-gray-200 hover:bg-gray-200 py-1 px-2" x-text="item.name"></button>
								</template>
							</div>
						</div>
						<div class="flex flex-row gap-2 mt-2" id="existing-workspaces">
							<template x-for="item in existing">
								<div class="flex p-1 gap-1 bg-gray-200 group">
									<span class="" x-text="item.name"></span>
									<button @click="deleteItem(item)" type="button" class="group-hover:bg-gray-400" id="button-remove-tag-{ . }" class="delete cross">x</button>
								</div>
							</template>
						</div>
					</div>
				</div>
			</fieldset>
			<div>
				<button class="btn" id="save-variable-set-button">
					Save variable set
				</button>
			</div>
		}
	</form>
}

type setTableProps struct {
	set               *VariableSet
	merged            []*Variable
	canDeleteVariable bool
}

func (p setTableProps) Variables() []*Variable {
	return p.set.Variables
}

func (setTableProps) EditPath(variableID resource.ID) templ.SafeURL {
	return paths.EditVariableSetVariable(variableID.String())
}

func (setTableProps) DeletePath(variableID resource.ID) templ.SafeURL {
	return paths.DeleteVariableSetVariable(variableID.String())
}

func (w setTableProps) IsOverwritten(v *Variable) bool {
	if w.merged == nil {
		return false
	}
	return !v.Matches(w.merged)
}

func (w setTableProps) CanDeleteVariable() bool {
	return w.canDeleteVariable
}

func toJSON(v any) string {
	b, _ := json.Marshal(v)
	return string(b)
}
