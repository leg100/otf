package variable

import (
	"encoding/json"
	"github.com/leg100/otf/internal/http/html/components"
	"github.com/leg100/otf/internal/http/html/components/paths"
	"github.com/leg100/otf/internal/organization"
	"github.com/leg100/otf/internal/resource"
	"github.com/leg100/otf/internal/workspace"
	"strconv"
)

templ newWorkspaceVariable(ws *workspace.Workspace) {
	@components.Layout(components.LayoutProps{
		Title:        "new variable",
		Organization: ws.Organization,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "workspaces", Link: paths.Workspaces(ws.Organization)},
			{Name: ws.Name, Link: paths.Workspace(ws.ID)},
			{Name: "new"},
		},
	}) {
		<span class="text-xl">Add a new workspace variable</span>
		@form(formProps{
			variable: &Variable{},
			action:   paths.CreateVariable(ws.ID),
		})
	}
}

type newVariableSetProps struct {
	organization        organization.Name
	availableWorkspaces []workspaceInfo
}

templ newVariableSet(props newVariableSetProps) {
	@components.Layout(components.LayoutProps{
		Title:        "new variable set",
		Organization: props.organization,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "variable sets", Link: paths.VariableSets(props.organization)},
			{Name: "new"},
		},
	}) {
		<span class="text-xl">Add a new variable set</span>
		@variableSetForm(variableSetFormProps{
			set:                 &VariableSet{Global: true}, // set global as default
			action:              paths.CreateVariableSet(props.organization),
			availableWorkspaces: props.availableWorkspaces,
			existingWorkspaces:  []workspaceInfo{},
		})
	}
}

templ newVSV(vs *VariableSet) {
	@components.Layout(components.LayoutProps{
		Title:        "new variable | variable sets",
		Organization: vs.Organization,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "variable sets", Link: paths.VariableSets(vs.Organization)},
			{Name: vs.Name, Link: paths.VariableSet(vs.ID)},
			{Name: "new variable"},
		},
	}) {
		<span class="text-xl">Add new variable to variable set</span>
		@form(formProps{
			variable: &Variable{},
			action:   paths.CreateVariableSetVariable(vs.ID),
		})
	}
}

type listWorkspaceVariablesProps struct {
	ws                  *workspace.Workspace
	workspaceTableProps workspaceTableProps
	setTablesProps      []setTableProps
	canCreateVariable   bool
	canDeleteVariable   bool
	canUpdateWorkspace  bool
}

type workspaceTableProps struct {
	variables         []*Variable
	canDeleteVariable bool
}

func (p workspaceTableProps) Variables() []*Variable {
	return p.variables
}

func (workspaceTableProps) EditPath(variableID resource.TfeID) templ.SafeURL {
	return paths.EditVariable(variableID)
}

func (workspaceTableProps) DeletePath(variableID resource.TfeID) templ.SafeURL {
	return paths.DeleteVariable(variableID)
}

func (w workspaceTableProps) IsOverwritten(v *Variable) bool {
	// a workspace variable can never be overwritten
	return false
}

func (w workspaceTableProps) CanDeleteVariable() bool {
	return w.canDeleteVariable
}

templ listWorkspaceVariables(props listWorkspaceVariablesProps) {
	@components.Layout(components.LayoutProps{
		Title:        "variables",
		Organization: props.ws.Organization,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "workspaces", Link: paths.Workspaces(props.ws.Organization)},
			{Name: props.ws.Name, Link: paths.Workspace(props.ws.ID)},
			{Name: "variables", Link: paths.Variables(props.ws.ID)},
		},
	}) {
		<span class="text-lg my-2">Workspace Variables ({ strconv.Itoa(len(props.workspaceTableProps.Variables())) })</span>
		@table(props.workspaceTableProps)
		if props.canCreateVariable {
			<form class="mt-2" action={ paths.NewVariable(props.ws.ID) } method="GET">
				<button class="btn">Add variable</button>
			</form>
		}
		<span class="text-lg mt-4">Variable Sets ({ strconv.Itoa(len(props.setTablesProps)) })</span>
		for _, tbl := range props.setTablesProps {
			<div class="flex flex-col gap-2" id={ "variable-set-" + tbl.set.Name }>
				@variableSetItem(tbl.set)
				@table(tbl)
			</div>
			<div class="my-2"></div>
		}
	}
}

type listVariableSetsProps struct {
	organization         organization.Name
	sets                 []*VariableSet
	canCreateVariableSet bool
}

templ listVariableSets(props listVariableSetsProps) {
	@components.Layout(components.LayoutProps{
		Title:          "variable sets",
		Organization:   &props.organization,
		ContentActions: listVariableSetsActions(props),
		Breadcrumbs: []components.Breadcrumb{
			{Name: "variable sets"},
		},
	}) {
		<div id="content-list">
			for _, vs := range props.sets {
				@variableSetItem(vs)
			}
			if len(props.sets) == 0 {
				No variable sets currently exist.
			}
		</div>
	}
}

templ listVariableSetsActions(props listVariableSetsProps) {
	if props.canCreateVariableSet {
		<form action={ paths.NewVariableSet(props.organization) } method="GET">
			<button class="btn" id="new-variable-set-button">
				New Variable Set
			</button>
		</form>
	}
}

templ variableSetItem(vs *VariableSet) {
	<div class="widget" id={ "item-variable-set-" + vs.Name } x-data={ components.BlockLink(paths.EditVariableSet(vs.ID)) }>
		<span id="name">{ vs.Name }</span>
		<div>
			@components.Identifier(vs.ID)
			<span>
				if vs.Global {
					global
				} else {
					{ strconv.Itoa(len(vs.Workspaces)) } workspaces
				}
			</span>
		</div>
	</div>
}

type editWorkspaceVariableProps struct {
	ws       *workspace.Workspace
	variable *Variable
}

templ editWorkspaceVariable(props editWorkspaceVariableProps) {
	@components.Layout(components.LayoutProps{
		Title:        "edit | " + props.variable.ID.String(),
		Organization: props.ws.Organization,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "workspaces", Link: paths.Workspaces(props.ws.Organization)},
			{Name: props.ws.Name, Link: paths.Workspace(props.ws.ID)},
			{Name: "variables", Link: paths.Variables(props.ws.ID)},
			{Name: "edit"},
		},
	}) {
		<span class="text-xl">Edit workspace variable</span>
		@form(formProps{
			variable: props.variable,
			edit:     true,
			action:   paths.UpdateVariable(props.variable.ID),
		})
	}
}

type editVariableSetProps struct {
	set                 *VariableSet
	availableWorkspaces []workspaceInfo
	existingWorkspaces  []workspaceInfo
	variableTable       setTableProps
}

templ editVariableSet(props editVariableSetProps) {
	@components.Layout(components.LayoutProps{
		Title:        "edit variable set",
		Organization: props.set.Organization,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "variable sets", Link: paths.VariableSets(props.set.Organization)},
			{Name: props.set.Name},
			{Name: "edit"},
		},
	}) {
		<span class="text-xl">Edit variable set</span>
		@variableSetForm(variableSetFormProps{
			set:                 props.set,
			edit:                true,
			action:              paths.EditVariableSet(props.set.ID),
			availableWorkspaces: props.availableWorkspaces,
			existingWorkspaces:  props.existingWorkspaces,
		})
		<hr class="my-4"/>
		<h3 class="text-xl">Variables</h3>
		@table(props.variableTable)
		<form class="mt-2" action={ paths.NewVariableSetVariable(props.set.ID) } method="GET">
			<button class="btn" id="add-variable-button">Add variable</button>
		</form>
	}
}

type editVSVProps struct {
	set      *VariableSet
	variable *Variable
}

templ editVSV(props editVSVProps) {
	@components.Layout(components.LayoutProps{
		Title:        "edit variable set variable",
		Organization: props.set.Organization,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "variable sets", Link: paths.VariableSets(props.set.Organization)},
			{Name: props.set.Name, Link: paths.EditVariableSet(props.set.ID)},
			{Name: "variables"},
			{Name: props.variable.ID.String()},
			{Name: "edit"},
		},
	}) {
		<span class="text-xl">Edit variable</span>
		@form(formProps{
			variable: props.variable,
			edit:     true,
			action:   paths.UpdateVariableSetVariable(props.variable.ID),
		})
	}
}

type formProps struct {
	variable *Variable
	edit     bool
	action   templ.SafeURL
}

// form for editing a variable.
templ form(props formProps) {
	<form class="flex flex-col gap-5" action={ props.action } method="POST">
		<div class="field">
			<label class="font-semibold" for="key">Key</label>
			<input class="input" type="text" name="key" id="key" value={ props.variable.Key } required placeholder="key" disabled?={ props.variable.Sensitive && props.edit }/>
		</div>
		<div class="field">
			<label class="font-semibold" for="value">Value</label>
			<textarea
				class="textarea"
				type="text"
				name="value"
				id="value"
				if props.variable.Sensitive {
					placeholder="hidden"
				}
			>
				if !props.variable.Sensitive {
					{ props.variable.Value }
				}
			</textarea>
		</div>
		<fieldset class="border border-slate-900 px-3 py-3 flex flex-col gap-2">
			<legend>Category</legend>
			<div class="form-checkbox">
				<input type="radio" name="category" id="terraform" value="terraform" checked?={ props.variable.Category == "terraform" } disabled?={ props.variable.Sensitive && props.edit } required/>
				<label for="terraform">Terraform</label>
				<span class="description">These variables should match the declarations in your configuration. Click the HCL box to use interpolation or set a non-string value.</span>
			</div>
			<div class="form-checkbox">
				<input type="radio" name="category" id="env" value="env" checked?={ props.variable.Category == "env" } disabled?={ props.variable.Sensitive && props.edit } required/>
				<label for="env">Environment variable</label>
				<span class="description">These variables are available in the Terraform runtime environment.</span>
			</div>
		</fieldset>
		<div class="form-checkbox">
			<input class="" type="checkbox" name="hcl" id="hcl" checked?={ props.variable.HCL } disabled?={ props.variable.Sensitive && props.edit }/>
			<label for="hcl">HCL</label>
			<span class="description">Parse this field as HashiCorp Configuration Language (HCL). This allows you to interpolate values at runtime.</span>
		</div>
		<div class="form-checkbox">
			<input type="checkbox" name="sensitive" id="sensitive" checked?={ props.variable.Sensitive } disabled?={ props.variable.Sensitive && props.edit }/>
			<label for="sensitive">Sensitive</label>
			<span class="description">Sensitive variables are never shown in the UI or API. They may appear in Terraform logs if your configuration is designed to output them.</span>
		</div>
		<div class="field">
			<label class="font-semibold" for="description">Description</label>
			<input class="input" type="text" class="freeform" name="description" id="description" value={ props.variable.Description } placeholder="description (optional)"/>
		</div>
		<div>
			<button class="btn" id="save-variable-button">
				Save variable
			</button>
		</div>
	</form>
	<hr class="my-5"/>
	<div class="flex flex-col gap-2">
		<h4 class="font-semibold">Sensitive variables</h4>
		Sensitive variables are never shown in the UI or API. Other than changing its value, you cannot make changes to a sensitive variable; you'll need to delete and re-create the variable.
	</div>
}

type variableSetFormProps struct {
	set                 *VariableSet
	edit                bool
	action              templ.SafeURL
	availableWorkspaces []workspaceInfo
	existingWorkspaces  []workspaceInfo
}

templ variableSetForm(props variableSetFormProps) {
	<form class="flex flex-col gap-5" action={ props.action } method="POST">
		if props.set != nil {
			<div class="field">
				<label class="font-semibold" for="name">Name</label>
				<input class="input" type="text" name="name" id="name" value={ props.set.Name } required placeholder="name"/>
			</div>
			<div class="field">
				<label class="font-semibold" for="description">Description</label>
				<textarea class="textarea" type="text" name="description" id="description">{ props.set.Description }</textarea>
			</div>
			<fieldset class="border border-slate-900 px-3 py-3 flex flex-col gap-2">
				<legend>Scope</legend>
				<div class="form-checkbox">
					<input type="radio" name="global" id="global" value="true" checked?={ props.set.Global } required/>
					<label for="global">Global</label>
					<span class="description">All current and future workspaces in this organization will access this variable set.</span>
				</div>
				<div class="form-checkbox">
					<input class="peer" type="radio" name="global" value="false" id="workspace-scoped" checked?={ !props.set.Global } required/>
					<label for="workspace-scoped">Apply to specific workspaces</label>
					<span class="col-start-2 description">Only the selected workspaces will access this variable set.</span>
					<script src={ components.AssetPath(ctx, "/static/js/dropdown.js") }></script>
					<div
						class="hidden relative col-start-2 mt-2 w-full peer-checked:block"
						x-data={ "dropdown(" + toJSON(props.existingWorkspaces) + ", " + toJSON(props.availableWorkspaces) + ")" }
						x-ref="workspace_select"
						@keydown.escape.prevent.stop="close($refs.workspace_input)"
						@focusin.window="! $refs.workspace_select.contains($event.target) && close()"
					>
						<div
							@click.outside="close()"
						>
							<input type="hidden" id="workspaces" name="workspaces" :value="JSON.stringify(existing)"/>
							<input
								class="input grow w-80"
								type="text"
								id="workspace-input"
								x-ref="workspace_input"
								x-model="search"
								placeholder="Select workspace"
								@focusin="open = true"
								@click="open = true"
							/>
							<div
								x-ref="panel"
								x-show="showPanel"
								x-cloak
								class="absolute flex flex-col w-80 mt-1 bg-white overflow-x-auto border border-black"
							>
								<template x-for="item in filterAvailable" :key="item.id">
									<button @click="addItem(item)" class="text-left focus:bg-gray-200 hover:bg-gray-200 py-1 px-2" x-text="item.name"></button>
								</template>
							</div>
						</div>
						<div class="flex flex-row gap-2 mt-2" id="existing-workspaces">
							<template x-for="item in existing">
								<div class="flex p-1 gap-1 bg-gray-200 group">
									<span class="" x-text="item.name"></span>
									<button @click="deleteItem(item)" type="button" class="group-hover:bg-gray-400" id="button-remove-tag-{ . }" class="delete cross">x</button>
								</div>
							</template>
						</div>
					</div>
				</div>
			</fieldset>
			<div>
				<button class="btn" id="save-variable-set-button">
					Save variable set
				</button>
			</div>
		}
	</form>
}

type setTableProps struct {
	set               *VariableSet
	merged            []*Variable
	canDeleteVariable bool
}

func (p setTableProps) Variables() []*Variable {
	return p.set.Variables
}

func (setTableProps) EditPath(variableID resource.TfeID) templ.SafeURL {
	return paths.EditVariableSetVariable(variableID)
}

func (setTableProps) DeletePath(variableID resource.TfeID) templ.SafeURL {
	return paths.DeleteVariableSetVariable(variableID)
}

func (w setTableProps) IsOverwritten(v *Variable) bool {
	if w.merged == nil {
		return false
	}
	return !v.Matches(w.merged)
}

func (w setTableProps) CanDeleteVariable() bool {
	return w.canDeleteVariable
}

type tableProps interface {
	Variables() []*Variable
	EditPath(variableID resource.TfeID) templ.SafeURL
	DeletePath(variableID resource.TfeID) templ.SafeURL
	IsOverwritten(v *Variable) bool
	CanDeleteVariable() bool
}

// table of variables
templ table(props tableProps) {
	<table class="table break-words border-collapse" id="variables-table">
		<thead>
			<tr>
				<th class="w-[25%]">Key</th>
				<th class="w-[50%]">Value</th>
				<th class="w-[15%]">Category</th>
				<th class="w-[10%]"></th>
			</tr>
		</thead>
		<tbody>
			for _, v := range props.Variables() {
				<tr>
					<td class="flex flex-row gap-2">
						if props.IsOverwritten(v) {
							<span class="bg-orange-100 text-xs font-semibold p-1">OVERWRITTEN</span>
						}
						@components.Strikethrough(props.IsOverwritten(v)) {
							<a class="underline" href={ props.EditPath(v.ID) }>{ v.Key }</a>
						}
					</td>
					<td>
						if v.Sensitive {
							<span class="bg-gray-200">hidden</span>
						} else {
							{ v.Value }
						}
					</td>
					<td>{ string(v.Category) }</td>
					<td class="text-right">
						if props.CanDeleteVariable() {
							<form action={ props.DeletePath(v.ID) } method="POST">
								@components.DeleteButton()
							</form>
						}
					</td>
				</tr>
			}
			if len(props.Variables()) == 0 {
				<tr>
					<td>No variables currently exist.</td>
				</tr>
			}
		</tbody>
	</table>
}

func toJSON(v any) string {
	b, _ := json.Marshal(v)
	return string(b)
}
