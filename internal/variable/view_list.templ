package variable

import (
	"github.com/leg100/otf/internal/http/html/components"
	"github.com/leg100/otf/internal/http/html/components/paths"
	"github.com/leg100/otf/internal/resource"
	"github.com/leg100/otf/internal/workspace"
	"strconv"
)

type listWorkspaceVariablesProps struct {
	ws                  *workspace.Workspace
	workspaceTableProps workspaceTableProps
	setTablesProps      []setTableProps
	canCreateVariable   bool
	canDeleteVariable   bool
	canUpdateWorkspace  bool
}

type workspaceTableProps struct {
	variables         []*Variable
	canDeleteVariable bool
}

func (p workspaceTableProps) Variables() []*Variable {
	return p.variables
}

func (workspaceTableProps) EditPath(variableID resource.ID) templ.SafeURL {
	return paths.EditVariable(variableID.String())
}

func (workspaceTableProps) DeletePath(variableID resource.ID) templ.SafeURL {
	return paths.DeleteVariable(variableID.String())
}

func (w workspaceTableProps) IsOverwritten(v *Variable) bool {
	// a workspace variable can never be overwritten
	return false
}

func (w workspaceTableProps) CanDeleteVariable() bool {
	return w.canDeleteVariable
}

templ listWorkspaceVariables(props listWorkspaceVariablesProps) {
	@components.Layout(components.LayoutProps{
		Title:        "variables",
		Organization: props.ws.Organization,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "workspaces", Link: paths.Workspaces(props.ws.Organization)},
			{Name: props.ws.Name, Link: paths.Workspace(props.ws.ID.String())},
			{Name: "variables", Link: paths.Variables(props.ws.ID.String())},
		},
	}) {
		<span class="text-lg my-2">Workspace Variables ({ strconv.Itoa(len(props.workspaceTableProps.Variables())) })</span>
		@table(props.workspaceTableProps)
		if props.canCreateVariable {
			<form class="mt-2" action={ paths.NewVariable(props.ws.ID.String()) } method="GET">
				<button class="btn">Add variable</button>
			</form>
		}
		<span class="text-lg mt-4">Variable Sets ({ strconv.Itoa(len(props.setTablesProps)) })</span>
		for _, tbl := range props.setTablesProps {
			<div class="flex flex-col gap-2" id={ "variable-set-" + tbl.set.Name }>
				@variableSetItem(tbl.set)
				@table(tbl)
			</div>
			<div class="my-2"></div>
		}
	}
}

type listVariableSetsProps struct {
	organization         string
	sets                 []*VariableSet
	canCreateVariableSet bool
}

templ listVariableSets(props listVariableSetsProps) {
	@components.Layout(components.LayoutProps{
		Title:          "variable sets",
		Organization:   props.organization,
		ContentActions: listVariableSetsActions(props),
		Breadcrumbs: []components.Breadcrumb{
			{Name: "variable sets"},
		},
	}) {
		<div id="content-list">
			for _, vs := range props.sets {
				@variableSetItem(vs)
			}
			if len(props.sets) == 0 {
				No variable sets currently exist.
			}
		</div>
	}
}

templ listVariableSetsActions(props listVariableSetsProps) {
	if props.canCreateVariableSet {
		<form action={ paths.NewVariableSet(props.organization) } method="GET">
			<button class="btn" id="new-variable-set-button">
				New Variable Set
			</button>
		</form>
	}
}

templ variableSetItem(vs *VariableSet) {
	<div class="widget" id={ "item-variable-set-" + vs.Name } x-data={ components.BlockLink(paths.EditVariableSet(vs.ID.String())) }>
		<span id="name">{ vs.Name }</span>
		<div>
			@components.Identifier(vs.ID)
			<span>
				if vs.Global {
					global
				} else {
					{ strconv.Itoa(len(vs.Workspaces)) } workspaces
				}
			</span>
		</div>
	</div>
}
