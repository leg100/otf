package user

import (
	"github.com/leg100/otf/internal"
	"github.com/leg100/otf/internal/http/html/components"
	"github.com/leg100/otf/internal/http/html/components/paths"
	"github.com/leg100/otf/internal/resource"
	"github.com/leg100/otf/internal/team"
	"time"
)

templ adminLogin() {
	@components.BareLayout(components.BareLayoutProps{
		Title: "site admin login",
	}) {
		<div class="m-auto">
			<form class="flex flex-col gap-2" action="/admin/login" method="POST">
				<div class="field">
					<label for="token">Site Admin Token</label>
					<input class="input w-80" type="password" name="token" id="token" required/>
				</div>
				<div>
					<button class="btn">Login</button>
				</div>
			</form>
		</div>
	}
}

templ profile() {
	@components.Layout(components.LayoutProps{
		Title:        "profile",
		ContentLinks: profileLinks(),
	}) {
		<p>You are logged in as <span class="bg-gray-200">{ components.CurrentUsername(ctx) }</span></p>
		<br/>
		<form action={ paths.Logout() } method="POST">
			<button class="btn" id="logout">logout</button>
		</form>
	}
}

templ profileLinks() {
	<div id="user-tokens-link">
		<a href={ paths.Tokens() }>tokens</a>
	</div>
}

type userListProps struct {
	organization resource.OrganizationName
	users        []*User
}

templ userList(props userListProps) {
	@components.Layout(components.LayoutProps{
		Title:        "users",
		Organization: &props.organization,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "users"},
		},
	}) {
		@components.ContentList(props.users, userListItem)
	}
}

templ userListItem(user *User) {
	<div id={ "item-user-" + user.Username } class="widget">
		<span id="username">{ user.Username }</span>
		@components.Identifier(user.ID)
	</div>
}

type getTeamProps struct {
	team            *team.Team
	members         []*User
	canUpdateTeam   bool
	canDeleteTeam   bool
	canAddMember    bool
	canRemoveMember bool
	canDelete       bool
	isOwner         bool
	dropdown        components.SearchDropdownProps
}

templ getTeam(props getTeamProps) {
	@components.Layout(components.LayoutProps{
		Title:        props.team.ID.String(),
		Organization: &props.team.Organization,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "teams", Link: paths.Teams(props.team.Organization.String())},
			{Name: props.team.Name},
		},
	}) {
		if props.canUpdateTeam {
			<h3 class="font-semibold my-2 text-lg">Permissions</h3>
			<form class="flex flex-col gap-5" action={ paths.UpdateTeam(props.team.ID.String()) } method="POST">
				<div class="form-checkbox">
					<input
						type="checkbox"
						name="manage_workspaces"
						id="manage_workspaces"
						value="true"
						checked?={ props.team.OrganizationAccess().ManageWorkspaces || props.team.IsOwners() }
						if props.team.IsOwners() {
							title="cannot change permissions of owners team"
							disabled
						}
					/>
					<label for="manage_workspaces">Manage Workspaces</label>
					<span class="description">Allows members to create and administrate all workspaces within the organization.</span>
				</div>
				<div class="form-checkbox">
					<input
						type="checkbox"
						name="manage_vcs"
						id="manage_vcs"
						value="true"
						checked?={ props.team.OrganizationAccess().ManageVCS || props.team.IsOwners() }
						if props.team.IsOwners() {
							title="cannot change permissions of owners team"
							disabled
						}
					/>
					<label for="manage_vcs">Manage VCS Settings</label>
					<span class="description">Allows members to manage the set of VCS providers available within the organization.</span>
				</div>
				<div class="form-checkbox">
					<input
						type="checkbox"
						name="manage_modules"
						id="manage_modules"
						value="true"
						checked?={ props.team.OrganizationAccess().ManageModules || props.team.IsOwners() }
						if props.team.IsOwners() {
							title="cannot change permissions of owners team"
							disabled
						}
					/>
					<label for="manage_modules">Manage Modules</label>
					<span class="description" for="manage_modules">Allows members to publish and delete modules within the organization.</span>
				</div>
				if !props.team.IsOwners() {
					<div class="field">
						<button class="btn w-40">Save changes</button>
					</div>
				}
			</form>
			<hr class="my-4"/>
		}
		<h3 class="font-semibold my-2 text-lg">Members</h3>
		if props.canAddMember {
			@components.SearchDropdown(props.dropdown)
		}
		<div id="content-list">
			for _, member := range props.members {
				<div id={ "item-user-" + member.Username } class="widget">
					<div>
						<span id="username">{ member.Username }</span>
					</div>
					<div>
						@components.Identifier(member.ID)
						if props.canRemoveMember {
							<form action={ paths.RemoveMemberTeam(props.team.ID.String()) } method="POST">
								<input type="hidden" name="username" id="delete-username" value={ member.Username }/>
								<button id="remove-member-button" class="btn btn-error btn-outline">
									Remove member
								</button>
							</form>
						}
					</div>
				</div>
			}
			if len(props.members) == 0 {
				The team currently has no members.
			}
		</div>
		if !props.team.IsOwners() && props.canDeleteTeam {
			<hr class="my-4"/>
			<h3 class="font-semibold my-2 text-lg">Advanced</h3>
			<form action={ paths.DeleteTeam(props.team.ID.String()) } method="POST">
				<button class="btn btn-error btn-outline text-green-800" onclick="return confirm('Are you sure you want to delete?')">
					Delete team
				</button>
				<input type="hidden" name="id" value={ props.team.ID.String() }/>
			</form>
		}
	}
}

templ newToken() {
	@components.Layout(components.LayoutProps{
		Title: "new user token",
		Breadcrumbs: []components.Breadcrumb{
			{Name: "profile", Link: paths.Profile()},
			{Name: "tokens", Link: paths.Tokens()},
			{Name: "new"},
		},
	}) {
		<form class="flex flex-col gap-2" action={ paths.CreateToken() } method="POST">
			<div class="field">
				<label for="description">Description</label>
				<textarea class="textarea w-80" name="description" id="description" required></textarea>
			</div>
			<div>
				<button class="btn">Create token</button>
			</div>
		</form>
	}
}

templ tokenList(tokens []*UserToken) {
	@components.Layout(components.LayoutProps{
		Title: "user tokens",
		Breadcrumbs: []components.Breadcrumb{
			{Name: "profile", Link: paths.Profile()},
			{Name: "tokens"},
		},
		ContentLinks:   profileLinks(),
		ContentActions: tokenListActions(),
	}) {
		@components.ContentList(tokens, tokenListItem)
	}
}

templ tokenListItem(token *UserToken) {
	<div class="widget">
		<div>
			<span>{ token.Description }</span>
			<span>{ internal.Ago(time.Now(), token.CreatedAt) }</span>
		</div>
		<div>
			@components.Identifier(token.ID)
			<form id="delete-user-token" action={ paths.DeleteToken() } method="POST">
				@components.DeleteButton()
				<input type="hidden" name="id" value={ token.ID.String() }/>
			</form>
		</div>
	</div>
}

templ tokenListActions() {
	<form action={ paths.NewToken() } method="GET">
		<button class="btn" id="new-user-token-button">New Token</button>
	</form>
}

templ siteSettings() {
	@components.Layout(components.LayoutProps{
		Title: "site",
		Breadcrumbs: []components.Breadcrumb{
			{Name: "site settings"},
		},
	}) {
		<div class="flex flex-col gap-2 text-lg">
			<span>
				<a href={ paths.GithubApps() }>GitHub app</a>
			</span>
		</div>
	}
}
