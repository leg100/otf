package user

import (
	"github.com/leg100/otf/internal"
	"github.com/leg100/otf/internal/http/html/components"
	"github.com/leg100/otf/internal/http/html/components/paths"
	"github.com/leg100/otf/internal/organization"
	"github.com/leg100/otf/internal/resource"
	"github.com/leg100/otf/internal/team"
	"time"
)

templ adminLogin() {
	@components.BareLayout(components.BareLayoutProps{
		Title: "site admin login",
	}) {
		<div class="h-full flex items-center justify-center">
			<form id="login-form" action="/admin/login" method="POST">
				<fieldset class="fieldset bg-base-200 border border-base-300 p-4 rounded-box">
					<legend class="fieldset-legend">Site Admin Token</legend>
					<div class="join">
						<input type="password" name="token" id="token" required class="input w-80 join-item"/>
						<button class="btn join-item">Login</button>
					</div>
				</fieldset>
			</form>
		</div>
	}
}

templ profile() {
	@components.Layout(components.LayoutProps{
		Title: "profile",
		Breadcrumbs: []components.Breadcrumb{
			{Name: "Profile"},
		},
		ContentActions: profileActions(),
	}) {
		<div class="flex flex-col gap-4">
			<p id="logged-in-msg">You are logged in as <span class="badge badge-primary badge-soft">{ components.CurrentUsername(ctx) }</span></p>
		</div>
	}
}

templ profileActions() {
	<form action={ paths.Logout() } method="POST">
		<button class="btn" id="logout">logout</button>
	</form>
}

type userListProps struct {
	organization organization.Name
	users        *resource.Page[*User]
}

templ userList(props userListProps) {
	@components.Layout(components.LayoutProps{
		Title:        "users",
		Organization: props.organization,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "Users"},
		},
	}) {
		@components.Table(&table{}, props.users, "page-results")
	}
}

type table struct {
	canRemoveMember bool
	teamID          *resource.TfeID
}

templ (t table) Header() {
	<th>Name</th>
	<th>ID</th>
	<th>Site Admin</th>
	if t.teamID != nil {
		<th>Actions</th>
	}
}

templ (t table) Row(user *User) {
	<tr id={ "item-user-" + user.Username.String() }>
		<td id="username">
			{ user.Username.String() }
		</td>
		<td>
			@components.Identifier(user.ID)
		</td>
		<td>
			if user.IsSiteAdmin() {
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
					<path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75 11.25 15 15 9.75M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path>
				</svg>
			}
		</td>
		if t.teamID != nil {
			<td>
				if t.canRemoveMember {
					<form action={ paths.RemoveMemberTeam(t.teamID) } method="POST">
						<input type="hidden" name="username" id="delete-username" value={ user.Username.String() }/>
						<button id="remove-member-button" class="btn btn-error btn-outline">
							Remove member
						</button>
					</form>
				}
			</td>
		}
	</tr>
}

type getTeamProps struct {
	team            *team.Team
	members         []*User
	canUpdateTeam   bool
	canDeleteTeam   bool
	canAddMember    bool
	canRemoveMember bool
	dropdown        components.SearchDropdownProps
}

templ getTeam(props getTeamProps) {
	@components.Layout(components.LayoutProps{
		Title:        props.team.ID.String(),
		Organization: props.team.Organization,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "Teams", Link: paths.Teams(props.team.Organization)},
			{Name: props.team.Name},
		},
	}) {
		if props.canUpdateTeam {
			<h3 class="font-semibold my-2 text-lg">Permissions</h3>
			<form class="flex flex-col gap-5" action={ paths.UpdateTeam(props.team.ID) } method="POST">
				<div class="form-checkbox">
					<input
						type="checkbox"
						name="manage_workspaces"
						id="manage_workspaces"
						value="true"
						checked?={ props.team.ManageWorkspaces || props.team.IsOwners() }
						if props.team.IsOwners() {
							title="cannot change permissions of owners team"
							disabled
						}
					/>
					<label for="manage_workspaces">Manage Workspaces</label>
					<span class="description">Allows members to create and administrate all workspaces within the organization.</span>
				</div>
				<div class="form-checkbox">
					<input
						type="checkbox"
						name="manage_vcs"
						id="manage_vcs"
						value="true"
						checked?={ props.team.ManageVCS || props.team.IsOwners() }
						if props.team.IsOwners() {
							title="cannot change permissions of owners team"
							disabled
						}
					/>
					<label for="manage_vcs">Manage VCS Settings</label>
					<span class="description">Allows members to manage the set of VCS providers available within the organization.</span>
				</div>
				<div class="form-checkbox">
					<input
						type="checkbox"
						name="manage_modules"
						id="manage_modules"
						value="true"
						checked?={ props.team.ManageModules || props.team.IsOwners() }
						if props.team.IsOwners() {
							title="cannot change permissions of owners team"
							disabled
						}
					/>
					<label for="manage_modules">Manage Modules</label>
					<span class="description" for="manage_modules">Allows members to publish and delete modules within the organization.</span>
				</div>
				if !props.team.IsOwners() {
					<div class="field">
						<button class="btn w-40">Save changes</button>
					</div>
				}
			</form>
			<hr class="my-4"/>
		}
		<h3 class="font-semibold my-2 text-lg">Members</h3>
		<div id="content-list">
			@components.UnpaginatedTable(
				&table{teamID: &props.team.ID, canRemoveMember: props.canRemoveMember},
				props.members,
				"team-members",
			)
		</div>
		if props.canAddMember {
			<div>
				@components.SearchDropdown(props.dropdown)
			</div>
		}
		if !props.team.IsOwners() && props.canDeleteTeam {
			<hr class="my-4"/>
			<h3 class="font-semibold my-2 text-lg">Advanced</h3>
			<form action={ paths.DeleteTeam(props.team.ID) } method="POST">
				<button class="btn btn-error btn-outline" onclick="return confirm('Are you sure you want to delete?')">
					Delete team
				</button>
				<input type="hidden" name="id" value={ props.team.ID.String() }/>
			</form>
		}
	}
}

templ newToken() {
	@components.Layout(components.LayoutProps{
		Title: "new user token",
		Breadcrumbs: []components.Breadcrumb{
			{Name: "user tokens", Link: paths.Tokens()},
			{Name: "new"},
		},
	}) {
		<form class="flex flex-col gap-2" action={ paths.CreateToken() } method="POST">
			<div class="field">
				<label for="description">Description</label>
				<textarea class="textarea w-80" name="description" id="description" required></textarea>
			</div>
			<div>
				<button class="btn">Create token</button>
			</div>
		</form>
	}
}

templ tokenList(tokens []*UserToken) {
	@components.Layout(components.LayoutProps{
		Title: "user tokens",
		Breadcrumbs: []components.Breadcrumb{
			{Name: "user tokens"},
		},
		ContentActions: tokenListActions(),
	}) {
		@components.UnpaginatedTable(
			&tokensTable{},
			tokens,
			"tokens-table",
		)
	}
}

templ tokenListActions() {
	<form action={ paths.NewToken() } method="GET">
		<button class="btn" id="new-user-token-button">New Token</button>
	</form>
}

type tokensTable struct{}

templ (t tokensTable) Header() {
	<th>Description</th>
	<th>ID</th>
	<th>Created</th>
	<th>Actions</th>
}

templ (t tokensTable) Row(token *UserToken) {
	<tr>
		<td>
			<span>{ token.Description }</span>
		</td>
		<td>
			@components.Identifier(token.ID)
		</td>
		<td>
			<span>{ internal.Ago(time.Now(), token.CreatedAt) }</span>
		</td>
		<td>
			<form id="delete-user-token" action={ paths.DeleteToken() } method="POST">
				@components.DeleteButton()
				<input type="hidden" name="id" value={ token.ID.String() }/>
			</form>
		</td>
	</tr>
}
