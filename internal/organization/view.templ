package organization

import (
	"github.com/leg100/otf/internal"
	"github.com/leg100/otf/internal/http/html/components"
	"github.com/leg100/otf/internal/http/html/components/paths"
	"github.com/leg100/otf/internal/resource"
	"time"
)

templ new() {
	@components.Layout(components.LayoutProps{
		Title: "new organization",
		Breadcrumbs: []components.Breadcrumb{
			{Name: "organizations", Link: paths.Organizations()},
			{Name: "new"},
		},
	}) {
		<form class="flex flex-col gap-2" action={ paths.CreateOrganization() } method="POST">
			<div class="field">
				<label for="name">Name</label>
				<input class="input w-80" type="text" name="name" id="name" required/>
			</div>
			<div>
				<button class="btn" id="create-organization-button">Create organization</button>
			</div>
		</form>
	}
}

type listProps struct {
	*resource.Page[*Organization]
	CanCreate bool
}

templ list(props listProps) {
	{{
	layoutProps := components.LayoutProps{
		Title: "organizations",
		Breadcrumbs: []components.Breadcrumb{
			{Name: "organizations"},
		},
		ContentActions: listActions(props.CanCreate),
	}
	}}
	@components.Layout(layoutProps) {
		@components.Table(&table{}, props.Page, "page-results")
	}
}

type table struct{}

templ (t table) Header() {
	<th>Name</th>
	<th>ID</th>
}

templ (t table) Row(org *Organization) {
	<tr id={ "org-item-" + org.Name.String() } class="widget" x-data={ components.BlockLink(paths.Organization(org.Name)) }>
		<td>
			<a class="link" href={ paths.Organization(org.Name) }>
				{ org.Name.String() }
			</a>
		</td>
		<td>
			@components.Identifier(org.ID)
		</td>
	</tr>
}

templ listActions(canCreate bool) {
	<form action={ paths.NewOrganization() } method="GET">
		<button
			class="btn"
			id="new-organization-button"
			disabled?={ !canCreate }
			if canCreate {
				title="create a new organization"
			} else {
				title="organization creation has been restricted to site admins"
			}
		>
			New Organization
		</button>
	</form>
}

templ get(organization *Organization) {
	{{
	layoutProps := components.LayoutProps{
		Title:        organization.Name.String(),
		Organization: organization.Name,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "main menu"},
		},
	}
	}}
	@components.Layout(layoutProps) {
		@components.Identifier(organization.ID)
		<div class="flex flex-col gap-2 text-lg">
			<span id="menu-item-workspaces">
				<a href={ paths.Workspaces(organization.Name) }>workspaces</a>
			</span>
			if components.IsOwner(ctx, organization.Name) || components.IsSiteAdmin(ctx) {
				<span id="menu-item-runs">
					<a href={ paths.OrganizationRuns(organization.Name) }>runs</a>
				</span>
			}
			<span id="modules">
				<a href={ paths.Modules(organization.Name) }>modules</a>
			</span>
			<span id="teams">
				<a href={ paths.Teams(organization.Name) }>teams</a>
			</span>
			if components.IsOwner(ctx, organization.Name) || components.IsSiteAdmin(ctx) {
				<span id="users">
					<a href={ paths.Users(organization.Name) }>users</a>
				</span>
				<span id="runners">
					<a href={ paths.Runners(organization.Name) }>runners</a>
				</span>
				<span id="agent_pools">
					<a href={ paths.AgentPools(organization.Name) }>agent pools</a>
				</span>
				<span id="variable_sets">
					<a href={ paths.VariableSets(organization.Name) }>variable sets</a>
				</span>
				<span id="vcs_providers">
					<a href={ paths.VCSProviders(organization.Name) }>VCS providers</a>
				</span>
				<span id="organization_tokens">
					<a href={ paths.OrganizationToken(organization.Name) }>organization token</a>
				</span>
				<span id="settings">
					<a href={ paths.EditOrganization(organization.Name) }>settings</a>
				</span>
			}
		</div>
	}
}

templ edit(organization *Organization) {
	@components.Layout(components.LayoutProps{
		Title:        organization.Name.String(),
		Organization: organization.Name,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "settings"},
		},
	}) {
		<form class="flex flex-col gap-5" action={ paths.UpdateOrganization(organization.Name) } method="POST">
			<div class="field">
				<label for="name">Name</label>
				<input class="input w-80" type="text" name="new_name" id="name" value={ organization.Name.String() } required/>
			</div>
			<div class="field">
				<button class="btn w-72">Update organization name</button>
			</div>
		</form>
		<hr class="my-4"/>
		<h3 class="font-semibold text-lg mb-2">Advanced</h3>
		<form action={ paths.DeleteOrganization(organization.Name) } method="POST">
			<button id="delete-organization-button" class="btn btn-error btn-outline" onclick="return confirm('Are you sure you want to delete?')">
				Delete organization
			</button>
			<input type="hidden" name="id" value={ organization.ID.String() }/>
		</form>
	}
}

templ getToken(organization Name, token *OrganizationToken) {
	@components.Layout(components.LayoutProps{
		Title:        organization.String(),
		Organization: organization,
		Breadcrumbs: []components.Breadcrumb{
			{Name: "organization token"},
		},
	}) {
		<span class="text-gray-600 text-sm">
			The organization API token is used to manage teams, team membership and workspaces. This token does not have permission to perform plans and applies in workspaces.
		</span>
		if token != nil {
			@components.UnpaginatedTable(
				&tokenTable{},
				[]*OrganizationToken{token},
				"org-token-table",
			)
		} else {
			<form class="mt-2" action={ paths.CreateOrganizationToken(organization) } method="POST">
				<button class="btn w-72">Create organization token</button>
			</form>
		}
	}
}

type tokenTable struct{}

templ (t tokenTable) Header() {
	<th>ID</th>
	<th>Created</th>
	<th>Actions</th>
}

templ (t tokenTable) Row(token *OrganizationToken) {
	<tr id="item-token">
		<td>
			@components.Identifier(token.ID)
		</td>
		<td>
			<span>{ internal.Ago(time.Now(), token.CreatedAt) }</span>
		</td>
		<td>
			<div class="flex gap-2">
				<form action={ paths.CreateOrganizationToken(token.Organization) } method="POST">
					<button class="btn">Regenerate</button>
				</form>
				<form action={ paths.DeleteOrganizationToken(token.Organization) } method="POST">
					@components.DeleteButton()
				</form>
			</div>
		</td>
	</tr>
}
