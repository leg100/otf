// Code generated by ogen, DO NOT EDIT.

package apigen

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}
	if prefix := s.cfg.Prefix; len(prefix) > 0 {
		if strings.HasPrefix(elem, prefix) {
			// Cut prefix from the path.
			elem = strings.TrimPrefix(elem, prefix)
		} else {
			// Prefix doesn't match.
			s.notFound(w, r)
			return
		}
	}
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [2]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'o': // Prefix: "organization"
				if l := len("organization"); len(elem) >= l && elem[0:l] == "organization" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "organization"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/workspaces"
						if l := len("/workspaces"); len(elem) >= l && elem[0:l] == "/workspaces" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleListWorkspacesRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					}
				case 's': // Prefix: "s"
					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "POST":
							s.handleCreateOrganizationRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "name"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteOrganizationRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleGetOrganizationRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/workspaces/"
							if l := len("/workspaces/"); len(elem) >= l && elem[0:l] == "/workspaces/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "name"
							// Leaf parameter
							args[1] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetWorkspaceByNameRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								case "PATCH":
									s.handleUpdateWorkspaceByNameRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,PATCH")
								}

								return
							}
						}
					}
				}
			case 'w': // Prefix: "workspaces/"
				if l := len("workspaces/"); len(elem) >= l && elem[0:l] == "workspaces/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					switch r.Method {
					case "DELETE":
						s.handleDeleteWorkspaceRequest([1]string{
							args[0],
						}, elemIsEscaped, w, r)
					case "GET":
						s.handleGetWorkspaceRequest([1]string{
							args[0],
						}, elemIsEscaped, w, r)
					case "PATCH":
						s.handleUpdateWorkspaceRequest([1]string{
							args[0],
						}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "DELETE,GET,PATCH")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/actions/"
					if l := len("/actions/"); len(elem) >= l && elem[0:l] == "/actions/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'f': // Prefix: "force-unlock"
						if l := len("force-unlock"); len(elem) >= l && elem[0:l] == "force-unlock" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleForceUnlockWorkspaceRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 'l': // Prefix: "lock"
						if l := len("lock"); len(elem) >= l && elem[0:l] == "lock" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleLockWorkspaceRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 'u': // Prefix: "unlock"
						if l := len("unlock"); len(elem) >= l && elem[0:l] == "unlock" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleUnlockWorkspaceRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					}
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	operationID string
	pathPattern string
	count       int
	args        [2]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'o': // Prefix: "organization"
				if l := len("organization"); len(elem) >= l && elem[0:l] == "organization" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "organization"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/workspaces"
						if l := len("/workspaces"); len(elem) >= l && elem[0:l] == "/workspaces" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: ListWorkspaces
								r.name = "ListWorkspaces"
								r.operationID = "listWorkspaces"
								r.pathPattern = "/organization/{organization}/workspaces"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
				case 's': // Prefix: "s"
					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							r.name = "CreateOrganization"
							r.operationID = "createOrganization"
							r.pathPattern = "/organizations"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "name"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "DeleteOrganization"
								r.operationID = "deleteOrganization"
								r.pathPattern = "/organizations/{name}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "GetOrganization"
								r.operationID = "getOrganization"
								r.pathPattern = "/organizations/{name}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/workspaces/"
							if l := len("/workspaces/"); len(elem) >= l && elem[0:l] == "/workspaces/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "name"
							// Leaf parameter
							args[1] = elem
							elem = ""

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: GetWorkspaceByName
									r.name = "GetWorkspaceByName"
									r.operationID = "getWorkspaceByName"
									r.pathPattern = "/organizations/{organization}/workspaces/{name}"
									r.args = args
									r.count = 2
									return r, true
								case "PATCH":
									// Leaf: UpdateWorkspaceByName
									r.name = "UpdateWorkspaceByName"
									r.operationID = "updateWorkspaceByName"
									r.pathPattern = "/organizations/{organization}/workspaces/{name}"
									r.args = args
									r.count = 2
									return r, true
								default:
									return
								}
							}
						}
					}
				}
			case 'w': // Prefix: "workspaces/"
				if l := len("workspaces/"); len(elem) >= l && elem[0:l] == "workspaces/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					switch method {
					case "DELETE":
						r.name = "DeleteWorkspace"
						r.operationID = "deleteWorkspace"
						r.pathPattern = "/workspaces/{id}"
						r.args = args
						r.count = 1
						return r, true
					case "GET":
						r.name = "GetWorkspace"
						r.operationID = "getWorkspace"
						r.pathPattern = "/workspaces/{id}"
						r.args = args
						r.count = 1
						return r, true
					case "PATCH":
						r.name = "UpdateWorkspace"
						r.operationID = "updateWorkspace"
						r.pathPattern = "/workspaces/{id}"
						r.args = args
						r.count = 1
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/actions/"
					if l := len("/actions/"); len(elem) >= l && elem[0:l] == "/actions/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'f': // Prefix: "force-unlock"
						if l := len("force-unlock"); len(elem) >= l && elem[0:l] == "force-unlock" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: ForceUnlockWorkspace
								r.name = "ForceUnlockWorkspace"
								r.operationID = "forceUnlockWorkspace"
								r.pathPattern = "/workspaces/{id}/actions/force-unlock"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					case 'l': // Prefix: "lock"
						if l := len("lock"); len(elem) >= l && elem[0:l] == "lock" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: LockWorkspace
								r.name = "LockWorkspace"
								r.operationID = "lockWorkspace"
								r.pathPattern = "/workspaces/{id}/actions/lock"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					case 'u': // Prefix: "unlock"
						if l := len("unlock"); len(elem) >= l && elem[0:l] == "unlock" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: UnlockWorkspace
								r.name = "UnlockWorkspace"
								r.operationID = "unlockWorkspace"
								r.pathPattern = "/workspaces/{id}/actions/unlock"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
				}
			}
		}
	}
	return r, false
}
