// Code generated by ogen, DO NOT EDIT.

package apigen

import (
	"fmt"

	"github.com/go-faster/errors"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// DeleteOrganizationNoContent is response for DeleteOrganization operation.
type DeleteOrganizationNoContent struct{}

// DeleteWorkspaceNoContent is response for DeleteWorkspace operation.
type DeleteWorkspaceNoContent struct{}

// Ref: #/components/schemas/Error
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() int32 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val int32) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// ForceUnlockWorkspaceNotFound is response for ForceUnlockWorkspace operation.
type ForceUnlockWorkspaceNotFound struct{}

func (*ForceUnlockWorkspaceNotFound) forceUnlockWorkspaceRes() {}

// GetOrganizationNotFound is response for GetOrganization operation.
type GetOrganizationNotFound struct{}

func (*GetOrganizationNotFound) getOrganizationRes() {}

// GetWorkspaceByNameNotFound is response for GetWorkspaceByName operation.
type GetWorkspaceByNameNotFound struct{}

func (*GetWorkspaceByNameNotFound) getWorkspaceByNameRes() {}

// GetWorkspaceNotFound is response for GetWorkspace operation.
type GetWorkspaceNotFound struct{}

func (*GetWorkspaceNotFound) getWorkspaceRes() {}

type ListWorkspaces []Workspace

func (*ListWorkspaces) listWorkspacesRes() {}

// ListWorkspacesNotFound is response for ListWorkspaces operation.
type ListWorkspacesNotFound struct{}

func (*ListWorkspacesNotFound) listWorkspacesRes() {}

// LockWorkspaceNotFound is response for LockWorkspace operation.
type LockWorkspaceNotFound struct{}

func (*LockWorkspaceNotFound) lockWorkspaceRes() {}

// Ref: #/components/schemas/NewOrganization
type NewOrganization struct {
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *NewOrganization) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *NewOrganization) SetName(val string) {
	s.Name = val
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateWorkspaceExecutionMode returns new OptUpdateWorkspaceExecutionMode with value set to v.
func NewOptUpdateWorkspaceExecutionMode(v UpdateWorkspaceExecutionMode) OptUpdateWorkspaceExecutionMode {
	return OptUpdateWorkspaceExecutionMode{
		Value: v,
		Set:   true,
	}
}

// OptUpdateWorkspaceExecutionMode is optional UpdateWorkspaceExecutionMode.
type OptUpdateWorkspaceExecutionMode struct {
	Value UpdateWorkspaceExecutionMode
	Set   bool
}

// IsSet returns true if OptUpdateWorkspaceExecutionMode was set.
func (o OptUpdateWorkspaceExecutionMode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateWorkspaceExecutionMode) Reset() {
	var v UpdateWorkspaceExecutionMode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateWorkspaceExecutionMode) SetTo(v UpdateWorkspaceExecutionMode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateWorkspaceExecutionMode) Get() (v UpdateWorkspaceExecutionMode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateWorkspaceExecutionMode) Or(d UpdateWorkspaceExecutionMode) UpdateWorkspaceExecutionMode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Organization
type Organization struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s *Organization) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *Organization) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *Organization) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Organization) SetName(val string) {
	s.Name = val
}

func (*Organization) getOrganizationRes() {}

// UnlockWorkspaceNotFound is response for UnlockWorkspace operation.
type UnlockWorkspaceNotFound struct{}

func (*UnlockWorkspaceNotFound) unlockWorkspaceRes() {}

// Ref: #/components/schemas/UpdateWorkspace
type UpdateWorkspace struct {
	ExecutionMode OptUpdateWorkspaceExecutionMode `json:"executionMode"`
}

// GetExecutionMode returns the value of ExecutionMode.
func (s *UpdateWorkspace) GetExecutionMode() OptUpdateWorkspaceExecutionMode {
	return s.ExecutionMode
}

// SetExecutionMode sets the value of ExecutionMode.
func (s *UpdateWorkspace) SetExecutionMode(val OptUpdateWorkspaceExecutionMode) {
	s.ExecutionMode = val
}

// UpdateWorkspaceByNameNotFound is response for UpdateWorkspaceByName operation.
type UpdateWorkspaceByNameNotFound struct{}

func (*UpdateWorkspaceByNameNotFound) updateWorkspaceByNameRes() {}

type UpdateWorkspaceExecutionMode string

const (
	UpdateWorkspaceExecutionModeLocal  UpdateWorkspaceExecutionMode = "local"
	UpdateWorkspaceExecutionModeRemote UpdateWorkspaceExecutionMode = "remote"
	UpdateWorkspaceExecutionModeAgent  UpdateWorkspaceExecutionMode = "agent"
)

// MarshalText implements encoding.TextMarshaler.
func (s UpdateWorkspaceExecutionMode) MarshalText() ([]byte, error) {
	switch s {
	case UpdateWorkspaceExecutionModeLocal:
		return []byte(s), nil
	case UpdateWorkspaceExecutionModeRemote:
		return []byte(s), nil
	case UpdateWorkspaceExecutionModeAgent:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateWorkspaceExecutionMode) UnmarshalText(data []byte) error {
	switch UpdateWorkspaceExecutionMode(data) {
	case UpdateWorkspaceExecutionModeLocal:
		*s = UpdateWorkspaceExecutionModeLocal
		return nil
	case UpdateWorkspaceExecutionModeRemote:
		*s = UpdateWorkspaceExecutionModeRemote
		return nil
	case UpdateWorkspaceExecutionModeAgent:
		*s = UpdateWorkspaceExecutionModeAgent
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// UpdateWorkspaceNotFound is response for UpdateWorkspace operation.
type UpdateWorkspaceNotFound struct{}

func (*UpdateWorkspaceNotFound) updateWorkspaceRes() {}

// Ref: #/components/schemas/Workspace
type Workspace struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	AutoApply bool   `json:"autoApply"`
}

// GetID returns the value of ID.
func (s *Workspace) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *Workspace) GetName() string {
	return s.Name
}

// GetAutoApply returns the value of AutoApply.
func (s *Workspace) GetAutoApply() bool {
	return s.AutoApply
}

// SetID sets the value of ID.
func (s *Workspace) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Workspace) SetName(val string) {
	s.Name = val
}

// SetAutoApply sets the value of AutoApply.
func (s *Workspace) SetAutoApply(val bool) {
	s.AutoApply = val
}

func (*Workspace) forceUnlockWorkspaceRes()  {}
func (*Workspace) getWorkspaceByNameRes()    {}
func (*Workspace) getWorkspaceRes()          {}
func (*Workspace) lockWorkspaceRes()         {}
func (*Workspace) unlockWorkspaceRes()       {}
func (*Workspace) updateWorkspaceByNameRes() {}
func (*Workspace) updateWorkspaceRes()       {}
